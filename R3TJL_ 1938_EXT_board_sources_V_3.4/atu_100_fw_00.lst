;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28.01.2020 19:32:49
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x31B0      	MOVLP      48
0x0001	0x2E53      	GOTO       13907
_Soft_I2C_Start:
;oled_control.c,363 :: 		void Soft_I2C_Start () {
;oled_control.c,364 :: 		if(led_type!=0) {
0x0003	0x002A      	MOVLB      10
0x0004	0x083B      	MOVF       oled_control_led_type, 0
0x0005	0x3A00      	XORLW      0
0x0006	0x1903      	BTFSC      STATUS, 2
0x0007	0x2821      	GOTO       L_Soft_I2C_Start74
;oled_control.c,365 :: 		Soft_I2C_Scl_Direction = 1;
0x0008	0x0021      	MOVLB      1
0x0009	0x170D      	BSF        TRISB6_bit, BitPos(TRISB6_bit+0)
;oled_control.c,366 :: 		Delay_us(5);
0x000A	0x3006      	MOVLW      6
0x000B	0x00FD      	MOVWF      R13
L_Soft_I2C_Start75:
0x000C	0x0BFD      	DECFSZ     R13, 1
0x000D	0x280C      	GOTO       L_Soft_I2C_Start75
0x000E	0x0000      	NOP
;oled_control.c,367 :: 		Soft_I2C_Sda_Direction = 1;
0x000F	0x178D      	BSF        TRISB7_bit, BitPos(TRISB7_bit+0)
;oled_control.c,368 :: 		Delay_us(5);
0x0010	0x3006      	MOVLW      6
0x0011	0x00FD      	MOVWF      R13
L_Soft_I2C_Start76:
0x0012	0x0BFD      	DECFSZ     R13, 1
0x0013	0x2812      	GOTO       L_Soft_I2C_Start76
0x0014	0x0000      	NOP
;oled_control.c,369 :: 		Soft_I2C_Sda_Direction = 0;
0x0015	0x138D      	BCF        TRISB7_bit, BitPos(TRISB7_bit+0)
;oled_control.c,370 :: 		Delay_us(5);
0x0016	0x3006      	MOVLW      6
0x0017	0x00FD      	MOVWF      R13
L_Soft_I2C_Start77:
0x0018	0x0BFD      	DECFSZ     R13, 1
0x0019	0x2818      	GOTO       L_Soft_I2C_Start77
0x001A	0x0000      	NOP
;oled_control.c,371 :: 		Soft_I2C_Scl_Direction = 0;
0x001B	0x130D      	BCF        TRISB6_bit, BitPos(TRISB6_bit+0)
;oled_control.c,372 :: 		Delay_us(5);
0x001C	0x3006      	MOVLW      6
0x001D	0x00FD      	MOVWF      R13
L_Soft_I2C_Start78:
0x001E	0x0BFD      	DECFSZ     R13, 1
0x001F	0x281E      	GOTO       L_Soft_I2C_Start78
0x0020	0x0000      	NOP
;oled_control.c,373 :: 		}
L_Soft_I2C_Start74:
;oled_control.c,374 :: 		}
L_end_Soft_I2C_Start:
0x0021	0x0008      	RETURN
; end of _Soft_I2C_Start
_Soft_I2C_Write:
;oled_control.c,376 :: 		void Soft_I2C_Write (char d) {
;oled_control.c,378 :: 		if(led_type!=0) {
0x0022	0x002A      	MOVLB      10
0x0023	0x083B      	MOVF       oled_control_led_type, 0
0x0024	0x3A00      	XORLW      0
0x0025	0x1903      	BTFSC      STATUS, 2
0x0026	0x285C      	GOTO       L_Soft_I2C_Write79
;oled_control.c,379 :: 		for(i=0; i<=7; i++) {
0x0027	0x01F1      	CLRF       R1
L_Soft_I2C_Write80:
0x0028	0x0871      	MOVF       R1, 0
0x0029	0x3C07      	SUBLW      7
0x002A	0x1C03      	BTFSS      STATUS, 0
0x002B	0x2849      	GOTO       L_Soft_I2C_Write81
;oled_control.c,380 :: 		if(d.B7==0) Soft_I2C_Sda_Direction = 0; else  Soft_I2C_Sda_Direction = 1;
0x002C	0x002C      	MOVLB      12
0x002D	0x1BBD      	BTFSC      FARG_Soft_I2C_Write_d, 7
0x002E	0x2832      	GOTO       L_Soft_I2C_Write83
0x002F	0x0021      	MOVLB      1
0x0030	0x138D      	BCF        TRISB7_bit, BitPos(TRISB7_bit+0)
0x0031	0x2834      	GOTO       L_Soft_I2C_Write84
L_Soft_I2C_Write83:
0x0032	0x0021      	MOVLB      1
0x0033	0x178D      	BSF        TRISB7_bit, BitPos(TRISB7_bit+0)
L_Soft_I2C_Write84:
;oled_control.c,381 :: 		Delay_us(5);
0x0034	0x3006      	MOVLW      6
0x0035	0x00FD      	MOVWF      R13
L_Soft_I2C_Write85:
0x0036	0x0BFD      	DECFSZ     R13, 1
0x0037	0x2836      	GOTO       L_Soft_I2C_Write85
0x0038	0x0000      	NOP
;oled_control.c,382 :: 		Soft_I2C_Scl_Direction = 1;
0x0039	0x170D      	BSF        TRISB6_bit, BitPos(TRISB6_bit+0)
;oled_control.c,383 :: 		Delay_us(5);
0x003A	0x3006      	MOVLW      6
0x003B	0x00FD      	MOVWF      R13
L_Soft_I2C_Write86:
0x003C	0x0BFD      	DECFSZ     R13, 1
0x003D	0x283C      	GOTO       L_Soft_I2C_Write86
0x003E	0x0000      	NOP
;oled_control.c,384 :: 		Soft_I2C_Scl_Direction = 0;
0x003F	0x130D      	BCF        TRISB6_bit, BitPos(TRISB6_bit+0)
;oled_control.c,385 :: 		Delay_us(5);
0x0040	0x3006      	MOVLW      6
0x0041	0x00FD      	MOVWF      R13
L_Soft_I2C_Write87:
0x0042	0x0BFD      	DECFSZ     R13, 1
0x0043	0x2842      	GOTO       L_Soft_I2C_Write87
0x0044	0x0000      	NOP
;oled_control.c,386 :: 		d = d << 1;
0x0045	0x002C      	MOVLB      12
0x0046	0x35BD      	LSLF       FARG_Soft_I2C_Write_d, 1
;oled_control.c,379 :: 		for(i=0; i<=7; i++) {
0x0047	0x0AF1      	INCF       R1, 1
;oled_control.c,387 :: 		}
0x0048	0x2828      	GOTO       L_Soft_I2C_Write80
L_Soft_I2C_Write81:
;oled_control.c,389 :: 		Soft_I2C_Sda_Direction = 1; //ACK
0x0049	0x0021      	MOVLB      1
0x004A	0x178D      	BSF        TRISB7_bit, BitPos(TRISB7_bit+0)
;oled_control.c,390 :: 		Delay_us(5);
0x004B	0x3006      	MOVLW      6
0x004C	0x00FD      	MOVWF      R13
L_Soft_I2C_Write88:
0x004D	0x0BFD      	DECFSZ     R13, 1
0x004E	0x284D      	GOTO       L_Soft_I2C_Write88
0x004F	0x0000      	NOP
;oled_control.c,391 :: 		Soft_I2C_Scl_Direction = 1;
0x0050	0x170D      	BSF        TRISB6_bit, BitPos(TRISB6_bit+0)
;oled_control.c,392 :: 		Delay_us(5);
0x0051	0x3006      	MOVLW      6
0x0052	0x00FD      	MOVWF      R13
L_Soft_I2C_Write89:
0x0053	0x0BFD      	DECFSZ     R13, 1
0x0054	0x2853      	GOTO       L_Soft_I2C_Write89
0x0055	0x0000      	NOP
;oled_control.c,393 :: 		Soft_I2C_Scl_Direction = 0;
0x0056	0x130D      	BCF        TRISB6_bit, BitPos(TRISB6_bit+0)
;oled_control.c,394 :: 		Delay_us(5);
0x0057	0x3006      	MOVLW      6
0x0058	0x00FD      	MOVWF      R13
L_Soft_I2C_Write90:
0x0059	0x0BFD      	DECFSZ     R13, 1
0x005A	0x2859      	GOTO       L_Soft_I2C_Write90
0x005B	0x0000      	NOP
;oled_control.c,395 :: 		}
L_Soft_I2C_Write79:
;oled_control.c,396 :: 		}
L_end_Soft_I2C_Write:
0x005C	0x0008      	RETURN
; end of _Soft_I2C_Write
_Mul_8x8_U:
;__Lib_Math.c,103 :: 		
;__Lib_Math.c,109 :: 		
0x005D	0x0020      	MOVLB      0
;__Lib_Math.c,110 :: 		
0x005E	0x0870      	MOVF       R0, 0
;__Lib_Math.c,111 :: 		
0x005F	0x00F1      	MOVWF      R1
;__Lib_Math.c,112 :: 		
0x0060	0x01F0      	CLRF       R0
;__Lib_Math.c,113 :: 		
0x0061	0x3008      	MOVLW      8
;__Lib_Math.c,114 :: 		
0x0062	0x00FC      	MOVWF      R12
;__Lib_Math.c,115 :: 		
0x0063	0x0871      	MOVF       R1, 0
;__Lib_Math.c,116 :: 		
0x0064	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,117 :: 		
0x0065	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,118 :: 		
0x0066	0x286B      	GOTO       $+5
;__Lib_Math.c,119 :: 		
0x0067	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,120 :: 		
0x0068	0x2864      	GOTO       $-4
;__Lib_Math.c,121 :: 		
0x0069	0x01F1      	CLRF       R1
;__Lib_Math.c,122 :: 		
0x006A	0x3400      	RETLW      0
;__Lib_Math.c,123 :: 		
0x006B	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,124 :: 		
0x006C	0x2870      	GOTO       $+4
;__Lib_Math.c,125 :: 		
0x006D	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,126 :: 		
0x006E	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,127 :: 		
0x006F	0x07F1      	ADDWF      R1, 1
;__Lib_Math.c,128 :: 		
0x0070	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,129 :: 		
0x0071	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,130 :: 		
0x0072	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,131 :: 		
0x0073	0x286D      	GOTO       $-6
;__Lib_Math.c,133 :: 		
;__Lib_Math.c,134 :: 		
L_end_Mul_8x8_U:
0x0074	0x0008      	RETURN
; end of _Mul_8x8_U
_Soft_I2C_Stop:
;oled_control.c,398 :: 		void Soft_I2C_Stop () {
;oled_control.c,399 :: 		if(led_type!=0) {
0x0075	0x002A      	MOVLB      10
0x0076	0x083B      	MOVF       oled_control_led_type, 0
0x0077	0x3A00      	XORLW      0
0x0078	0x1903      	BTFSC      STATUS, 2
0x0079	0x288D      	GOTO       L_Soft_I2C_Stop91
;oled_control.c,400 :: 		Soft_I2C_Sda_Direction = 0;
0x007A	0x0021      	MOVLB      1
0x007B	0x138D      	BCF        TRISB7_bit, BitPos(TRISB7_bit+0)
;oled_control.c,401 :: 		Delay_us(5);
0x007C	0x3006      	MOVLW      6
0x007D	0x00FD      	MOVWF      R13
L_Soft_I2C_Stop92:
0x007E	0x0BFD      	DECFSZ     R13, 1
0x007F	0x287E      	GOTO       L_Soft_I2C_Stop92
0x0080	0x0000      	NOP
;oled_control.c,402 :: 		Soft_I2C_Scl_Direction = 1;
0x0081	0x170D      	BSF        TRISB6_bit, BitPos(TRISB6_bit+0)
;oled_control.c,403 :: 		Delay_us(5);
0x0082	0x3006      	MOVLW      6
0x0083	0x00FD      	MOVWF      R13
L_Soft_I2C_Stop93:
0x0084	0x0BFD      	DECFSZ     R13, 1
0x0085	0x2884      	GOTO       L_Soft_I2C_Stop93
0x0086	0x0000      	NOP
;oled_control.c,404 :: 		Soft_I2C_Sda_Direction = 1;
0x0087	0x178D      	BSF        TRISB7_bit, BitPos(TRISB7_bit+0)
;oled_control.c,405 :: 		Delay_us(5);
0x0088	0x3006      	MOVLW      6
0x0089	0x00FD      	MOVWF      R13
L_Soft_I2C_Stop94:
0x008A	0x0BFD      	DECFSZ     R13, 1
0x008B	0x288A      	GOTO       L_Soft_I2C_Stop94
0x008C	0x0000      	NOP
;oled_control.c,406 :: 		}
L_Soft_I2C_Stop91:
;oled_control.c,407 :: 		}
L_end_Soft_I2C_Stop:
0x008D	0x0008      	RETURN
; end of _Soft_I2C_Stop
_set_addressing:
;oled_control.c,230 :: 		void set_addressing (char pagenum, char c_start) {
;oled_control.c,232 :: 		c = c_start + oled_shift;
0x008E	0x002A      	MOVLB      10
0x008F	0x0839      	MOVF       oled_control_oled_shift, 0
0x0090	0x002C      	MOVLB      12
0x0091	0x0739      	ADDWF      FARG_set_addressing_c_start, 0
0x0092	0x00BC      	MOVWF      set_addressing_c_L0
;oled_control.c,233 :: 		Soft_I2C_Start();
0x0093	0x2003      	CALL       _Soft_I2C_Start
;oled_control.c,234 :: 		Soft_I2C_Write(led_addr);             // device addres
0x0094	0x002A      	MOVLB      10
0x0095	0x083A      	MOVF       oled_control_led_addr, 0
0x0096	0x002C      	MOVLB      12
0x0097	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x0098	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,235 :: 		Soft_I2C_Write(0);              // 0 - continious mode, command; 64 - Co, data
0x0099	0x002C      	MOVLB      12
0x009A	0x01BD      	CLRF       FARG_Soft_I2C_Write_d
0x009B	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,236 :: 		Soft_I2C_Write(0xB0 + pagenum);  // set page number
0x009C	0x002C      	MOVLB      12
0x009D	0x0838      	MOVF       FARG_set_addressing_pagenum, 0
0x009E	0x3EB0      	ADDLW      176
0x009F	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x00A0	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,238 :: 		if (c <= 15) { a = c; b = 0; }
0x00A1	0x002C      	MOVLB      12
0x00A2	0x083C      	MOVF       set_addressing_c_L0, 0
0x00A3	0x3C0F      	SUBLW      15
0x00A4	0x1C03      	BTFSS      STATUS, 0
0x00A5	0x28AA      	GOTO       L_set_addressing41
0x00A6	0x083C      	MOVF       set_addressing_c_L0, 0
0x00A7	0x00BA      	MOVWF      set_addressing_a_L0
0x00A8	0x01BB      	CLRF       set_addressing_b_L0
0x00A9	0x28BB      	GOTO       L_set_addressing42
L_set_addressing41:
;oled_control.c,239 :: 		else { b = c / 16; a = c - b * 16; }
0x00AA	0x083C      	MOVF       set_addressing_c_L0, 0
0x00AB	0x00F2      	MOVWF      R2
0x00AC	0x36F2      	LSRF       R2, 1
0x00AD	0x36F2      	LSRF       R2, 1
0x00AE	0x36F2      	LSRF       R2, 1
0x00AF	0x36F2      	LSRF       R2, 1
0x00B0	0x0872      	MOVF       R2, 0
0x00B1	0x00BB      	MOVWF      set_addressing_b_L0
0x00B2	0x0872      	MOVF       R2, 0
0x00B3	0x00F0      	MOVWF      R0
0x00B4	0x35F0      	LSLF       R0, 1
0x00B5	0x35F0      	LSLF       R0, 1
0x00B6	0x35F0      	LSLF       R0, 1
0x00B7	0x35F0      	LSLF       R0, 1
0x00B8	0x0870      	MOVF       R0, 0
0x00B9	0x023C      	SUBWF      set_addressing_c_L0, 0
0x00BA	0x00BA      	MOVWF      set_addressing_a_L0
L_set_addressing42:
;oled_control.c,240 :: 		Soft_I2C_Write (a);        // set lower nibble of start address
0x00BB	0x083A      	MOVF       set_addressing_a_L0, 0
0x00BC	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x00BD	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,241 :: 		Soft_I2C_Write (0x10 + b); // set higher nibble of start address
0x00BE	0x002C      	MOVLB      12
0x00BF	0x083B      	MOVF       set_addressing_b_L0, 0
0x00C0	0x3E10      	ADDLW      16
0x00C1	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x00C2	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,243 :: 		Soft_I2C_Start();
0x00C3	0x2003      	CALL       _Soft_I2C_Start
;oled_control.c,244 :: 		Soft_I2C_Write(led_addr);        // device addres
0x00C4	0x002A      	MOVLB      10
0x00C5	0x083A      	MOVF       oled_control_led_addr, 0
0x00C6	0x002C      	MOVLB      12
0x00C7	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x00C8	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,245 :: 		Soft_I2C_Write(64);              // 0 - continious mode, command; 64 - Co, data
0x00C9	0x3040      	MOVLW      64
0x00CA	0x002C      	MOVLB      12
0x00CB	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x00CC	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,246 :: 		}
L_end_set_addressing:
0x00CD	0x0008      	RETURN
; end of _set_addressing
_Div_16x16_U:
;__Lib_Math.c,213 :: 		
;__Lib_Math.c,220 :: 		
0x00CE	0x0020      	MOVLB      0
;__Lib_Math.c,221 :: 		
0x00CF	0x01F8      	CLRF       R8
;__Lib_Math.c,222 :: 		
0x00D0	0x01F9      	CLRF       R9
;__Lib_Math.c,223 :: 		
0x00D1	0x3010      	MOVLW      16
;__Lib_Math.c,224 :: 		
0x00D2	0x00FC      	MOVWF      R12
;__Lib_Math.c,225 :: 		
0x00D3	0x0D71      	RLF        R1, 0
;__Lib_Math.c,226 :: 		
0x00D4	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,227 :: 		
0x00D5	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,228 :: 		
0x00D6	0x0874      	MOVF       R4, 0
;__Lib_Math.c,229 :: 		
0x00D7	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,230 :: 		
0x00D8	0x0875      	MOVF       R5, 0
;__Lib_Math.c,231 :: 		
0x00D9	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,232 :: 		
0x00DA	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,233 :: 		
0x00DB	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,234 :: 		
0x00DC	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,235 :: 		
0x00DD	0x28E5      	GOTO       $+8
;__Lib_Math.c,236 :: 		
0x00DE	0x0874      	MOVF       R4, 0
;__Lib_Math.c,237 :: 		
0x00DF	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,238 :: 		
0x00E0	0x0875      	MOVF       R5, 0
;__Lib_Math.c,239 :: 		
0x00E1	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,240 :: 		
0x00E2	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,241 :: 		
0x00E3	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,242 :: 		
0x00E4	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,243 :: 		
0x00E5	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,244 :: 		
0x00E6	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,245 :: 		
0x00E7	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,246 :: 		
0x00E8	0x28D3      	GOTO       $-21
;__Lib_Math.c,248 :: 		
L_end_Div_16x16_U:
0x00E9	0x0008      	RETURN
; end of _Div_16x16_U
_oled_wr_str:
;oled_control.c,271 :: 		void oled_wr_str (char col, char page, char str[], char leng ) {  //    128*32 or 128*64 OLED
;oled_control.c,273 :: 		Soft_I2C_Start();
0x00EA	0x2003      	CALL       _Soft_I2C_Start
;oled_control.c,274 :: 		Soft_I2C_Write(led_addr);       // device addres
0x00EB	0x002A      	MOVLB      10
0x00EC	0x083A      	MOVF       oled_control_led_addr, 0
0x00ED	0x002C      	MOVLB      12
0x00EE	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x00EF	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,275 :: 		Soft_I2C_Write(64);              // 0 - continious mode, command; 64 - Co, data
0x00F0	0x3040      	MOVLW      64
0x00F1	0x002C      	MOVLB      12
0x00F2	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x00F3	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,277 :: 		set_addressing (page, col);
0x00F4	0x002C      	MOVLB      12
0x00F5	0x082F      	MOVF       FARG_oled_wr_str_page, 0
0x00F6	0x00B8      	MOVWF      FARG_set_addressing_pagenum
0x00F7	0x082E      	MOVF       FARG_oled_wr_str_col, 0
0x00F8	0x00B9      	MOVWF      FARG_set_addressing_c_start
0x00F9	0x208E      	CALL       _set_addressing
;oled_control.c,279 :: 		for (i = 0; i < leng; i++) { // write string
0x00FA	0x002C      	MOVLB      12
0x00FB	0x01B3      	CLRF       oled_wr_str_i_L0
L_oled_wr_str50:
0x00FC	0x0832      	MOVF       FARG_oled_wr_str_leng, 0
0x00FD	0x0233      	SUBWF      oled_wr_str_i_L0, 0
0x00FE	0x1803      	BTFSC      STATUS, 0
0x00FF	0x29B0      	GOTO       L_oled_wr_str51
;oled_control.c,280 :: 		if (str[i] == 0) g = 0; else g = str[i] - 32; // NULL detection
0x0100	0x0833      	MOVF       oled_wr_str_i_L0, 0
0x0101	0x0730      	ADDWF      FARG_oled_wr_str_str, 0
0x0102	0x0084      	MOVWF      FSR0
0x0103	0x3000      	MOVLW      0
0x0104	0x3D31      	ADDWFC     FARG_oled_wr_str_str+1, 0
0x0105	0x0085      	MOVWF      FSR0H
0x0106	0x0800      	MOVF       INDF0, 0
0x0107	0x3A00      	XORLW      0
0x0108	0x1D03      	BTFSS      STATUS, 2
0x0109	0x290C      	GOTO       L_oled_wr_str53
0x010A	0x01B5      	CLRF       oled_wr_str_g_L0
0x010B	0x2915      	GOTO       L_oled_wr_str54
L_oled_wr_str53:
0x010C	0x0833      	MOVF       oled_wr_str_i_L0, 0
0x010D	0x0730      	ADDWF      FARG_oled_wr_str_str, 0
0x010E	0x0084      	MOVWF      FSR0
0x010F	0x3000      	MOVLW      0
0x0110	0x3D31      	ADDWFC     FARG_oled_wr_str_str+1, 0
0x0111	0x0085      	MOVWF      FSR0H
0x0112	0x3020      	MOVLW      32
0x0113	0x0200      	SUBWF      INDF0, 0
0x0114	0x00B5      	MOVWF      oled_wr_str_g_L0
L_oled_wr_str54:
;oled_control.c,281 :: 		for (h = 0; h <= 4; h++) {  // write letter
0x0115	0x01B4      	CLRF       oled_wr_str_h_L0
L_oled_wr_str55:
0x0116	0x0834      	MOVF       oled_wr_str_h_L0, 0
0x0117	0x3C04      	SUBLW      4
0x0118	0x1C03      	BTFSS      STATUS, 0
0x0119	0x29A8      	GOTO       L_oled_wr_str56
;oled_control.c,282 :: 		w1 = font5x8[g*5+h];
0x011A	0x0835      	MOVF       oled_wr_str_g_L0, 0
0x011B	0x00F0      	MOVWF      R0
0x011C	0x3005      	MOVLW      5
0x011D	0x00F4      	MOVWF      R4
0x011E	0x205D      	CALL       _Mul_8x8_U
0x011F	0x002C      	MOVLB      12
0x0120	0x0834      	MOVF       oled_wr_str_h_L0, 0
0x0121	0x07F0      	ADDWF      R0, 1
0x0122	0x3000      	MOVLW      0
0x0123	0x3DF1      	ADDWFC     R1, 1
0x0124	0x3043      	MOVLW      oled_control_font5x8
0x0125	0x0770      	ADDWF      R0, 0
0x0126	0x0084      	MOVWF      FSR0
0x0127	0x30BB      	MOVLW      hi_addr(oled_control_font5x8)
0x0128	0x3D71      	ADDWFC     R1, 0
0x0129	0x0085      	MOVWF      FSR0H
0x012A	0x0800      	MOVF       INDF0, 0
0x012B	0x00B6      	MOVWF      oled_wr_str_w1_L0
;oled_control.c,283 :: 		if(page!=2 & page!=4 & page!=6) {
0x012C	0x082F      	MOVF       FARG_oled_wr_str_page, 0
0x012D	0x3A02      	XORLW      2
0x012E	0x3001      	MOVLW      1
0x012F	0x1903      	BTFSC      STATUS, 2
0x0130	0x3000      	MOVLW      0
0x0131	0x00F1      	MOVWF      R1
0x0132	0x082F      	MOVF       FARG_oled_wr_str_page, 0
0x0133	0x3A04      	XORLW      4
0x0134	0x3001      	MOVLW      1
0x0135	0x1903      	BTFSC      STATUS, 2
0x0136	0x3000      	MOVLW      0
0x0137	0x00F0      	MOVWF      R0
0x0138	0x0870      	MOVF       R0, 0
0x0139	0x05F1      	ANDWF      R1, 1
0x013A	0x082F      	MOVF       FARG_oled_wr_str_page, 0
0x013B	0x3A06      	XORLW      6
0x013C	0x3001      	MOVLW      1
0x013D	0x1903      	BTFSC      STATUS, 2
0x013E	0x3000      	MOVLW      0
0x013F	0x00F0      	MOVWF      R0
0x0140	0x0871      	MOVF       R1, 0
0x0141	0x05F0      	ANDWF      R0, 1
0x0142	0x1903      	BTFSC      STATUS, 2
0x0143	0x296D      	GOTO       L_oled_wr_str58
;oled_control.c,284 :: 		w2.B7 = w1.B3;
0x0144	0x19B6      	BTFSC      oled_wr_str_w1_L0, 3
0x0145	0x2948      	GOTO       L__oled_wr_str104
0x0146	0x13B7      	BCF        oled_wr_str_w2_L0, 7
0x0147	0x2949      	GOTO       L__oled_wr_str105
L__oled_wr_str104:
0x0148	0x17B7      	BSF        oled_wr_str_w2_L0, 7
L__oled_wr_str105:
;oled_control.c,285 :: 		w2.B6 = w1.B3;
0x0149	0x19B6      	BTFSC      oled_wr_str_w1_L0, 3
0x014A	0x294D      	GOTO       L__oled_wr_str106
0x014B	0x1337      	BCF        oled_wr_str_w2_L0, 6
0x014C	0x294E      	GOTO       L__oled_wr_str107
L__oled_wr_str106:
0x014D	0x1737      	BSF        oled_wr_str_w2_L0, 6
L__oled_wr_str107:
;oled_control.c,286 :: 		w2.B5 = w1.B2;
0x014E	0x1936      	BTFSC      oled_wr_str_w1_L0, 2
0x014F	0x2952      	GOTO       L__oled_wr_str108
0x0150	0x12B7      	BCF        oled_wr_str_w2_L0, 5
0x0151	0x2953      	GOTO       L__oled_wr_str109
L__oled_wr_str108:
0x0152	0x16B7      	BSF        oled_wr_str_w2_L0, 5
L__oled_wr_str109:
;oled_control.c,287 :: 		w2.B4 = w1.B2;
0x0153	0x1936      	BTFSC      oled_wr_str_w1_L0, 2
0x0154	0x2957      	GOTO       L__oled_wr_str110
0x0155	0x1237      	BCF        oled_wr_str_w2_L0, 4
0x0156	0x2958      	GOTO       L__oled_wr_str111
L__oled_wr_str110:
0x0157	0x1637      	BSF        oled_wr_str_w2_L0, 4
L__oled_wr_str111:
;oled_control.c,288 :: 		w2.B3 = w1.B1;
0x0158	0x18B6      	BTFSC      oled_wr_str_w1_L0, 1
0x0159	0x295C      	GOTO       L__oled_wr_str112
0x015A	0x11B7      	BCF        oled_wr_str_w2_L0, 3
0x015B	0x295D      	GOTO       L__oled_wr_str113
L__oled_wr_str112:
0x015C	0x15B7      	BSF        oled_wr_str_w2_L0, 3
L__oled_wr_str113:
;oled_control.c,289 :: 		w2.B2 = w1.B1;
0x015D	0x18B6      	BTFSC      oled_wr_str_w1_L0, 1
0x015E	0x2961      	GOTO       L__oled_wr_str114
0x015F	0x1137      	BCF        oled_wr_str_w2_L0, 2
0x0160	0x2962      	GOTO       L__oled_wr_str115
L__oled_wr_str114:
0x0161	0x1537      	BSF        oled_wr_str_w2_L0, 2
L__oled_wr_str115:
;oled_control.c,290 :: 		w2.B1 = w1.B0;
0x0162	0x1836      	BTFSC      oled_wr_str_w1_L0, 0
0x0163	0x2966      	GOTO       L__oled_wr_str116
0x0164	0x10B7      	BCF        oled_wr_str_w2_L0, 1
0x0165	0x2967      	GOTO       L__oled_wr_str117
L__oled_wr_str116:
0x0166	0x14B7      	BSF        oled_wr_str_w2_L0, 1
L__oled_wr_str117:
;oled_control.c,291 :: 		w2.B0 = w1.B0;
0x0167	0x1836      	BTFSC      oled_wr_str_w1_L0, 0
0x0168	0x296B      	GOTO       L__oled_wr_str118
0x0169	0x1037      	BCF        oled_wr_str_w2_L0, 0
0x016A	0x296C      	GOTO       L__oled_wr_str119
L__oled_wr_str118:
0x016B	0x1437      	BSF        oled_wr_str_w2_L0, 0
L__oled_wr_str119:
;oled_control.c,292 :: 		}
0x016C	0x298D      	GOTO       L_oled_wr_str59
L_oled_wr_str58:
;oled_control.c,294 :: 		w2.B7 = w1.B2;
0x016D	0x1936      	BTFSC      oled_wr_str_w1_L0, 2
0x016E	0x2971      	GOTO       L__oled_wr_str120
0x016F	0x13B7      	BCF        oled_wr_str_w2_L0, 7
0x0170	0x2972      	GOTO       L__oled_wr_str121
L__oled_wr_str120:
0x0171	0x17B7      	BSF        oled_wr_str_w2_L0, 7
L__oled_wr_str121:
;oled_control.c,295 :: 		w2.B6 = w1.B2;
0x0172	0x1936      	BTFSC      oled_wr_str_w1_L0, 2
0x0173	0x2976      	GOTO       L__oled_wr_str122
0x0174	0x1337      	BCF        oled_wr_str_w2_L0, 6
0x0175	0x2977      	GOTO       L__oled_wr_str123
L__oled_wr_str122:
0x0176	0x1737      	BSF        oled_wr_str_w2_L0, 6
L__oled_wr_str123:
;oled_control.c,296 :: 		w2.B5 = w1.B1;
0x0177	0x18B6      	BTFSC      oled_wr_str_w1_L0, 1
0x0178	0x297B      	GOTO       L__oled_wr_str124
0x0179	0x12B7      	BCF        oled_wr_str_w2_L0, 5
0x017A	0x297C      	GOTO       L__oled_wr_str125
L__oled_wr_str124:
0x017B	0x16B7      	BSF        oled_wr_str_w2_L0, 5
L__oled_wr_str125:
;oled_control.c,297 :: 		w2.B4 = w1.B1;
0x017C	0x18B6      	BTFSC      oled_wr_str_w1_L0, 1
0x017D	0x2980      	GOTO       L__oled_wr_str126
0x017E	0x1237      	BCF        oled_wr_str_w2_L0, 4
0x017F	0x2981      	GOTO       L__oled_wr_str127
L__oled_wr_str126:
0x0180	0x1637      	BSF        oled_wr_str_w2_L0, 4
L__oled_wr_str127:
;oled_control.c,298 :: 		w2.B3 = w1.B0;
0x0181	0x1836      	BTFSC      oled_wr_str_w1_L0, 0
0x0182	0x2985      	GOTO       L__oled_wr_str128
0x0183	0x11B7      	BCF        oled_wr_str_w2_L0, 3
0x0184	0x2986      	GOTO       L__oled_wr_str129
L__oled_wr_str128:
0x0185	0x15B7      	BSF        oled_wr_str_w2_L0, 3
L__oled_wr_str129:
;oled_control.c,299 :: 		w2.B2 = w1.B0;
0x0186	0x1836      	BTFSC      oled_wr_str_w1_L0, 0
0x0187	0x298A      	GOTO       L__oled_wr_str130
0x0188	0x1137      	BCF        oled_wr_str_w2_L0, 2
0x0189	0x298B      	GOTO       L__oled_wr_str131
L__oled_wr_str130:
0x018A	0x1537      	BSF        oled_wr_str_w2_L0, 2
L__oled_wr_str131:
;oled_control.c,300 :: 		w2.B1 = 0;
0x018B	0x10B7      	BCF        oled_wr_str_w2_L0, 1
;oled_control.c,301 :: 		w2.B0 = 0;
0x018C	0x1037      	BCF        oled_wr_str_w2_L0, 0
;oled_control.c,302 :: 		}
L_oled_wr_str59:
;oled_control.c,303 :: 		Soft_I2C_Write(w2);
0x018D	0x0837      	MOVF       oled_wr_str_w2_L0, 0
0x018E	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x018F	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,304 :: 		if(led_type==4 | led_type==5) Soft_I2C_Write(w2);   // 128*64
0x0190	0x002A      	MOVLB      10
0x0191	0x083B      	MOVF       oled_control_led_type, 0
0x0192	0x3A04      	XORLW      4
0x0193	0x3001      	MOVLW      1
0x0194	0x1D03      	BTFSS      STATUS, 2
0x0195	0x3000      	MOVLW      0
0x0196	0x00F1      	MOVWF      R1
0x0197	0x083B      	MOVF       oled_control_led_type, 0
0x0198	0x3A05      	XORLW      5
0x0199	0x3001      	MOVLW      1
0x019A	0x1D03      	BTFSS      STATUS, 2
0x019B	0x3000      	MOVLW      0
0x019C	0x00F0      	MOVWF      R0
0x019D	0x0871      	MOVF       R1, 0
0x019E	0x04F0      	IORWF       R0, 1
0x019F	0x1903      	BTFSC      STATUS, 2
0x01A0	0x29A5      	GOTO       L_oled_wr_str60
0x01A1	0x002C      	MOVLB      12
0x01A2	0x0837      	MOVF       oled_wr_str_w2_L0, 0
0x01A3	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x01A4	0x2022      	CALL       _Soft_I2C_Write
L_oled_wr_str60:
;oled_control.c,281 :: 		for (h = 0; h <= 4; h++) {  // write letter
0x01A5	0x002C      	MOVLB      12
0x01A6	0x0AB4      	INCF       oled_wr_str_h_L0, 1
;oled_control.c,305 :: 		}
0x01A7	0x2916      	GOTO       L_oled_wr_str55
L_oled_wr_str56:
;oled_control.c,306 :: 		Soft_I2C_Write (0);
0x01A8	0x01BD      	CLRF       FARG_Soft_I2C_Write_d
0x01A9	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,307 :: 		Soft_I2C_Write (0);
0x01AA	0x002C      	MOVLB      12
0x01AB	0x01BD      	CLRF       FARG_Soft_I2C_Write_d
0x01AC	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,279 :: 		for (i = 0; i < leng; i++) { // write string
0x01AD	0x002C      	MOVLB      12
0x01AE	0x0AB3      	INCF       oled_wr_str_i_L0, 1
;oled_control.c,308 :: 		}
0x01AF	0x28FC      	GOTO       L_oled_wr_str50
L_oled_wr_str51:
;oled_control.c,309 :: 		set_addressing (page+1, col);
0x01B0	0x0A2F      	INCF       FARG_oled_wr_str_page, 0
0x01B1	0x00B8      	MOVWF      FARG_set_addressing_pagenum
0x01B2	0x082E      	MOVF       FARG_oled_wr_str_col, 0
0x01B3	0x00B9      	MOVWF      FARG_set_addressing_c_start
0x01B4	0x208E      	CALL       _set_addressing
;oled_control.c,311 :: 		for (i = 0; i < leng; i++) { // write string
0x01B5	0x002C      	MOVLB      12
0x01B6	0x01B3      	CLRF       oled_wr_str_i_L0
L_oled_wr_str61:
0x01B7	0x0832      	MOVF       FARG_oled_wr_str_leng, 0
0x01B8	0x0233      	SUBWF      oled_wr_str_i_L0, 0
0x01B9	0x1803      	BTFSC      STATUS, 0
0x01BA	0x2A73      	GOTO       L_oled_wr_str62
;oled_control.c,312 :: 		if (str[i] == 0) g = 0; else g = str[i] - 32; // NULL detection
0x01BB	0x0833      	MOVF       oled_wr_str_i_L0, 0
0x01BC	0x0730      	ADDWF      FARG_oled_wr_str_str, 0
0x01BD	0x0084      	MOVWF      FSR0
0x01BE	0x3000      	MOVLW      0
0x01BF	0x3D31      	ADDWFC     FARG_oled_wr_str_str+1, 0
0x01C0	0x0085      	MOVWF      FSR0H
0x01C1	0x0800      	MOVF       INDF0, 0
0x01C2	0x3A00      	XORLW      0
0x01C3	0x1D03      	BTFSS      STATUS, 2
0x01C4	0x29C7      	GOTO       L_oled_wr_str64
0x01C5	0x01B5      	CLRF       oled_wr_str_g_L0
0x01C6	0x29D0      	GOTO       L_oled_wr_str65
L_oled_wr_str64:
0x01C7	0x0833      	MOVF       oled_wr_str_i_L0, 0
0x01C8	0x0730      	ADDWF      FARG_oled_wr_str_str, 0
0x01C9	0x0084      	MOVWF      FSR0
0x01CA	0x3000      	MOVLW      0
0x01CB	0x3D31      	ADDWFC     FARG_oled_wr_str_str+1, 0
0x01CC	0x0085      	MOVWF      FSR0H
0x01CD	0x3020      	MOVLW      32
0x01CE	0x0200      	SUBWF      INDF0, 0
0x01CF	0x00B5      	MOVWF      oled_wr_str_g_L0
L_oled_wr_str65:
;oled_control.c,313 :: 		for (h = 0; h <= 4; h++) {  // write letter
0x01D0	0x01B4      	CLRF       oled_wr_str_h_L0
L_oled_wr_str66:
0x01D1	0x0834      	MOVF       oled_wr_str_h_L0, 0
0x01D2	0x3C04      	SUBLW      4
0x01D3	0x1C03      	BTFSS      STATUS, 0
0x01D4	0x2A6B      	GOTO       L_oled_wr_str67
;oled_control.c,314 :: 		w1 = font5x8[g*5+h];
0x01D5	0x0835      	MOVF       oled_wr_str_g_L0, 0
0x01D6	0x00F0      	MOVWF      R0
0x01D7	0x3005      	MOVLW      5
0x01D8	0x00F4      	MOVWF      R4
0x01D9	0x205D      	CALL       _Mul_8x8_U
0x01DA	0x002C      	MOVLB      12
0x01DB	0x0834      	MOVF       oled_wr_str_h_L0, 0
0x01DC	0x07F0      	ADDWF      R0, 1
0x01DD	0x3000      	MOVLW      0
0x01DE	0x3DF1      	ADDWFC     R1, 1
0x01DF	0x3043      	MOVLW      oled_control_font5x8
0x01E0	0x0770      	ADDWF      R0, 0
0x01E1	0x0084      	MOVWF      FSR0
0x01E2	0x30BB      	MOVLW      hi_addr(oled_control_font5x8)
0x01E3	0x3D71      	ADDWFC     R1, 0
0x01E4	0x0085      	MOVWF      FSR0H
0x01E5	0x0800      	MOVF       INDF0, 0
0x01E6	0x00B6      	MOVWF      oled_wr_str_w1_L0
;oled_control.c,315 :: 		if(page!=2 & page!=4 & page!=6) {
0x01E7	0x082F      	MOVF       FARG_oled_wr_str_page, 0
0x01E8	0x3A02      	XORLW      2
0x01E9	0x3001      	MOVLW      1
0x01EA	0x1903      	BTFSC      STATUS, 2
0x01EB	0x3000      	MOVLW      0
0x01EC	0x00F1      	MOVWF      R1
0x01ED	0x082F      	MOVF       FARG_oled_wr_str_page, 0
0x01EE	0x3A04      	XORLW      4
0x01EF	0x3001      	MOVLW      1
0x01F0	0x1903      	BTFSC      STATUS, 2
0x01F1	0x3000      	MOVLW      0
0x01F2	0x00F0      	MOVWF      R0
0x01F3	0x0870      	MOVF       R0, 0
0x01F4	0x05F1      	ANDWF      R1, 1
0x01F5	0x082F      	MOVF       FARG_oled_wr_str_page, 0
0x01F6	0x3A06      	XORLW      6
0x01F7	0x3001      	MOVLW      1
0x01F8	0x1903      	BTFSC      STATUS, 2
0x01F9	0x3000      	MOVLW      0
0x01FA	0x00F0      	MOVWF      R0
0x01FB	0x0871      	MOVF       R1, 0
0x01FC	0x05F0      	ANDWF      R0, 1
0x01FD	0x1903      	BTFSC      STATUS, 2
0x01FE	0x2A28      	GOTO       L_oled_wr_str69
;oled_control.c,316 :: 		w2.B7 = w1.B7;
0x01FF	0x1BB6      	BTFSC      oled_wr_str_w1_L0, 7
0x0200	0x2A03      	GOTO       L__oled_wr_str132
0x0201	0x13B7      	BCF        oled_wr_str_w2_L0, 7
0x0202	0x2A04      	GOTO       L__oled_wr_str133
L__oled_wr_str132:
0x0203	0x17B7      	BSF        oled_wr_str_w2_L0, 7
L__oled_wr_str133:
;oled_control.c,317 :: 		w2.B6 = w1.B7;
0x0204	0x1BB6      	BTFSC      oled_wr_str_w1_L0, 7
0x0205	0x2A08      	GOTO       L__oled_wr_str134
0x0206	0x1337      	BCF        oled_wr_str_w2_L0, 6
0x0207	0x2A09      	GOTO       L__oled_wr_str135
L__oled_wr_str134:
0x0208	0x1737      	BSF        oled_wr_str_w2_L0, 6
L__oled_wr_str135:
;oled_control.c,318 :: 		w2.B5 = w1.B6;
0x0209	0x1B36      	BTFSC      oled_wr_str_w1_L0, 6
0x020A	0x2A0D      	GOTO       L__oled_wr_str136
0x020B	0x12B7      	BCF        oled_wr_str_w2_L0, 5
0x020C	0x2A0E      	GOTO       L__oled_wr_str137
L__oled_wr_str136:
0x020D	0x16B7      	BSF        oled_wr_str_w2_L0, 5
L__oled_wr_str137:
;oled_control.c,319 :: 		w2.B4 = w1.B6;
0x020E	0x1B36      	BTFSC      oled_wr_str_w1_L0, 6
0x020F	0x2A12      	GOTO       L__oled_wr_str138
0x0210	0x1237      	BCF        oled_wr_str_w2_L0, 4
0x0211	0x2A13      	GOTO       L__oled_wr_str139
L__oled_wr_str138:
0x0212	0x1637      	BSF        oled_wr_str_w2_L0, 4
L__oled_wr_str139:
;oled_control.c,320 :: 		w2.B3 = w1.B5;
0x0213	0x1AB6      	BTFSC      oled_wr_str_w1_L0, 5
0x0214	0x2A17      	GOTO       L__oled_wr_str140
0x0215	0x11B7      	BCF        oled_wr_str_w2_L0, 3
0x0216	0x2A18      	GOTO       L__oled_wr_str141
L__oled_wr_str140:
0x0217	0x15B7      	BSF        oled_wr_str_w2_L0, 3
L__oled_wr_str141:
;oled_control.c,321 :: 		w2.B2 = w1.B5;
0x0218	0x1AB6      	BTFSC      oled_wr_str_w1_L0, 5
0x0219	0x2A1C      	GOTO       L__oled_wr_str142
0x021A	0x1137      	BCF        oled_wr_str_w2_L0, 2
0x021B	0x2A1D      	GOTO       L__oled_wr_str143
L__oled_wr_str142:
0x021C	0x1537      	BSF        oled_wr_str_w2_L0, 2
L__oled_wr_str143:
;oled_control.c,322 :: 		w2.B1 = w1.B4;
0x021D	0x1A36      	BTFSC      oled_wr_str_w1_L0, 4
0x021E	0x2A21      	GOTO       L__oled_wr_str144
0x021F	0x10B7      	BCF        oled_wr_str_w2_L0, 1
0x0220	0x2A22      	GOTO       L__oled_wr_str145
L__oled_wr_str144:
0x0221	0x14B7      	BSF        oled_wr_str_w2_L0, 1
L__oled_wr_str145:
;oled_control.c,323 :: 		w2.B0 = w1.B4; }
0x0222	0x1A36      	BTFSC      oled_wr_str_w1_L0, 4
0x0223	0x2A26      	GOTO       L__oled_wr_str146
0x0224	0x1037      	BCF        oled_wr_str_w2_L0, 0
0x0225	0x2A27      	GOTO       L__oled_wr_str147
L__oled_wr_str146:
0x0226	0x1437      	BSF        oled_wr_str_w2_L0, 0
L__oled_wr_str147:
0x0227	0x2A50      	GOTO       L_oled_wr_str70
L_oled_wr_str69:
;oled_control.c,325 :: 		w2.B7 = w1.B6;
0x0228	0x1B36      	BTFSC      oled_wr_str_w1_L0, 6
0x0229	0x2A2C      	GOTO       L__oled_wr_str148
0x022A	0x13B7      	BCF        oled_wr_str_w2_L0, 7
0x022B	0x2A2D      	GOTO       L__oled_wr_str149
L__oled_wr_str148:
0x022C	0x17B7      	BSF        oled_wr_str_w2_L0, 7
L__oled_wr_str149:
;oled_control.c,326 :: 		w2.B6 = w1.B6;
0x022D	0x1B36      	BTFSC      oled_wr_str_w1_L0, 6
0x022E	0x2A31      	GOTO       L__oled_wr_str150
0x022F	0x1337      	BCF        oled_wr_str_w2_L0, 6
0x0230	0x2A32      	GOTO       L__oled_wr_str151
L__oled_wr_str150:
0x0231	0x1737      	BSF        oled_wr_str_w2_L0, 6
L__oled_wr_str151:
;oled_control.c,327 :: 		w2.B5 = w1.B5;
0x0232	0x1AB6      	BTFSC      oled_wr_str_w1_L0, 5
0x0233	0x2A36      	GOTO       L__oled_wr_str152
0x0234	0x12B7      	BCF        oled_wr_str_w2_L0, 5
0x0235	0x2A37      	GOTO       L__oled_wr_str153
L__oled_wr_str152:
0x0236	0x16B7      	BSF        oled_wr_str_w2_L0, 5
L__oled_wr_str153:
;oled_control.c,328 :: 		w2.B4 = w1.B5;
0x0237	0x1AB6      	BTFSC      oled_wr_str_w1_L0, 5
0x0238	0x2A3B      	GOTO       L__oled_wr_str154
0x0239	0x1237      	BCF        oled_wr_str_w2_L0, 4
0x023A	0x2A3C      	GOTO       L__oled_wr_str155
L__oled_wr_str154:
0x023B	0x1637      	BSF        oled_wr_str_w2_L0, 4
L__oled_wr_str155:
;oled_control.c,329 :: 		w2.B3 = w1.B4;
0x023C	0x1A36      	BTFSC      oled_wr_str_w1_L0, 4
0x023D	0x2A40      	GOTO       L__oled_wr_str156
0x023E	0x11B7      	BCF        oled_wr_str_w2_L0, 3
0x023F	0x2A41      	GOTO       L__oled_wr_str157
L__oled_wr_str156:
0x0240	0x15B7      	BSF        oled_wr_str_w2_L0, 3
L__oled_wr_str157:
;oled_control.c,330 :: 		w2.B2 = w1.B4;
0x0241	0x1A36      	BTFSC      oled_wr_str_w1_L0, 4
0x0242	0x2A45      	GOTO       L__oled_wr_str158
0x0243	0x1137      	BCF        oled_wr_str_w2_L0, 2
0x0244	0x2A46      	GOTO       L__oled_wr_str159
L__oled_wr_str158:
0x0245	0x1537      	BSF        oled_wr_str_w2_L0, 2
L__oled_wr_str159:
;oled_control.c,331 :: 		w2.B1 = w1.B3;
0x0246	0x19B6      	BTFSC      oled_wr_str_w1_L0, 3
0x0247	0x2A4A      	GOTO       L__oled_wr_str160
0x0248	0x10B7      	BCF        oled_wr_str_w2_L0, 1
0x0249	0x2A4B      	GOTO       L__oled_wr_str161
L__oled_wr_str160:
0x024A	0x14B7      	BSF        oled_wr_str_w2_L0, 1
L__oled_wr_str161:
;oled_control.c,332 :: 		w2.B0 = w1.B3;
0x024B	0x19B6      	BTFSC      oled_wr_str_w1_L0, 3
0x024C	0x2A4F      	GOTO       L__oled_wr_str162
0x024D	0x1037      	BCF        oled_wr_str_w2_L0, 0
0x024E	0x2A50      	GOTO       L__oled_wr_str163
L__oled_wr_str162:
0x024F	0x1437      	BSF        oled_wr_str_w2_L0, 0
L__oled_wr_str163:
;oled_control.c,333 :: 		}
L_oled_wr_str70:
;oled_control.c,334 :: 		Soft_I2C_Write(w2);
0x0250	0x0837      	MOVF       oled_wr_str_w2_L0, 0
0x0251	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x0252	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,335 :: 		if(led_type==4 | led_type==5) Soft_I2C_Write(w2);  // 128*64
0x0253	0x002A      	MOVLB      10
0x0254	0x083B      	MOVF       oled_control_led_type, 0
0x0255	0x3A04      	XORLW      4
0x0256	0x3001      	MOVLW      1
0x0257	0x1D03      	BTFSS      STATUS, 2
0x0258	0x3000      	MOVLW      0
0x0259	0x00F1      	MOVWF      R1
0x025A	0x083B      	MOVF       oled_control_led_type, 0
0x025B	0x3A05      	XORLW      5
0x025C	0x3001      	MOVLW      1
0x025D	0x1D03      	BTFSS      STATUS, 2
0x025E	0x3000      	MOVLW      0
0x025F	0x00F0      	MOVWF      R0
0x0260	0x0871      	MOVF       R1, 0
0x0261	0x04F0      	IORWF       R0, 1
0x0262	0x1903      	BTFSC      STATUS, 2
0x0263	0x2A68      	GOTO       L_oled_wr_str71
0x0264	0x002C      	MOVLB      12
0x0265	0x0837      	MOVF       oled_wr_str_w2_L0, 0
0x0266	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x0267	0x2022      	CALL       _Soft_I2C_Write
L_oled_wr_str71:
;oled_control.c,313 :: 		for (h = 0; h <= 4; h++) {  // write letter
0x0268	0x002C      	MOVLB      12
0x0269	0x0AB4      	INCF       oled_wr_str_h_L0, 1
;oled_control.c,336 :: 		}
0x026A	0x29D1      	GOTO       L_oled_wr_str66
L_oled_wr_str67:
;oled_control.c,337 :: 		Soft_I2C_Write (0);
0x026B	0x01BD      	CLRF       FARG_Soft_I2C_Write_d
0x026C	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,338 :: 		Soft_I2C_Write (0);
0x026D	0x002C      	MOVLB      12
0x026E	0x01BD      	CLRF       FARG_Soft_I2C_Write_d
0x026F	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,311 :: 		for (i = 0; i < leng; i++) { // write string
0x0270	0x002C      	MOVLB      12
0x0271	0x0AB3      	INCF       oled_wr_str_i_L0, 1
;oled_control.c,340 :: 		}
0x0272	0x29B7      	GOTO       L_oled_wr_str61
L_oled_wr_str62:
;oled_control.c,341 :: 		Soft_I2C_Stop ();
0x0273	0x2075      	CALL       _Soft_I2C_Stop
;oled_control.c,342 :: 		}
L_end_oled_wr_str:
0x0274	0x0008      	RETURN
; end of _oled_wr_str
_WordToStr:
;__Lib_Conversions.c,84 :: 		
;__Lib_Conversions.c,89 :: 		
0x0275	0x002C      	MOVLB      12
0x0276	0x01B2      	CLRF       WordToStr_len_L0
L_WordToStr6:
0x0277	0x3005      	MOVLW      5
0x0278	0x0232      	SUBWF      WordToStr_len_L0, 0
0x0279	0x1803      	BTFSC      STATUS, 0
0x027A	0x2A85      	GOTO       L_WordToStr7
;__Lib_Conversions.c,90 :: 		
0x027B	0x0832      	MOVF       WordToStr_len_L0, 0
0x027C	0x0730      	ADDWF      FARG_WordToStr_output, 0
0x027D	0x0086      	MOVWF      FSR1
0x027E	0x3000      	MOVLW      0
0x027F	0x3D31      	ADDWFC     FARG_WordToStr_output+1, 0
0x0280	0x0087      	MOVWF      FSR1H
0x0281	0x3020      	MOVLW      32
0x0282	0x0081      	MOVWF      INDF1
;__Lib_Conversions.c,89 :: 		
0x0283	0x0AB2      	INCF       WordToStr_len_L0, 1
;__Lib_Conversions.c,90 :: 		
0x0284	0x2A77      	GOTO       L_WordToStr6
L_WordToStr7:
;__Lib_Conversions.c,91 :: 		
0x0285	0x0832      	MOVF       WordToStr_len_L0, 0
0x0286	0x0730      	ADDWF      FARG_WordToStr_output, 0
0x0287	0x0086      	MOVWF      FSR1
0x0288	0x3000      	MOVLW      0
0x0289	0x3D31      	ADDWFC     FARG_WordToStr_output+1, 0
0x028A	0x0087      	MOVWF      FSR1H
0x028B	0x0181      	CLRF       INDF1
0x028C	0x03B2      	DECF       WordToStr_len_L0, 1
;__Lib_Conversions.c,93 :: 		
L_WordToStr9:
;__Lib_Conversions.c,94 :: 		
0x028D	0x0832      	MOVF       WordToStr_len_L0, 0
0x028E	0x0730      	ADDWF      FARG_WordToStr_output, 0
0x028F	0x00B3      	MOVWF      FLOC__WordToStr
0x0290	0x3000      	MOVLW      0
0x0291	0x3D31      	ADDWFC     FARG_WordToStr_output+1, 0
0x0292	0x00B4      	MOVWF      FLOC__WordToStr+1
0x0293	0x300A      	MOVLW      10
0x0294	0x00F4      	MOVWF      R4
0x0295	0x01F5      	CLRF       R5
0x0296	0x082E      	MOVF       FARG_WordToStr_input, 0
0x0297	0x00F0      	MOVWF      R0
0x0298	0x082F      	MOVF       FARG_WordToStr_input+1, 0
0x0299	0x00F1      	MOVWF      R1
0x029A	0x20CE      	CALL       _Div_16x16_U
0x029B	0x0878      	MOVF       R8, 0
0x029C	0x00F0      	MOVWF      R0
0x029D	0x0879      	MOVF       R9, 0
0x029E	0x00F1      	MOVWF      R1
0x029F	0x3030      	MOVLW      48
0x02A0	0x07F0      	ADDWF      R0, 1
0x02A1	0x002C      	MOVLB      12
0x02A2	0x0833      	MOVF       FLOC__WordToStr, 0
0x02A3	0x0086      	MOVWF      FSR1
0x02A4	0x0834      	MOVF       FLOC__WordToStr+1, 0
0x02A5	0x0087      	MOVWF      FSR1H
0x02A6	0x0870      	MOVF       R0, 0
0x02A7	0x0081      	MOVWF      INDF1
;__Lib_Conversions.c,95 :: 		
0x02A8	0x300A      	MOVLW      10
0x02A9	0x00F4      	MOVWF      R4
0x02AA	0x01F5      	CLRF       R5
0x02AB	0x082E      	MOVF       FARG_WordToStr_input, 0
0x02AC	0x00F0      	MOVWF      R0
0x02AD	0x082F      	MOVF       FARG_WordToStr_input+1, 0
0x02AE	0x00F1      	MOVWF      R1
0x02AF	0x20CE      	CALL       _Div_16x16_U
0x02B0	0x0870      	MOVF       R0, 0
0x02B1	0x002C      	MOVLB      12
0x02B2	0x00AE      	MOVWF      FARG_WordToStr_input
0x02B3	0x0871      	MOVF       R1, 0
0x02B4	0x00AF      	MOVWF      FARG_WordToStr_input+1
;__Lib_Conversions.c,96 :: 		
0x02B5	0x3000      	MOVLW      0
0x02B6	0x0671      	XORWF      R1, 0
0x02B7	0x1D03      	BTFSS      STATUS, 2
0x02B8	0x2ABB      	GOTO       L__WordToStr109
0x02B9	0x3000      	MOVLW      0
0x02BA	0x0670      	XORWF      R0, 0
L__WordToStr109:
0x02BB	0x1D03      	BTFSS      STATUS, 2
0x02BC	0x2ABE      	GOTO       L_WordToStr11
;__Lib_Conversions.c,97 :: 		
0x02BD	0x2AC0      	GOTO       L_WordToStr10
L_WordToStr11:
;__Lib_Conversions.c,98 :: 		
0x02BE	0x03B2      	DECF       WordToStr_len_L0, 1
;__Lib_Conversions.c,99 :: 		
0x02BF	0x2A8D      	GOTO       L_WordToStr9
L_WordToStr10:
;__Lib_Conversions.c,100 :: 		
L_end_WordToStr:
0x02C0	0x0008      	RETURN
; end of _WordToStr
_led_send:
;oled_control.c,6 :: 		void led_send (char nible) {
;oled_control.c,8 :: 		sdata = 0;
0x02C1	0x002C      	MOVLB      12
0x02C2	0x01AF      	CLRF       led_send_sdata_L0
;oled_control.c,9 :: 		RW = 0; E = 1;
0x02C3	0x0029      	MOVLB      9
0x02C4	0x01EF      	CLRF       oled_control_RW
0x02C5	0x3001      	MOVLW      1
0x02C6	0x00EE      	MOVWF      oled_control_E
;oled_control.c,10 :: 		sdata = sdata + nible;
0x02C7	0x002C      	MOVLB      12
0x02C8	0x082E      	MOVF       FARG_led_send_nible, 0
0x02C9	0x00AF      	MOVWF      led_send_sdata_L0
;oled_control.c,11 :: 		sdata = sdata << 4;
0x02CA	0x35AF      	LSLF       led_send_sdata_L0, 1
0x02CB	0x35AF      	LSLF       led_send_sdata_L0, 1
0x02CC	0x35AF      	LSLF       led_send_sdata_L0, 1
0x02CD	0x35AF      	LSLF       led_send_sdata_L0, 1
;oled_control.c,12 :: 		if(LED) sdata = sdata + 8;
0x02CE	0x002A      	MOVLB      10
0x02CF	0x0832      	MOVF       oled_control_LED, 0
0x02D0	0x1903      	BTFSC      STATUS, 2
0x02D1	0x2AD5      	GOTO       L_led_send0
0x02D2	0x3008      	MOVLW      8
0x02D3	0x002C      	MOVLB      12
0x02D4	0x07AF      	ADDWF      led_send_sdata_L0, 1
L_led_send0:
;oled_control.c,13 :: 		if(E) sdata = sdata + 4;
0x02D5	0x0029      	MOVLB      9
0x02D6	0x086E      	MOVF       oled_control_E, 0
0x02D7	0x1903      	BTFSC      STATUS, 2
0x02D8	0x2ADC      	GOTO       L_led_send1
0x02D9	0x3004      	MOVLW      4
0x02DA	0x002C      	MOVLB      12
0x02DB	0x07AF      	ADDWF      led_send_sdata_L0, 1
L_led_send1:
;oled_control.c,14 :: 		if(RW) sdata = sdata + 2;
0x02DC	0x0029      	MOVLB      9
0x02DD	0x086F      	MOVF       oled_control_RW, 0
0x02DE	0x1903      	BTFSC      STATUS, 2
0x02DF	0x2AE3      	GOTO       L_led_send2
0x02E0	0x3002      	MOVLW      2
0x02E1	0x002C      	MOVLB      12
0x02E2	0x07AF      	ADDWF      led_send_sdata_L0, 1
L_led_send2:
;oled_control.c,15 :: 		if(RS) sdata = sdata + 1;
0x02E3	0x002A      	MOVLB      10
0x02E4	0x0838      	MOVF       oled_control_RS, 0
0x02E5	0x1903      	BTFSC      STATUS, 2
0x02E6	0x2AE9      	GOTO       L_led_send3
0x02E7	0x002C      	MOVLB      12
0x02E8	0x0AAF      	INCF       led_send_sdata_L0, 1
L_led_send3:
;oled_control.c,17 :: 		Soft_I2C_Start();
0x02E9	0x2003      	CALL       _Soft_I2C_Start
;oled_control.c,18 :: 		Soft_I2C_Write(led_addr);         // device addres
0x02EA	0x002A      	MOVLB      10
0x02EB	0x083A      	MOVF       oled_control_led_addr, 0
0x02EC	0x002C      	MOVLB      12
0x02ED	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x02EE	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,19 :: 		Soft_I2C_Write(sdata);              //
0x02EF	0x002C      	MOVLB      12
0x02F0	0x082F      	MOVF       led_send_sdata_L0, 0
0x02F1	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x02F2	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,20 :: 		Soft_I2C_Stop();
0x02F3	0x2075      	CALL       _Soft_I2C_Stop
;oled_control.c,21 :: 		delay_ms(1);
0x02F4	0x3006      	MOVLW      6
0x02F5	0x00FC      	MOVWF      R12
0x02F6	0x3030      	MOVLW      48
0x02F7	0x00FD      	MOVWF      R13
L_led_send4:
0x02F8	0x0BFD      	DECFSZ     R13, 1
0x02F9	0x2AF8      	GOTO       L_led_send4
0x02FA	0x0BFC      	DECFSZ     R12, 1
0x02FB	0x2AF8      	GOTO       L_led_send4
0x02FC	0x0000      	NOP
;oled_control.c,22 :: 		sdata = sdata - 4;  // E = 0
0x02FD	0x3004      	MOVLW      4
0x02FE	0x002C      	MOVLB      12
0x02FF	0x02AF      	SUBWF      led_send_sdata_L0, 1
;oled_control.c,23 :: 		Soft_I2C_Start();
0x0300	0x2003      	CALL       _Soft_I2C_Start
;oled_control.c,24 :: 		Soft_I2C_Write(led_addr);         // device addres
0x0301	0x002A      	MOVLB      10
0x0302	0x083A      	MOVF       oled_control_led_addr, 0
0x0303	0x002C      	MOVLB      12
0x0304	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x0305	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,25 :: 		Soft_I2C_Write(sdata);              //
0x0306	0x002C      	MOVLB      12
0x0307	0x082F      	MOVF       led_send_sdata_L0, 0
0x0308	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x0309	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,26 :: 		Soft_I2C_Stop();
0x030A	0x2075      	CALL       _Soft_I2C_Stop
;oled_control.c,27 :: 		delay_ms(1);
0x030B	0x3006      	MOVLW      6
0x030C	0x00FC      	MOVWF      R12
0x030D	0x3030      	MOVLW      48
0x030E	0x00FD      	MOVWF      R13
L_led_send5:
0x030F	0x0BFD      	DECFSZ     R13, 1
0x0310	0x2B0F      	GOTO       L_led_send5
0x0311	0x0BFC      	DECFSZ     R12, 1
0x0312	0x2B0F      	GOTO       L_led_send5
0x0313	0x0000      	NOP
;oled_control.c,28 :: 		}
L_end_led_send:
0x0314	0x0008      	RETURN
; end of _led_send
_SETFOV32:
;__Lib_MathDouble.c,79 :: 		
;__Lib_MathDouble.c,86 :: 		
0x0315	0x14FB      	BSF        R11, 1
;__Lib_MathDouble.c,87 :: 		
0x0316	0x1FFB      	BTFSS      R11, 7
;__Lib_MathDouble.c,88 :: 		
0x0317	0x2B1F      	GOTO       SETFOV32EEE
;__Lib_MathDouble.c,89 :: 		
0x0318	0x30FF      	MOVLW      255
;__Lib_MathDouble.c,90 :: 		
0x0319	0x00F3      	MOVWF      R3
;__Lib_MathDouble.c,91 :: 		
0x031A	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,92 :: 		
0x031B	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,93 :: 		
0x031C	0x00F0      	MOVWF      R0
;__Lib_MathDouble.c,94 :: 		
0x031D	0x0DFA      	RLF        R10, 1
;__Lib_MathDouble.c,95 :: 		
0x031E	0x0CF2      	RRF        R2, 1
;__Lib_MathDouble.c,96 :: 		
SETFOV32EEE:
;__Lib_MathDouble.c,97 :: 		
0x031F	0x30FF      	MOVLW      255
;__Lib_MathDouble.c,99 :: 		
L_end_SETFOV32:
0x0320	0x0008      	RETURN
; end of _SETFOV32
_RES032:
;__Lib_MathDouble.c,123 :: 		
;__Lib_MathDouble.c,128 :: 		
0x0321	0x01F2      	CLRF       R2
;__Lib_MathDouble.c,129 :: 		
0x0322	0x01F1      	CLRF       R1
;__Lib_MathDouble.c,130 :: 		
0x0323	0x01F0      	CLRF       R0
;__Lib_MathDouble.c,131 :: 		
0x0324	0x01F8      	CLRF       R8
;__Lib_MathDouble.c,132 :: 		
0x0325	0x01F3      	CLRF       R3
;__Lib_MathDouble.c,133 :: 		
0x0326	0x3000      	MOVLW      0
;__Lib_MathDouble.c,135 :: 		
L_end_RES032:
0x0327	0x0008      	RETURN
; end of _RES032
_SETFUN32:
;__Lib_MathDouble.c,138 :: 		
;__Lib_MathDouble.c,145 :: 		
0x0328	0x157B      	BSF        R11, 2
;__Lib_MathDouble.c,146 :: 		
0x0329	0x1FFB      	BTFSS      R11, 7
;__Lib_MathDouble.c,147 :: 		
0x032A	0x2B32      	GOTO       SETFUN32EEE
;__Lib_MathDouble.c,148 :: 		
0x032B	0x3001      	MOVLW      1
;__Lib_MathDouble.c,149 :: 		
0x032C	0x00F3      	MOVWF      R3
;__Lib_MathDouble.c,150 :: 		
0x032D	0x01F2      	CLRF       R2
;__Lib_MathDouble.c,151 :: 		
0x032E	0x01F1      	CLRF       R1
;__Lib_MathDouble.c,152 :: 		
0x032F	0x01F0      	CLRF       R0
;__Lib_MathDouble.c,153 :: 		
0x0330	0x0DFA      	RLF        R10, 1
;__Lib_MathDouble.c,154 :: 		
0x0331	0x0CF2      	RRF        R2, 1
;__Lib_MathDouble.c,155 :: 		
SETFUN32EEE:
;__Lib_MathDouble.c,156 :: 		
0x0332	0x30FF      	MOVLW      255
;__Lib_MathDouble.c,158 :: 		
L_end_SETFUN32:
0x0333	0x0008      	RETURN
; end of _SETFUN32
_FIXSIGN32:
;__Lib_MathDouble.c,112 :: 		
;__Lib_MathDouble.c,116 :: 		
0x0334	0x1FFA      	BTFSS      R10, 7
;__Lib_MathDouble.c,117 :: 		
0x0335	0x13F2      	BCF        R2, 7
;__Lib_MathDouble.c,118 :: 		
0x0336	0x3000      	MOVLW      0
;__Lib_MathDouble.c,120 :: 		
L_end_FIXSIGN32:
0x0337	0x0008      	RETURN
; end of _FIXSIGN32
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x0338	0x301D      	MOVLW      29
0x0339	0x00FD      	MOVWF      R13
L_Delay_22us1:
0x033A	0x0BFD      	DECFSZ     R13, 1
0x033B	0x2B3A      	GOTO       L_Delay_22us1
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x033C	0x0008      	RETURN
; end of _Delay_22us
_Mul_32x32_U:
;__Lib_Math.c,1765 :: 		
;__Lib_Math.c,1780 :: 		
0x033D	0x0020      	MOVLB      0
;__Lib_Math.c,1781 :: 		
0x033E	0x3022      	MOVLW      34
;__Lib_Math.c,1782 :: 		
0x033F	0x00FC      	MOVWF      R12
;__Lib_Math.c,1783 :: 		
0x0340	0x01F8      	CLRF       R8
;__Lib_Math.c,1784 :: 		
0x0341	0x01F9      	CLRF       R9
;__Lib_Math.c,1785 :: 		
0x0342	0x01FA      	CLRF       R10
;__Lib_Math.c,1786 :: 		
0x0343	0x01FB      	CLRF       R11
;__Lib_Math.c,1788 :: 		
_NEXT:
;__Lib_Math.c,1792 :: 		
0x0344	0x03FC      	DECF       R12, 1
;__Lib_Math.c,1793 :: 		
0x0345	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1794 :: 		
0x0346	0x2B72      	GOTO       _EXIT2
;__Lib_Math.c,1795 :: 		
0x0347	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,1797 :: 		
_LOOP:
;__Lib_Math.c,1806 :: 		
0x0348	0x0CFB      	RRF        R11, 1
;__Lib_Math.c,1807 :: 		
0x0349	0x0CFA      	RRF        R10, 1
;__Lib_Math.c,1808 :: 		
0x034A	0x0CF9      	RRF        R9, 1
;__Lib_Math.c,1809 :: 		
0x034B	0x0CF8      	RRF        R8, 1
;__Lib_Math.c,1810 :: 		
0x034C	0x0CF3      	RRF        R3, 1
;__Lib_Math.c,1811 :: 		
0x034D	0x0CF2      	RRF        R2, 1
;__Lib_Math.c,1812 :: 		
0x034E	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,1813 :: 		
0x034F	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,1818 :: 		
0x0350	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,1819 :: 		
0x0351	0x2B44      	GOTO       _NEXT
;__Lib_Math.c,1820 :: 		
0x0352	0x03FC      	DECF       R12, 1
;__Lib_Math.c,1821 :: 		
0x0353	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1822 :: 		
0x0354	0x2B64      	GOTO       _EXIT1
;__Lib_Math.c,1829 :: 		
0x0355	0x0874      	MOVF       R4, 0
;__Lib_Math.c,1830 :: 		
0x0356	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,1831 :: 		
0x0357	0x0875      	MOVF       R5, 0
;__Lib_Math.c,1832 :: 		
0x0358	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1833 :: 		
0x0359	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,1834 :: 		
0x035A	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,1835 :: 		
0x035B	0x0876      	MOVF       R6, 0
;__Lib_Math.c,1836 :: 		
0x035C	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1837 :: 		
0x035D	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,1838 :: 		
0x035E	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,1839 :: 		
0x035F	0x0877      	MOVF       R7, 0
;__Lib_Math.c,1840 :: 		
0x0360	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1841 :: 		
0x0361	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,1842 :: 		
0x0362	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,1844 :: 		
0x0363	0x2B48      	GOTO       _LOOP
;__Lib_Math.c,1846 :: 		
_EXIT1:
;__Lib_Math.c,1851 :: 		
0x0364	0x0874      	MOVF       R4, 0
;__Lib_Math.c,1852 :: 		
0x0365	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,1853 :: 		
0x0366	0x0875      	MOVF       R5, 0
;__Lib_Math.c,1854 :: 		
0x0367	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1855 :: 		
0x0368	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,1856 :: 		
0x0369	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,1857 :: 		
0x036A	0x0876      	MOVF       R6, 0
;__Lib_Math.c,1858 :: 		
0x036B	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1859 :: 		
0x036C	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,1860 :: 		
0x036D	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,1861 :: 		
0x036E	0x0877      	MOVF       R7, 0
;__Lib_Math.c,1862 :: 		
0x036F	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1863 :: 		
0x0370	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,1864 :: 		
0x0371	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,1867 :: 		
_EXIT2:
;__Lib_Math.c,1869 :: 		
L_end_Mul_32x32_U:
0x0372	0x0008      	RETURN
; end of _Mul_32x32_U
_SDIV3232L:
;__Lib_Math.c,690 :: 		
;__Lib_Math.c,699 :: 		
0x0373	0x0874      	MOVF       R4, 0
;__Lib_Math.c,700 :: 		
0x0374	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,701 :: 		
0x0375	0x0875      	MOVF       R5, 0
;__Lib_Math.c,702 :: 		
0x0376	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,703 :: 		
0x0377	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,704 :: 		
0x0378	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,705 :: 		
0x0379	0x0876      	MOVF       R6, 0
;__Lib_Math.c,706 :: 		
0x037A	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,707 :: 		
0x037B	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,708 :: 		
0x037C	0x02FA      	SUBWF      R10, 1
;__Lib_Math.c,709 :: 		
0x037D	0x0877      	MOVF       R7, 0
;__Lib_Math.c,710 :: 		
0x037E	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,711 :: 		
0x037F	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,712 :: 		
0x0380	0x02FB      	SUBWF      R11, 1
;__Lib_Math.c,713 :: 		
0x0381	0x0DF3      	RLF        R3, 1
;__Lib_Math.c,715 :: 		
0x0382	0x3007      	MOVLW      7
;__Lib_Math.c,716 :: 		
0x0383	0x00FC      	MOVWF      R12
;__Lib_Math.c,718 :: 		
LOOPS3232A:
;__Lib_Math.c,719 :: 		
0x0384	0x0D73      	RLF        R3, 0
;__Lib_Math.c,720 :: 		
0x0385	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,721 :: 		
0x0386	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,722 :: 		
0x0387	0x0DFA      	RLF        R10, 1
;__Lib_Math.c,723 :: 		
0x0388	0x0DFB      	RLF        R11, 1
;__Lib_Math.c,724 :: 		
0x0389	0x0874      	MOVF       R4, 0
;__Lib_Math.c,725 :: 		
0x038A	0x1C73      	BTFSS      R3, 0
;__Lib_Math.c,726 :: 		
0x038B	0x2B9A      	GOTO       SADD22LA
;__Lib_Math.c,728 :: 		
0x038C	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,729 :: 		
0x038D	0x0875      	MOVF       R5, 0
;__Lib_Math.c,730 :: 		
0x038E	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,731 :: 		
0x038F	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,732 :: 		
0x0390	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,733 :: 		
0x0391	0x0876      	MOVF       R6, 0
;__Lib_Math.c,734 :: 		
0x0392	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,735 :: 		
0x0393	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,736 :: 		
0x0394	0x02FA      	SUBWF      R10, 1
;__Lib_Math.c,737 :: 		
0x0395	0x0877      	MOVF       R7, 0
;__Lib_Math.c,738 :: 		
0x0396	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,739 :: 		
0x0397	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,740 :: 		
0x0398	0x02FB      	SUBWF      R11, 1
;__Lib_Math.c,741 :: 		
0x0399	0x2BA7      	GOTO       SOK22LA
;__Lib_Math.c,743 :: 		
SADD22LA:
;__Lib_Math.c,744 :: 		
0x039A	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,745 :: 		
0x039B	0x0875      	MOVF       R5, 0
;__Lib_Math.c,746 :: 		
0x039C	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,747 :: 		
0x039D	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,748 :: 		
0x039E	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,749 :: 		
0x039F	0x0876      	MOVF       R6, 0
;__Lib_Math.c,750 :: 		
0x03A0	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,751 :: 		
0x03A1	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,752 :: 		
0x03A2	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,753 :: 		
0x03A3	0x0877      	MOVF       R7, 0
;__Lib_Math.c,754 :: 		
0x03A4	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,755 :: 		
0x03A5	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,756 :: 		
0x03A6	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,758 :: 		
SOK22LA:
;__Lib_Math.c,759 :: 		
0x03A7	0x0DF3      	RLF        R3, 1
;__Lib_Math.c,761 :: 		
0x03A8	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,762 :: 		
0x03A9	0x2B84      	GOTO       LOOPS3232A
;__Lib_Math.c,764 :: 		
0x03AA	0x0D72      	RLF        R2, 0
;__Lib_Math.c,765 :: 		
0x03AB	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,766 :: 		
0x03AC	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,767 :: 		
0x03AD	0x0DFA      	RLF        R10, 1
;__Lib_Math.c,768 :: 		
0x03AE	0x0DFB      	RLF        R11, 1
;__Lib_Math.c,769 :: 		
0x03AF	0x0874      	MOVF       R4, 0
;__Lib_Math.c,770 :: 		
0x03B0	0x1C73      	BTFSS      R3, 0
;__Lib_Math.c,771 :: 		
0x03B1	0x2BC0      	GOTO       SADD22L8
;__Lib_Math.c,773 :: 		
0x03B2	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,774 :: 		
0x03B3	0x0875      	MOVF       R5, 0
;__Lib_Math.c,775 :: 		
0x03B4	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,776 :: 		
0x03B5	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,777 :: 		
0x03B6	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,778 :: 		
0x03B7	0x0876      	MOVF       R6, 0
;__Lib_Math.c,779 :: 		
0x03B8	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,780 :: 		
0x03B9	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,781 :: 		
0x03BA	0x02FA      	SUBWF      R10, 1
;__Lib_Math.c,782 :: 		
0x03BB	0x0877      	MOVF       R7, 0
;__Lib_Math.c,783 :: 		
0x03BC	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,784 :: 		
0x03BD	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,785 :: 		
0x03BE	0x02FB      	SUBWF      R11, 1
;__Lib_Math.c,786 :: 		
0x03BF	0x2BCD      	GOTO       SOK22L8
;__Lib_Math.c,788 :: 		
SADD22L8:
;__Lib_Math.c,789 :: 		
0x03C0	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,790 :: 		
0x03C1	0x0875      	MOVF       R5, 0
;__Lib_Math.c,791 :: 		
0x03C2	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,792 :: 		
0x03C3	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,793 :: 		
0x03C4	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,794 :: 		
0x03C5	0x0876      	MOVF       R6, 0
;__Lib_Math.c,795 :: 		
0x03C6	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,796 :: 		
0x03C7	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,797 :: 		
0x03C8	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,798 :: 		
0x03C9	0x0877      	MOVF       R7, 0
;__Lib_Math.c,799 :: 		
0x03CA	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,800 :: 		
0x03CB	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,801 :: 		
0x03CC	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,803 :: 		
SOK22L8:
;__Lib_Math.c,804 :: 		
0x03CD	0x0DF2      	RLF        R2, 1
;__Lib_Math.c,806 :: 		
0x03CE	0x3007      	MOVLW      7
;__Lib_Math.c,807 :: 		
0x03CF	0x00FC      	MOVWF      R12
;__Lib_Math.c,809 :: 		
LOOPS3232B:
;__Lib_Math.c,810 :: 		
0x03D0	0x0D72      	RLF        R2, 0
;__Lib_Math.c,811 :: 		
0x03D1	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,812 :: 		
0x03D2	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,813 :: 		
0x03D3	0x0DFA      	RLF        R10, 1
;__Lib_Math.c,814 :: 		
0x03D4	0x0DFB      	RLF        R11, 1
;__Lib_Math.c,815 :: 		
0x03D5	0x0874      	MOVF       R4, 0
;__Lib_Math.c,816 :: 		
0x03D6	0x1C72      	BTFSS      R2, 0
;__Lib_Math.c,817 :: 		
0x03D7	0x2BE6      	GOTO       SADD22LB
;__Lib_Math.c,819 :: 		
0x03D8	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,820 :: 		
0x03D9	0x0875      	MOVF       R5, 0
;__Lib_Math.c,821 :: 		
0x03DA	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,822 :: 		
0x03DB	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,823 :: 		
0x03DC	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,824 :: 		
0x03DD	0x0876      	MOVF       R6, 0
;__Lib_Math.c,825 :: 		
0x03DE	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,826 :: 		
0x03DF	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,827 :: 		
0x03E0	0x02FA      	SUBWF      R10, 1
;__Lib_Math.c,828 :: 		
0x03E1	0x0877      	MOVF       R7, 0
;__Lib_Math.c,829 :: 		
0x03E2	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,830 :: 		
0x03E3	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,831 :: 		
0x03E4	0x02FB      	SUBWF      R11, 1
;__Lib_Math.c,832 :: 		
0x03E5	0x2BF3      	GOTO       SOK22LB
;__Lib_Math.c,834 :: 		
SADD22LB:
;__Lib_Math.c,835 :: 		
0x03E6	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,836 :: 		
0x03E7	0x0875      	MOVF       R5, 0
;__Lib_Math.c,837 :: 		
0x03E8	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,838 :: 		
0x03E9	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,839 :: 		
0x03EA	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,840 :: 		
0x03EB	0x0876      	MOVF       R6, 0
;__Lib_Math.c,841 :: 		
0x03EC	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,842 :: 		
0x03ED	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,843 :: 		
0x03EE	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,844 :: 		
0x03EF	0x0877      	MOVF       R7, 0
;__Lib_Math.c,845 :: 		
0x03F0	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,846 :: 		
0x03F1	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,847 :: 		
0x03F2	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,849 :: 		
SOK22LB:
;__Lib_Math.c,850 :: 		
0x03F3	0x0DF2      	RLF        R2, 1
;__Lib_Math.c,852 :: 		
0x03F4	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,853 :: 		
0x03F5	0x2BD0      	GOTO       LOOPS3232B
;__Lib_Math.c,855 :: 		
0x03F6	0x0D71      	RLF        R1, 0
;__Lib_Math.c,856 :: 		
0x03F7	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,857 :: 		
0x03F8	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,858 :: 		
0x03F9	0x0DFA      	RLF        R10, 1
;__Lib_Math.c,859 :: 		
0x03FA	0x0DFB      	RLF        R11, 1
;__Lib_Math.c,860 :: 		
0x03FB	0x0874      	MOVF       R4, 0
;__Lib_Math.c,861 :: 		
0x03FC	0x1C72      	BTFSS      R2, 0
;__Lib_Math.c,862 :: 		
0x03FD	0x2C0C      	GOTO       SADD22L16
;__Lib_Math.c,864 :: 		
0x03FE	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,865 :: 		
0x03FF	0x0875      	MOVF       R5, 0
;__Lib_Math.c,866 :: 		
0x0400	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,867 :: 		
0x0401	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,868 :: 		
0x0402	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,869 :: 		
0x0403	0x0876      	MOVF       R6, 0
;__Lib_Math.c,870 :: 		
0x0404	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,871 :: 		
0x0405	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,872 :: 		
0x0406	0x02FA      	SUBWF      R10, 1
;__Lib_Math.c,873 :: 		
0x0407	0x0877      	MOVF       R7, 0
;__Lib_Math.c,874 :: 		
0x0408	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,875 :: 		
0x0409	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,876 :: 		
0x040A	0x02FB      	SUBWF      R11, 1
;__Lib_Math.c,877 :: 		
0x040B	0x2C19      	GOTO       SOK22L16
;__Lib_Math.c,879 :: 		
SADD22L16:
;__Lib_Math.c,880 :: 		
0x040C	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,881 :: 		
0x040D	0x0875      	MOVF       R5, 0
;__Lib_Math.c,882 :: 		
0x040E	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,883 :: 		
0x040F	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,884 :: 		
0x0410	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,885 :: 		
0x0411	0x0876      	MOVF       R6, 0
;__Lib_Math.c,886 :: 		
0x0412	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,887 :: 		
0x0413	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,888 :: 		
0x0414	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,889 :: 		
0x0415	0x0877      	MOVF       R7, 0
;__Lib_Math.c,890 :: 		
0x0416	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,891 :: 		
0x0417	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,892 :: 		
0x0418	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,894 :: 		
SOK22L16:
;__Lib_Math.c,895 :: 		
0x0419	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,897 :: 		
0x041A	0x3007      	MOVLW      7
;__Lib_Math.c,898 :: 		
0x041B	0x00FC      	MOVWF      R12
;__Lib_Math.c,900 :: 		
LOOPS3232C:
;__Lib_Math.c,901 :: 		
0x041C	0x0D71      	RLF        R1, 0
;__Lib_Math.c,902 :: 		
0x041D	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,903 :: 		
0x041E	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,904 :: 		
0x041F	0x0DFA      	RLF        R10, 1
;__Lib_Math.c,905 :: 		
0x0420	0x0DFB      	RLF        R11, 1
;__Lib_Math.c,906 :: 		
0x0421	0x0874      	MOVF       R4, 0
;__Lib_Math.c,907 :: 		
0x0422	0x1C71      	BTFSS      R1, 0
;__Lib_Math.c,908 :: 		
0x0423	0x2C32      	GOTO       SADD22LC
;__Lib_Math.c,910 :: 		
0x0424	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,911 :: 		
0x0425	0x0875      	MOVF       R5, 0
;__Lib_Math.c,912 :: 		
0x0426	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,913 :: 		
0x0427	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,914 :: 		
0x0428	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,915 :: 		
0x0429	0x0876      	MOVF       R6, 0
;__Lib_Math.c,916 :: 		
0x042A	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,917 :: 		
0x042B	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,918 :: 		
0x042C	0x02FA      	SUBWF      R10, 1
;__Lib_Math.c,919 :: 		
0x042D	0x0877      	MOVF       R7, 0
;__Lib_Math.c,920 :: 		
0x042E	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,921 :: 		
0x042F	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,922 :: 		
0x0430	0x02FB      	SUBWF      R11, 1
;__Lib_Math.c,923 :: 		
0x0431	0x2C3F      	GOTO       SOK22LC
;__Lib_Math.c,925 :: 		
SADD22LC:
;__Lib_Math.c,926 :: 		
0x0432	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,927 :: 		
0x0433	0x0875      	MOVF       R5, 0
;__Lib_Math.c,928 :: 		
0x0434	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,929 :: 		
0x0435	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,930 :: 		
0x0436	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,931 :: 		
0x0437	0x0876      	MOVF       R6, 0
;__Lib_Math.c,932 :: 		
0x0438	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,933 :: 		
0x0439	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,934 :: 		
0x043A	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,935 :: 		
0x043B	0x0877      	MOVF       R7, 0
;__Lib_Math.c,936 :: 		
0x043C	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,937 :: 		
0x043D	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,938 :: 		
0x043E	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,940 :: 		
SOK22LC:
;__Lib_Math.c,941 :: 		
0x043F	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,943 :: 		
0x0440	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,944 :: 		
0x0441	0x2C1C      	GOTO       LOOPS3232C
;__Lib_Math.c,946 :: 		
0x0442	0x0D70      	RLF        R0, 0
;__Lib_Math.c,947 :: 		
0x0443	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,948 :: 		
0x0444	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,949 :: 		
0x0445	0x0DFA      	RLF        R10, 1
;__Lib_Math.c,950 :: 		
0x0446	0x0DFB      	RLF        R11, 1
;__Lib_Math.c,951 :: 		
0x0447	0x0874      	MOVF       R4, 0
;__Lib_Math.c,952 :: 		
0x0448	0x1C71      	BTFSS      R1, 0
;__Lib_Math.c,953 :: 		
0x0449	0x2C58      	GOTO       SADD22L24
;__Lib_Math.c,955 :: 		
0x044A	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,956 :: 		
0x044B	0x0875      	MOVF       R5, 0
;__Lib_Math.c,957 :: 		
0x044C	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,958 :: 		
0x044D	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,959 :: 		
0x044E	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,960 :: 		
0x044F	0x0876      	MOVF       R6, 0
;__Lib_Math.c,961 :: 		
0x0450	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,962 :: 		
0x0451	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,963 :: 		
0x0452	0x02FA      	SUBWF      R10, 1
;__Lib_Math.c,964 :: 		
0x0453	0x0877      	MOVF       R7, 0
;__Lib_Math.c,965 :: 		
0x0454	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,966 :: 		
0x0455	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,967 :: 		
0x0456	0x02FB      	SUBWF      R11, 1
;__Lib_Math.c,968 :: 		
0x0457	0x2C65      	GOTO       SOK22L24
;__Lib_Math.c,970 :: 		
SADD22L24:
;__Lib_Math.c,971 :: 		
0x0458	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,972 :: 		
0x0459	0x0875      	MOVF       R5, 0
;__Lib_Math.c,973 :: 		
0x045A	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,974 :: 		
0x045B	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,975 :: 		
0x045C	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,976 :: 		
0x045D	0x0876      	MOVF       R6, 0
;__Lib_Math.c,977 :: 		
0x045E	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,978 :: 		
0x045F	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,979 :: 		
0x0460	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,980 :: 		
0x0461	0x0877      	MOVF       R7, 0
;__Lib_Math.c,981 :: 		
0x0462	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,982 :: 		
0x0463	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,983 :: 		
0x0464	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,985 :: 		
SOK22L24:
;__Lib_Math.c,986 :: 		
0x0465	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,988 :: 		
0x0466	0x3007      	MOVLW      7
;__Lib_Math.c,989 :: 		
0x0467	0x00FC      	MOVWF      R12
;__Lib_Math.c,991 :: 		
LOOPS3232D:
;__Lib_Math.c,992 :: 		
0x0468	0x0D70      	RLF        R0, 0
;__Lib_Math.c,993 :: 		
0x0469	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,994 :: 		
0x046A	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,995 :: 		
0x046B	0x0DFA      	RLF        R10, 1
;__Lib_Math.c,996 :: 		
0x046C	0x0DFB      	RLF        R11, 1
;__Lib_Math.c,997 :: 		
0x046D	0x0874      	MOVF       R4, 0
;__Lib_Math.c,998 :: 		
0x046E	0x1C70      	BTFSS      R0, 0
;__Lib_Math.c,999 :: 		
0x046F	0x2C7E      	GOTO       SADD22LD
;__Lib_Math.c,1001 :: 		
0x0470	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,1002 :: 		
0x0471	0x0875      	MOVF       R5, 0
;__Lib_Math.c,1003 :: 		
0x0472	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,1004 :: 		
0x0473	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,1005 :: 		
0x0474	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,1006 :: 		
0x0475	0x0876      	MOVF       R6, 0
;__Lib_Math.c,1007 :: 		
0x0476	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,1008 :: 		
0x0477	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,1009 :: 		
0x0478	0x02FA      	SUBWF      R10, 1
;__Lib_Math.c,1010 :: 		
0x0479	0x0877      	MOVF       R7, 0
;__Lib_Math.c,1011 :: 		
0x047A	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,1012 :: 		
0x047B	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,1013 :: 		
0x047C	0x02FB      	SUBWF      R11, 1
;__Lib_Math.c,1014 :: 		
0x047D	0x2C8B      	GOTO       SOK22LD
;__Lib_Math.c,1016 :: 		
SADD22LD:
;__Lib_Math.c,1017 :: 		
0x047E	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,1018 :: 		
0x047F	0x0875      	MOVF       R5, 0
;__Lib_Math.c,1019 :: 		
0x0480	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1020 :: 		
0x0481	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,1021 :: 		
0x0482	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,1022 :: 		
0x0483	0x0876      	MOVF       R6, 0
;__Lib_Math.c,1023 :: 		
0x0484	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1024 :: 		
0x0485	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,1025 :: 		
0x0486	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,1026 :: 		
0x0487	0x0877      	MOVF       R7, 0
;__Lib_Math.c,1027 :: 		
0x0488	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1029 :: 		
0x0489	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,1030 :: 		
0x048A	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,1032 :: 		
SOK22LD:
;__Lib_Math.c,1033 :: 		
0x048B	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,1035 :: 		
0x048C	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,1036 :: 		
0x048D	0x2C68      	GOTO       LOOPS3232D
;__Lib_Math.c,1038 :: 		
0x048E	0x1870      	BTFSC      R0, 0
;__Lib_Math.c,1039 :: 		
0x048F	0x2C9E      	GOTO       SOK22L
;__Lib_Math.c,1040 :: 		
0x0490	0x0874      	MOVF       R4, 0
;__Lib_Math.c,1041 :: 		
0x0491	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,1042 :: 		
0x0492	0x0875      	MOVF       R5, 0
;__Lib_Math.c,1043 :: 		
0x0493	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1044 :: 		
0x0494	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,1045 :: 		
0x0495	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,1046 :: 		
0x0496	0x0876      	MOVF       R6, 0
;__Lib_Math.c,1047 :: 		
0x0497	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1048 :: 		
0x0498	0x0F76      	INCFSZ     R6, 0
;__Lib_Math.c,1049 :: 		
0x0499	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,1050 :: 		
0x049A	0x0877      	MOVF       R7, 0
;__Lib_Math.c,1051 :: 		
0x049B	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,1052 :: 		
0x049C	0x0F77      	INCFSZ     R7, 0
;__Lib_Math.c,1053 :: 		
0x049D	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,1054 :: 		
SOK22L:
;__Lib_Math.c,1057 :: 		
L_end_SDIV3232L:
0x049E	0x0008      	RETURN
; end of _SDIV3232L
_COMFREM:
;__Lib_Math.c,1059 :: 		
;__Lib_Math.c,1063 :: 		
0x049F	0x09FB      	COMF       R11, 1
;__Lib_Math.c,1064 :: 		
0x04A0	0x09FA      	COMF       R10, 1
;__Lib_Math.c,1065 :: 		
0x04A1	0x09F9      	COMF       R9, 1
;__Lib_Math.c,1066 :: 		
0x04A2	0x09F8      	COMF       R8, 1
;__Lib_Math.c,1067 :: 		
0x04A3	0x0AF8      	INCF       R8, 1
;__Lib_Math.c,1068 :: 		
0x04A4	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1069 :: 		
0x04A5	0x0AF9      	INCF       R9, 1
;__Lib_Math.c,1070 :: 		
0x04A6	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1071 :: 		
0x04A7	0x0AFA      	INCF       R10, 1
;__Lib_Math.c,1072 :: 		
0x04A8	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1073 :: 		
0x04A9	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,1075 :: 		
L_end_COMFREM:
0x04AA	0x0008      	RETURN
; end of _COMFREM
_Delay_500us:
;__Lib_Delays.c,27 :: 		void Delay_500us() {
;__Lib_Delays.c,28 :: 		Delay_us(498);
0x04AB	0x3003      	MOVLW      3
0x04AC	0x00FC      	MOVWF      R12
0x04AD	0x3095      	MOVLW      149
0x04AE	0x00FD      	MOVWF      R13
L_Delay_500us4:
0x04AF	0x0BFD      	DECFSZ     R13, 1
0x04B0	0x2CAF      	GOTO       L_Delay_500us4
0x04B1	0x0BFC      	DECFSZ     R12, 1
0x04B2	0x2CAF      	GOTO       L_Delay_500us4
;__Lib_Delays.c,29 :: 		}
L_end_Delay_500us:
0x04B3	0x0008      	RETURN
; end of _Delay_500us
_led_wr_str:
;oled_control.c,250 :: 		void led_wr_str (char col, char pos, char str[], char leng ) {  //
;oled_control.c,252 :: 		if(led_type==4 | led_type==5) oled_wr_str(pos, col, str, leng); // 128*64  OLED display
0x04B4	0x002A      	MOVLB      10
0x04B5	0x083B      	MOVF       oled_control_led_type, 0
0x04B6	0x3A04      	XORLW      4
0x04B7	0x3001      	MOVLW      1
0x04B8	0x1D03      	BTFSS      STATUS, 2
0x04B9	0x3000      	MOVLW      0
0x04BA	0x00F1      	MOVWF      R1
0x04BB	0x083B      	MOVF       oled_control_led_type, 0
0x04BC	0x3A05      	XORLW      5
0x04BD	0x3001      	MOVLW      1
0x04BE	0x1D03      	BTFSS      STATUS, 2
0x04BF	0x3000      	MOVLW      0
0x04C0	0x00F0      	MOVWF      R0
0x04C1	0x0871      	MOVF       R1, 0
0x04C2	0x04F0      	IORWF       R0, 1
0x04C3	0x1903      	BTFSC      STATUS, 2
0x04C4	0x2CD2      	GOTO       L_led_wr_str43
0x04C5	0x002C      	MOVLB      12
0x04C6	0x0825      	MOVF       FARG_led_wr_str_pos, 0
0x04C7	0x00AE      	MOVWF      FARG_oled_wr_str_col
0x04C8	0x0824      	MOVF       FARG_led_wr_str_col, 0
0x04C9	0x00AF      	MOVWF      FARG_oled_wr_str_page
0x04CA	0x0826      	MOVF       FARG_led_wr_str_str, 0
0x04CB	0x00B0      	MOVWF      FARG_oled_wr_str_str
0x04CC	0x0827      	MOVF       FARG_led_wr_str_str+1, 0
0x04CD	0x00B1      	MOVWF      FARG_oled_wr_str_str+1
0x04CE	0x0828      	MOVF       FARG_led_wr_str_leng, 0
0x04CF	0x00B2      	MOVWF      FARG_oled_wr_str_leng
0x04D0	0x20EA      	CALL       _oled_wr_str
0x04D1	0x2D2C      	GOTO       L_led_wr_str44
L_led_wr_str43:
;oled_control.c,253 :: 		else if(led_type==2 | led_type==3) oled_wr_str(7*pos+4, col*2, str, leng); // 128*32   OLED display
0x04D2	0x002A      	MOVLB      10
0x04D3	0x083B      	MOVF       oled_control_led_type, 0
0x04D4	0x3A02      	XORLW      2
0x04D5	0x3001      	MOVLW      1
0x04D6	0x1D03      	BTFSS      STATUS, 2
0x04D7	0x3000      	MOVLW      0
0x04D8	0x00F1      	MOVWF      R1
0x04D9	0x083B      	MOVF       oled_control_led_type, 0
0x04DA	0x3A03      	XORLW      3
0x04DB	0x3001      	MOVLW      1
0x04DC	0x1D03      	BTFSS      STATUS, 2
0x04DD	0x3000      	MOVLW      0
0x04DE	0x00F0      	MOVWF      R0
0x04DF	0x0871      	MOVF       R1, 0
0x04E0	0x04F0      	IORWF       R0, 1
0x04E1	0x1903      	BTFSC      STATUS, 2
0x04E2	0x2CF8      	GOTO       L_led_wr_str45
0x04E3	0x3007      	MOVLW      7
0x04E4	0x00F0      	MOVWF      R0
0x04E5	0x002C      	MOVLB      12
0x04E6	0x0825      	MOVF       FARG_led_wr_str_pos, 0
0x04E7	0x00F4      	MOVWF      R4
0x04E8	0x205D      	CALL       _Mul_8x8_U
0x04E9	0x3004      	MOVLW      4
0x04EA	0x0770      	ADDWF      R0, 0
0x04EB	0x002C      	MOVLB      12
0x04EC	0x00AE      	MOVWF      FARG_oled_wr_str_col
0x04ED	0x0824      	MOVF       FARG_led_wr_str_col, 0
0x04EE	0x00AF      	MOVWF      FARG_oled_wr_str_page
0x04EF	0x35AF      	LSLF       FARG_oled_wr_str_page, 1
0x04F0	0x0826      	MOVF       FARG_led_wr_str_str, 0
0x04F1	0x00B0      	MOVWF      FARG_oled_wr_str_str
0x04F2	0x0827      	MOVF       FARG_led_wr_str_str+1, 0
0x04F3	0x00B1      	MOVWF      FARG_oled_wr_str_str+1
0x04F4	0x0828      	MOVF       FARG_led_wr_str_leng, 0
0x04F5	0x00B2      	MOVWF      FARG_oled_wr_str_leng
0x04F6	0x20EA      	CALL       _oled_wr_str
0x04F7	0x2D2C      	GOTO       L_led_wr_str46
L_led_wr_str45:
;oled_control.c,256 :: 		RS = 0;
0x04F8	0x002A      	MOVLB      10
0x04F9	0x01B8      	CLRF       oled_control_RS
;oled_control.c,257 :: 		led_send(8 + col*4);
0x04FA	0x002C      	MOVLB      12
0x04FB	0x0824      	MOVF       FARG_led_wr_str_col, 0
0x04FC	0x00F0      	MOVWF      R0
0x04FD	0x35F0      	LSLF       R0, 1
0x04FE	0x35F0      	LSLF       R0, 1
0x04FF	0x0870      	MOVF       R0, 0
0x0500	0x3E08      	ADDLW      8
0x0501	0x00AE      	MOVWF      FARG_led_send_nible
0x0502	0x22C1      	CALL       _led_send
;oled_control.c,258 :: 		led_send(pos);
0x0503	0x002C      	MOVLB      12
0x0504	0x0825      	MOVF       FARG_led_wr_str_pos, 0
0x0505	0x00AE      	MOVWF      FARG_led_send_nible
0x0506	0x22C1      	CALL       _led_send
;oled_control.c,260 :: 		RS = 1;
0x0507	0x3001      	MOVLW      1
0x0508	0x002A      	MOVLB      10
0x0509	0x00B8      	MOVWF      oled_control_RS
;oled_control.c,261 :: 		for (i = 0; i < leng; i++) { // write string
0x050A	0x002C      	MOVLB      12
0x050B	0x01A9      	CLRF       led_wr_str_i_L0
L_led_wr_str47:
0x050C	0x0828      	MOVF       FARG_led_wr_str_leng, 0
0x050D	0x0229      	SUBWF      led_wr_str_i_L0, 0
0x050E	0x1803      	BTFSC      STATUS, 0
0x050F	0x2D2C      	GOTO       L_led_wr_str48
;oled_control.c,263 :: 		led_send(str[i] >> 4);
0x0510	0x0829      	MOVF       led_wr_str_i_L0, 0
0x0511	0x0726      	ADDWF      FARG_led_wr_str_str, 0
0x0512	0x0084      	MOVWF      FSR0
0x0513	0x3000      	MOVLW      0
0x0514	0x3D27      	ADDWFC     FARG_led_wr_str_str+1, 0
0x0515	0x0085      	MOVWF      FSR0H
0x0516	0x0800      	MOVF       INDF0, 0
0x0517	0x00F1      	MOVWF      R1
0x0518	0x0871      	MOVF       R1, 0
0x0519	0x00AE      	MOVWF      FARG_led_send_nible
0x051A	0x36AE      	LSRF       FARG_led_send_nible, 1
0x051B	0x36AE      	LSRF       FARG_led_send_nible, 1
0x051C	0x36AE      	LSRF       FARG_led_send_nible, 1
0x051D	0x36AE      	LSRF       FARG_led_send_nible, 1
0x051E	0x22C1      	CALL       _led_send
;oled_control.c,264 :: 		led_send(str[i]);
0x051F	0x002C      	MOVLB      12
0x0520	0x0829      	MOVF       led_wr_str_i_L0, 0
0x0521	0x0726      	ADDWF      FARG_led_wr_str_str, 0
0x0522	0x0084      	MOVWF      FSR0
0x0523	0x3000      	MOVLW      0
0x0524	0x3D27      	ADDWFC     FARG_led_wr_str_str+1, 0
0x0525	0x0085      	MOVWF      FSR0H
0x0526	0x0800      	MOVF       INDF0, 0
0x0527	0x00AE      	MOVWF      FARG_led_send_nible
0x0528	0x22C1      	CALL       _led_send
;oled_control.c,261 :: 		for (i = 0; i < leng; i++) { // write string
0x0529	0x002C      	MOVLB      12
0x052A	0x0AA9      	INCF       led_wr_str_i_L0, 1
;oled_control.c,265 :: 		}
0x052B	0x2D0C      	GOTO       L_led_wr_str47
L_led_wr_str48:
;oled_control.c,267 :: 		}
L_led_wr_str46:
L_led_wr_str44:
;oled_control.c,268 :: 		}
L_end_led_wr_str:
0x052C	0x0008      	RETURN
; end of _led_wr_str
_NRM4032:
;__Lib_MathDouble.c,245 :: 		
;__Lib_MathDouble.c,252 :: 		
;__Lib_MathDouble.c,254 :: 		
0x052D	0x187C      	BTFSC      R12, 0
;__Lib_MathDouble.c,255 :: 		
0x052E	0x2D63      	GOTO       NRMRND4032
;__Lib_MathDouble.c,256 :: 		
0x052F	0x18FC      	BTFSC      R12, 1
;__Lib_MathDouble.c,257 :: 		
0x0530	0x2D34      	GOTO       NRM4032
;__Lib_MathDouble.c,258 :: 		
0x0531	0x197C      	BTFSC      R12, 2
;__Lib_MathDouble.c,259 :: 		
0x0532	0x2D82      	GOTO       JMPSETFOV32
;__Lib_MathDouble.c,260 :: 		
0x0533	0x2D2D      	GOTO       $-6
;__Lib_MathDouble.c,261 :: 		
NRM4032:
;__Lib_MathDouble.c,262 :: 		
0x0534	0x01A1      	CLRF       __math_tempbD
;__Lib_MathDouble.c,263 :: 		
0x0535	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,264 :: 		
0x0536	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,265 :: 		
0x0537	0x2D54      	GOTO       NORM4032
;__Lib_MathDouble.c,266 :: 		
0x0538	0x0871      	MOVF       R1, 0
;__Lib_MathDouble.c,267 :: 		
0x0539	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,268 :: 		
0x053A	0x0870      	MOVF       R0, 0
;__Lib_MathDouble.c,269 :: 		
0x053B	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,270 :: 		
0x053C	0x0878      	MOVF       R8, 0
;__Lib_MathDouble.c,271 :: 		
0x053D	0x00F0      	MOVWF      R0
;__Lib_MathDouble.c,272 :: 		
0x053E	0x01F8      	CLRF       R8
;__Lib_MathDouble.c,273 :: 		
0x053F	0x15A1      	BSF        __math_tempbD, 3
;__Lib_MathDouble.c,275 :: 		
0x0540	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,276 :: 		
0x0541	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,277 :: 		
0x0542	0x2D54      	GOTO       NORM4032
;__Lib_MathDouble.c,278 :: 		
0x0543	0x0871      	MOVF       R1, 0
;__Lib_MathDouble.c,279 :: 		
0x0544	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,280 :: 		
0x0545	0x0870      	MOVF       R0, 0
;__Lib_MathDouble.c,281 :: 		
0x0546	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,282 :: 		
0x0547	0x01F0      	CLRF       R0
;__Lib_MathDouble.c,283 :: 		
0x0548	0x11A1      	BCF        __math_tempbD, 3
;__Lib_MathDouble.c,284 :: 		
0x0549	0x1621      	BSF        __math_tempbD, 4
;__Lib_MathDouble.c,286 :: 		
0x054A	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,287 :: 		
0x054B	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,288 :: 		
0x054C	0x2D54      	GOTO       NORM4032
;__Lib_MathDouble.c,289 :: 		
0x054D	0x0871      	MOVF       R1, 0
;__Lib_MathDouble.c,290 :: 		
0x054E	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,291 :: 		
0x054F	0x01F1      	CLRF       R1
;__Lib_MathDouble.c,292 :: 		
0x0550	0x15A1      	BSF        __math_tempbD, 3
;__Lib_MathDouble.c,294 :: 		
0x0551	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,295 :: 		
0x0552	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,296 :: 		
0x0553	0x2D76      	GOTO       JMPRES032
;__Lib_MathDouble.c,297 :: 		
NORM4032:
;__Lib_MathDouble.c,298 :: 		
0x0554	0x0821      	MOVF       __math_tempbD, 0
;__Lib_MathDouble.c,299 :: 		
0x0555	0x02F3      	SUBWF      R3, 1
;__Lib_MathDouble.c,300 :: 		
0x0556	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,301 :: 		
0x0557	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,302 :: 		
0x0558	0x2D7A      	GOTO       JMPSETFUN32
;__Lib_MathDouble.c,303 :: 		
0x0559	0x1003      	BCF        STATUS, 0
;__Lib_MathDouble.c,304 :: 		
NORM4032A:
;__Lib_MathDouble.c,305 :: 		
0x055A	0x1BF2      	BTFSC      R2, 7
;__Lib_MathDouble.c,306 :: 		
0x055B	0x2D63      	GOTO       NRMRND4032
;__Lib_MathDouble.c,307 :: 		
0x055C	0x0DF8      	RLF        R8, 1
;__Lib_MathDouble.c,308 :: 		
0x055D	0x0DF0      	RLF        R0, 1
;__Lib_MathDouble.c,309 :: 		
0x055E	0x0DF1      	RLF        R1, 1
;__Lib_MathDouble.c,310 :: 		
0x055F	0x0DF2      	RLF        R2, 1
;__Lib_MathDouble.c,311 :: 		
0x0560	0x0BF3      	DECFSZ     R3, 1
;__Lib_MathDouble.c,312 :: 		
0x0561	0x2D5A      	GOTO       NORM4032A
;__Lib_MathDouble.c,313 :: 		
0x0562	0x2D7A      	GOTO       JMPSETFUN32
;__Lib_MathDouble.c,314 :: 		
NRMRND4032:
;__Lib_MathDouble.c,315 :: 		
0x0563	0x1B7B      	BTFSC      R11, 6
;__Lib_MathDouble.c,316 :: 		
0x0564	0x1C70      	BTFSS      R0, 0
;__Lib_MathDouble.c,317 :: 		
0x0565	0x2D7E      	GOTO       JMPFIXSIGN32
;__Lib_MathDouble.c,318 :: 		
0x0566	0x1FF8      	BTFSS      R8, 7
;__Lib_MathDouble.c,319 :: 		
0x0567	0x2D7E      	GOTO       JMPFIXSIGN32
;__Lib_MathDouble.c,320 :: 		
0x0568	0x0AF0      	INCF       R0, 1
;__Lib_MathDouble.c,321 :: 		
0x0569	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,322 :: 		
0x056A	0x0AF1      	INCF       R1, 1
;__Lib_MathDouble.c,323 :: 		
0x056B	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,324 :: 		
0x056C	0x0AF2      	INCF       R2, 1
;__Lib_MathDouble.c,325 :: 		
0x056D	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,326 :: 		
0x056E	0x2D7E      	GOTO       JMPFIXSIGN32
;__Lib_MathDouble.c,327 :: 		
0x056F	0x0CF2      	RRF        R2, 1
;__Lib_MathDouble.c,328 :: 		
0x0570	0x0CF1      	RRF        R1, 1
;__Lib_MathDouble.c,329 :: 		
0x0571	0x0CF0      	RRF        R0, 1
;__Lib_MathDouble.c,330 :: 		
0x0572	0x0AF3      	INCF       R3, 1
;__Lib_MathDouble.c,331 :: 		
0x0573	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,332 :: 		
0x0574	0x2D82      	GOTO       JMPSETFOV32
;__Lib_MathDouble.c,333 :: 		
0x0575	0x2D7E      	GOTO       JMPFIXSIGN32
;__Lib_MathDouble.c,334 :: 		
JMPRES032:
;__Lib_MathDouble.c,335 :: 		
0x0576	0x3001      	MOVLW      1
;__Lib_MathDouble.c,336 :: 		
0x0577	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,338 :: 		
0x0578	0x2321      	CALL       _RES032
;__Lib_MathDouble.c,340 :: 		
0x0579	0x2D85      	GOTO       NRM4032EEE
;__Lib_MathDouble.c,341 :: 		
JMPSETFUN32:
;__Lib_MathDouble.c,342 :: 		
0x057A	0x3002      	MOVLW      2
;__Lib_MathDouble.c,343 :: 		
0x057B	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,345 :: 		
0x057C	0x2328      	CALL       _SETFUN32
;__Lib_MathDouble.c,347 :: 		
0x057D	0x2D85      	GOTO       NRM4032EEE
;__Lib_MathDouble.c,348 :: 		
JMPFIXSIGN32:
;__Lib_MathDouble.c,349 :: 		
0x057E	0x3004      	MOVLW      4
;__Lib_MathDouble.c,350 :: 		
0x057F	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,352 :: 		
0x0580	0x2334      	CALL       _FIXSIGN32
;__Lib_MathDouble.c,354 :: 		
0x0581	0x2D85      	GOTO       NRM4032EEE
;__Lib_MathDouble.c,355 :: 		
JMPSETFOV32:
;__Lib_MathDouble.c,356 :: 		
0x0582	0x3008      	MOVLW      8
;__Lib_MathDouble.c,357 :: 		
0x0583	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,359 :: 		
0x0584	0x2315      	CALL       _SETFOV32
;__Lib_MathDouble.c,361 :: 		
NRM4032EEE:
;__Lib_MathDouble.c,362 :: 		
0x0585	0x0000      	NOP
;__Lib_MathDouble.c,370 :: 		
L_end_NRM4032:
0x0586	0x0008      	RETURN
; end of _NRM4032
_IntToStr:
;__Lib_Conversions.c,146 :: 		
;__Lib_Conversions.c,152 :: 		
0x0587	0x002C      	MOVLB      12
0x0588	0x01AA      	CLRF       IntToStr_negative_L0
0x0589	0x01AB      	CLRF       IntToStr_negative_L0+1
;__Lib_Conversions.c,153 :: 		
0x058A	0x0824      	MOVF       FARG_IntToStr_input, 0
0x058B	0x00AC      	MOVWF      IntToStr_inword_L0
0x058C	0x0825      	MOVF       FARG_IntToStr_input+1, 0
0x058D	0x00AD      	MOVWF      IntToStr_inword_L0+1
;__Lib_Conversions.c,154 :: 		
0x058E	0x3080      	MOVLW      128
0x058F	0x0625      	XORWF      FARG_IntToStr_input+1, 0
0x0590	0x00F0      	MOVWF      R0
0x0591	0x3080      	MOVLW      128
0x0592	0x0270      	SUBWF      R0, 0
0x0593	0x1D03      	BTFSS      STATUS, 2
0x0594	0x2D97      	GOTO       L__IntToStr115
0x0595	0x3000      	MOVLW      0
0x0596	0x0224      	SUBWF      FARG_IntToStr_input, 0
L__IntToStr115:
0x0597	0x1803      	BTFSC      STATUS, 0
0x0598	0x2DA5      	GOTO       L_IntToStr23
;__Lib_Conversions.c,155 :: 		
0x0599	0x3001      	MOVLW      1
0x059A	0x00AA      	MOVWF      IntToStr_negative_L0
0x059B	0x3000      	MOVLW      0
0x059C	0x00AB      	MOVWF      IntToStr_negative_L0+1
;__Lib_Conversions.c,156 :: 		
0x059D	0x0824      	MOVF       FARG_IntToStr_input, 0
0x059E	0x3C00      	SUBLW      0
0x059F	0x00AC      	MOVWF      IntToStr_inword_L0
0x05A0	0x0825      	MOVF       FARG_IntToStr_input+1, 0
0x05A1	0x1C03      	BTFSS      STATUS, 0
0x05A2	0x3E01      	ADDLW      1
0x05A3	0x01AD      	CLRF       IntToStr_inword_L0+1
0x05A4	0x02AD      	SUBWF      IntToStr_inword_L0+1, 1
;__Lib_Conversions.c,157 :: 		
L_IntToStr23:
;__Lib_Conversions.c,158 :: 		
0x05A5	0x082C      	MOVF       IntToStr_inword_L0, 0
0x05A6	0x00AE      	MOVWF      FARG_WordToStr_input
0x05A7	0x082D      	MOVF       IntToStr_inword_L0+1, 0
0x05A8	0x00AF      	MOVWF      FARG_WordToStr_input+1
0x05A9	0x0826      	MOVF       FARG_IntToStr_output, 0
0x05AA	0x00B0      	MOVWF      FARG_WordToStr_output
0x05AB	0x0827      	MOVF       FARG_IntToStr_output+1, 0
0x05AC	0x00B1      	MOVWF      FARG_WordToStr_output+1
0x05AD	0x2275      	CALL       _WordToStr
;__Lib_Conversions.c,160 :: 		
0x05AE	0x3006      	MOVLW      6
0x05AF	0x00A8      	MOVWF      IntToStr_i_L0
0x05B0	0x3000      	MOVLW      0
0x05B1	0x00A9      	MOVWF      IntToStr_i_L0+1
;__Lib_Conversions.c,161 :: 		
L_IntToStr24:
0x05B2	0x0829      	MOVF       IntToStr_i_L0+1, 0
0x05B3	0x3C00      	SUBLW      0
0x05B4	0x1D03      	BTFSS      STATUS, 2
0x05B5	0x2DB8      	GOTO       L__IntToStr116
0x05B6	0x0828      	MOVF       IntToStr_i_L0, 0
0x05B7	0x3C00      	SUBLW      0
L__IntToStr116:
0x05B8	0x1803      	BTFSC      STATUS, 0
0x05B9	0x2DD3      	GOTO       L_IntToStr25
;__Lib_Conversions.c,162 :: 		
0x05BA	0x0828      	MOVF       IntToStr_i_L0, 0
0x05BB	0x0726      	ADDWF      FARG_IntToStr_output, 0
0x05BC	0x0086      	MOVWF      FSR1
0x05BD	0x0829      	MOVF       IntToStr_i_L0+1, 0
0x05BE	0x3D27      	ADDWFC     FARG_IntToStr_output+1, 0
0x05BF	0x0087      	MOVWF      FSR1H
0x05C0	0x3001      	MOVLW      1
0x05C1	0x0228      	SUBWF      IntToStr_i_L0, 0
0x05C2	0x00F0      	MOVWF      R0
0x05C3	0x3000      	MOVLW      0
0x05C4	0x3B29      	SUBWFB     IntToStr_i_L0+1, 0
0x05C5	0x00F1      	MOVWF      R1
0x05C6	0x0870      	MOVF       R0, 0
0x05C7	0x0726      	ADDWF      FARG_IntToStr_output, 0
0x05C8	0x0084      	MOVWF      FSR0
0x05C9	0x0871      	MOVF       R1, 0
0x05CA	0x3D27      	ADDWFC     FARG_IntToStr_output+1, 0
0x05CB	0x0085      	MOVWF      FSR0H
0x05CC	0x0800      	MOVF       INDF0, 0
0x05CD	0x0081      	MOVWF      INDF1
;__Lib_Conversions.c,163 :: 		
0x05CE	0x3001      	MOVLW      1
0x05CF	0x02A8      	SUBWF      IntToStr_i_L0, 1
0x05D0	0x3000      	MOVLW      0
0x05D1	0x3BA9      	SUBWFB     IntToStr_i_L0+1, 1
;__Lib_Conversions.c,164 :: 		
0x05D2	0x2DB2      	GOTO       L_IntToStr24
L_IntToStr25:
;__Lib_Conversions.c,165 :: 		
0x05D3	0x0826      	MOVF       FARG_IntToStr_output, 0
0x05D4	0x0086      	MOVWF      FSR1
0x05D5	0x0827      	MOVF       FARG_IntToStr_output+1, 0
0x05D6	0x0087      	MOVWF      FSR1H
0x05D7	0x3020      	MOVLW      32
0x05D8	0x0081      	MOVWF      INDF1
;__Lib_Conversions.c,166 :: 		
0x05D9	0x082A      	MOVF       IntToStr_negative_L0, 0
0x05DA	0x042B      	IORWF       IntToStr_negative_L0+1, 0
0x05DB	0x1903      	BTFSC      STATUS, 2
0x05DC	0x2DF9      	GOTO       L_IntToStr26
;__Lib_Conversions.c,167 :: 		
0x05DD	0x01A8      	CLRF       IntToStr_i_L0
0x05DE	0x01A9      	CLRF       IntToStr_i_L0+1
;__Lib_Conversions.c,168 :: 		
L_IntToStr27:
0x05DF	0x0828      	MOVF       IntToStr_i_L0, 0
0x05E0	0x0726      	ADDWF      FARG_IntToStr_output, 0
0x05E1	0x0084      	MOVWF      FSR0
0x05E2	0x0829      	MOVF       IntToStr_i_L0+1, 0
0x05E3	0x3D27      	ADDWFC     FARG_IntToStr_output+1, 0
0x05E4	0x0085      	MOVWF      FSR0H
0x05E5	0x0800      	MOVF       INDF0, 0
0x05E6	0x3A20      	XORLW      32
0x05E7	0x1D03      	BTFSS      STATUS, 2
0x05E8	0x2DED      	GOTO       L_IntToStr28
0x05E9	0x0AA8      	INCF       IntToStr_i_L0, 1
0x05EA	0x1903      	BTFSC      STATUS, 2
0x05EB	0x0AA9      	INCF       IntToStr_i_L0+1, 1
0x05EC	0x2DDF      	GOTO       L_IntToStr27
L_IntToStr28:
;__Lib_Conversions.c,169 :: 		
0x05ED	0x3001      	MOVLW      1
0x05EE	0x02A8      	SUBWF      IntToStr_i_L0, 1
0x05EF	0x3000      	MOVLW      0
0x05F0	0x3BA9      	SUBWFB     IntToStr_i_L0+1, 1
;__Lib_Conversions.c,170 :: 		
0x05F1	0x0828      	MOVF       IntToStr_i_L0, 0
0x05F2	0x0726      	ADDWF      FARG_IntToStr_output, 0
0x05F3	0x0086      	MOVWF      FSR1
0x05F4	0x0829      	MOVF       IntToStr_i_L0+1, 0
0x05F5	0x3D27      	ADDWFC     FARG_IntToStr_output+1, 0
0x05F6	0x0087      	MOVWF      FSR1H
0x05F7	0x302D      	MOVLW      45
0x05F8	0x0081      	MOVWF      INDF1
L_IntToStr26:
;__Lib_Conversions.c,171 :: 		
L_end_IntToStr:
0x05F9	0x0008      	RETURN
; end of _IntToStr
_SETFDZ32:
;__Lib_MathDouble.c,102 :: 		
;__Lib_MathDouble.c,105 :: 		
0x05FA	0x15FB      	BSF        R11, 3
;__Lib_MathDouble.c,106 :: 		
0x05FB	0x30FF      	MOVLW      255
;__Lib_MathDouble.c,108 :: 		
L_end_SETFDZ32:
0x05FC	0x0008      	RETURN
; end of _SETFDZ32
_ADC_Get_Sample:
;__Lib_ADC.c,27 :: 		
;__Lib_ADC.c,28 :: 		
0x05FD	0x3083      	MOVLW      131
0x05FE	0x0021      	MOVLB      1
0x05FF	0x059D      	ANDWF      ADCON0, 1
;__Lib_ADC.c,29 :: 		
0x0600	0x002C      	MOVLB      12
0x0601	0x0824      	MOVF       FARG_ADC_Get_Sample_channel, 0
0x0602	0x00F0      	MOVWF      R0
0x0603	0x35F0      	LSLF       R0, 1
0x0604	0x35F0      	LSLF       R0, 1
0x0605	0x0870      	MOVF       R0, 0
0x0606	0x0021      	MOVLB      1
0x0607	0x049D      	IORWF       ADCON0, 1
;__Lib_ADC.c,32 :: 		
0x0608	0x2338      	CALL       _Delay_22us
;__Lib_ADC.c,35 :: 		
0x0609	0x149D      	BSF        GO_NOT_DONE_bit, BitPos(GO_NOT_DONE_bit+0)
;__Lib_ADC.c,38 :: 		
L_ADC_Get_Sample0:
0x060A	0x1C9D      	BTFSS      GO_NOT_DONE_bit, BitPos(GO_NOT_DONE_bit+0)
0x060B	0x2E0D      	GOTO       L_ADC_Get_Sample1
;__Lib_ADC.c,39 :: 		
0x060C	0x2E0A      	GOTO       L_ADC_Get_Sample0
L_ADC_Get_Sample1:
;__Lib_ADC.c,41 :: 		
0x060D	0x081C      	MOVF       ADRESH, 0
0x060E	0x00F1      	MOVWF      R1
0x060F	0x01F0      	CLRF       R0
0x0610	0x081B      	MOVF       ADRESL, 0
0x0611	0x04F0      	IORWF       R0, 1
0x0612	0x3000      	MOVLW      0
0x0613	0x04F1      	IORWF       R1, 1
;__Lib_ADC.c,42 :: 		
L_end_ADC_Get_Sample:
0x0614	0x0008      	RETURN
; end of _ADC_Get_Sample
_SETIOV3224:
;__Lib_MathDouble.c,996 :: 		
;__Lib_MathDouble.c,1002 :: 		
0x0615	0x147B      	BSF        R11, 0
;__Lib_MathDouble.c,1003 :: 		
0x0616	0x1FFB      	BTFSS      R11, 7
;__Lib_MathDouble.c,1004 :: 		
0x0617	0x2E20      	GOTO       SETIOV3224EEE
;__Lib_MathDouble.c,1006 :: 		
0x0618	0x01F2      	CLRF       R2
;__Lib_MathDouble.c,1007 :: 		
0x0619	0x1FFA      	BTFSS      R10, 7
;__Lib_MathDouble.c,1008 :: 		
0x061A	0x30FF      	MOVLW      255
;__Lib_MathDouble.c,1009 :: 		
0x061B	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,1010 :: 		
0x061C	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,1011 :: 		
0x061D	0x00F0      	MOVWF      R0
;__Lib_MathDouble.c,1012 :: 		
0x061E	0x0DFA      	RLF        R10, 1
;__Lib_MathDouble.c,1013 :: 		
0x061F	0x0CF2      	RRF        R2, 1
;__Lib_MathDouble.c,1014 :: 		
SETIOV3224EEE:
;__Lib_MathDouble.c,1015 :: 		
0x0620	0x30FF      	MOVLW      255
;__Lib_MathDouble.c,1017 :: 		
L_end_SETIOV3224:
0x0621	0x0008      	RETURN
; end of _SETIOV3224
_NRM3232:
;__Lib_MathDouble.c,167 :: 		
;__Lib_MathDouble.c,173 :: 		
;__Lib_MathDouble.c,175 :: 		
0x0622	0x01A1      	CLRF       __math_tempbD
;__Lib_MathDouble.c,176 :: 		
0x0623	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,177 :: 		
0x0624	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,178 :: 		
0x0625	0x2E37      	GOTO       NORM3232
;__Lib_MathDouble.c,179 :: 		
0x0626	0x0871      	MOVF       R1, 0
;__Lib_MathDouble.c,180 :: 		
0x0627	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,181 :: 		
0x0628	0x0870      	MOVF       R0, 0
;__Lib_MathDouble.c,182 :: 		
0x0629	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,183 :: 		
0x062A	0x01F0      	CLRF       R0
;__Lib_MathDouble.c,184 :: 		
0x062B	0x15A1      	BSF        __math_tempbD, 3
;__Lib_MathDouble.c,186 :: 		
0x062C	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,187 :: 		
0x062D	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,188 :: 		
0x062E	0x2E37      	GOTO       NORM3232
;__Lib_MathDouble.c,189 :: 		
0x062F	0x0871      	MOVF       R1, 0
;__Lib_MathDouble.c,190 :: 		
0x0630	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,191 :: 		
0x0631	0x01F1      	CLRF       R1
;__Lib_MathDouble.c,192 :: 		
0x0632	0x11A1      	BCF        __math_tempbD, 3
;__Lib_MathDouble.c,193 :: 		
0x0633	0x1621      	BSF        __math_tempbD, 4
;__Lib_MathDouble.c,195 :: 		
0x0634	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,196 :: 		
0x0635	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,197 :: 		
0x0636	0x2E45      	GOTO       JPNRES032
;__Lib_MathDouble.c,198 :: 		
NORM3232:
;__Lib_MathDouble.c,199 :: 		
0x0637	0x0821      	MOVF       __math_tempbD, 0
;__Lib_MathDouble.c,200 :: 		
0x0638	0x02F3      	SUBWF      R3, 1
;__Lib_MathDouble.c,201 :: 		
0x0639	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,202 :: 		
0x063A	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,203 :: 		
0x063B	0x2E49      	GOTO       JPNSETFUN32
;__Lib_MathDouble.c,204 :: 		
0x063C	0x1003      	BCF        STATUS, 0
;__Lib_MathDouble.c,205 :: 		
NORM3232A:
;__Lib_MathDouble.c,206 :: 		
0x063D	0x1BF2      	BTFSC      R2, 7
;__Lib_MathDouble.c,207 :: 		
0x063E	0x2E4D      	GOTO       JMPNFIXSIGN32
;__Lib_MathDouble.c,208 :: 		
0x063F	0x0DF0      	RLF        R0, 1
;__Lib_MathDouble.c,209 :: 		
0x0640	0x0DF1      	RLF        R1, 1
;__Lib_MathDouble.c,210 :: 		
0x0641	0x0DF2      	RLF        R2, 1
;__Lib_MathDouble.c,211 :: 		
0x0642	0x0BF3      	DECFSZ     R3, 1
;__Lib_MathDouble.c,212 :: 		
0x0643	0x2E3D      	GOTO       NORM3232A
;__Lib_MathDouble.c,213 :: 		
0x0644	0x2E49      	GOTO       JPNSETFUN32
;__Lib_MathDouble.c,214 :: 		
JPNRES032:
;__Lib_MathDouble.c,215 :: 		
0x0645	0x3001      	MOVLW      1
;__Lib_MathDouble.c,216 :: 		
0x0646	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,218 :: 		
0x0647	0x2321      	CALL       _RES032
;__Lib_MathDouble.c,220 :: 		
0x0648	0x2E50      	GOTO       NORM32EEE
;__Lib_MathDouble.c,221 :: 		
JPNSETFUN32:
;__Lib_MathDouble.c,222 :: 		
0x0649	0x3002      	MOVLW      2
;__Lib_MathDouble.c,223 :: 		
0x064A	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,225 :: 		
0x064B	0x2328      	CALL       _SETFUN32
;__Lib_MathDouble.c,227 :: 		
0x064C	0x2E50      	GOTO       NORM32EEE
;__Lib_MathDouble.c,228 :: 		
JMPNFIXSIGN32:
;__Lib_MathDouble.c,229 :: 		
0x064D	0x3004      	MOVLW      4
;__Lib_MathDouble.c,230 :: 		
0x064E	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,232 :: 		
0x064F	0x2334      	CALL       _FIXSIGN32
;__Lib_MathDouble.c,234 :: 		
NORM32EEE:
;__Lib_MathDouble.c,236 :: 		
L_end_NRM3232:
0x0650	0x0008      	RETURN
; end of _NRM3232
_Double2Int:
;__Lib_MathDouble.c,1385 :: 		
;__Lib_MathDouble.c,1393 :: 		
0x0651	0x0020      	MOVLB      0
;__Lib_MathDouble.c,1395 :: 		
0x0652	0x01FB      	CLRF       R11
;__Lib_MathDouble.c,1396 :: 		
0x0653	0x0873      	MOVF       R3, 0
;__Lib_MathDouble.c,1397 :: 		
0x0654	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,1398 :: 		
0x0655	0x2E8D      	GOTO       IRES016
;__Lib_MathDouble.c,1400 :: 		
0x0656	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,1401 :: 		
0x0657	0x00FA      	MOVWF      R10
;__Lib_MathDouble.c,1402 :: 		
0x0658	0x17F2      	BSF        R2, 7
;__Lib_MathDouble.c,1404 :: 		
0x0659	0x308E      	MOVLW      142
;__Lib_MathDouble.c,1405 :: 		
0x065A	0x02F3      	SUBWF      R3, 1
;__Lib_MathDouble.c,1406 :: 		
0x065B	0x1FF3      	BTFSS      R3, 7
;__Lib_MathDouble.c,1407 :: 		
0x065C	0x2E90      	GOTO       SETIOV16
;__Lib_MathDouble.c,1408 :: 		
0x065D	0x09F3      	COMF       R3, 1
;__Lib_MathDouble.c,1409 :: 		
0x065E	0x0AF3      	INCF       R3, 1
;__Lib_MathDouble.c,1411 :: 		
0x065F	0x3008      	MOVLW      8
;__Lib_MathDouble.c,1412 :: 		
0x0660	0x0273      	SUBWF      R3, 0
;__Lib_MathDouble.c,1413 :: 		
0x0661	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,1414 :: 		
0x0662	0x2E73      	GOTO       TSHIFT3216
;__Lib_MathDouble.c,1415 :: 		
0x0663	0x00F3      	MOVWF      R3
;__Lib_MathDouble.c,1416 :: 		
0x0664	0x0DF1      	RLF        R1, 1
;__Lib_MathDouble.c,1417 :: 		
0x0665	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,1418 :: 		
0x0666	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,1419 :: 		
0x0667	0x01F2      	CLRF       R2
;__Lib_MathDouble.c,1421 :: 		
0x0668	0x3008      	MOVLW      8
;__Lib_MathDouble.c,1422 :: 		
0x0669	0x0273      	SUBWF      R3, 0
;__Lib_MathDouble.c,1423 :: 		
0x066A	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,1424 :: 		
0x066B	0x2E73      	GOTO       TSHIFT3216
;__Lib_MathDouble.c,1425 :: 		
0x066C	0x00F3      	MOVWF      R3
;__Lib_MathDouble.c,1426 :: 		
0x066D	0x0DF1      	RLF        R1, 1
;__Lib_MathDouble.c,1427 :: 		
0x066E	0x01F1      	CLRF       R1
;__Lib_MathDouble.c,1429 :: 		
0x066F	0x0873      	MOVF       R3, 0
;__Lib_MathDouble.c,1430 :: 		
0x0670	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,1431 :: 		
0x0671	0x1003      	BCF        STATUS, 0
;__Lib_MathDouble.c,1432 :: 		
0x0672	0x2E7B      	GOTO       SHIFT3216OK
;__Lib_MathDouble.c,1433 :: 		
TSHIFT3216:
;__Lib_MathDouble.c,1434 :: 		
0x0673	0x0873      	MOVF       R3, 0
;__Lib_MathDouble.c,1435 :: 		
0x0674	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,1436 :: 		
0x0675	0x2E7B      	GOTO       SHIFT3216OK
;__Lib_MathDouble.c,1437 :: 		
SHIFT3216:
;__Lib_MathDouble.c,1438 :: 		
0x0676	0x1003      	BCF        STATUS, 0
;__Lib_MathDouble.c,1439 :: 		
0x0677	0x0CF2      	RRF        R2, 1
;__Lib_MathDouble.c,1440 :: 		
0x0678	0x0CF1      	RRF        R1, 1
;__Lib_MathDouble.c,1441 :: 		
0x0679	0x0BF3      	DECFSZ     R3, 1
;__Lib_MathDouble.c,1442 :: 		
0x067A	0x2E76      	GOTO       SHIFT3216
;__Lib_MathDouble.c,1443 :: 		
SHIFT3216OK:
;__Lib_MathDouble.c,1444 :: 		
0x067B	0x1B7B      	BTFSC      R11, 6
;__Lib_MathDouble.c,1445 :: 		
0x067C	0x1C71      	BTFSS      R1, 0
;__Lib_MathDouble.c,1446 :: 		
0x067D	0x2E85      	GOTO       INT3216OK
;__Lib_MathDouble.c,1447 :: 		
0x067E	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,1448 :: 		
0x067F	0x2E85      	GOTO       INT3216OK
;__Lib_MathDouble.c,1449 :: 		
0x0680	0x0AF1      	INCF       R1, 1
;__Lib_MathDouble.c,1450 :: 		
0x0681	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,1451 :: 		
0x0682	0x0AF2      	INCF       R2, 1
;__Lib_MathDouble.c,1452 :: 		
0x0683	0x1BF2      	BTFSC      R2, 7
;__Lib_MathDouble.c,1453 :: 		
0x0684	0x2E9C      	GOTO       JPJSETIOV3224
;__Lib_MathDouble.c,1454 :: 		
INT3216OK:
;__Lib_MathDouble.c,1455 :: 		
0x0685	0x1FFA      	BTFSS      R10, 7
;__Lib_MathDouble.c,1456 :: 		
0x0686	0x2E9F      	GOTO       INT3216EOK
;__Lib_MathDouble.c,1458 :: 		
0x0687	0x09F2      	COMF       R2, 1
;__Lib_MathDouble.c,1459 :: 		
0x0688	0x09F1      	COMF       R1, 1
;__Lib_MathDouble.c,1460 :: 		
0x0689	0x0AF1      	INCF       R1, 1
;__Lib_MathDouble.c,1461 :: 		
0x068A	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,1462 :: 		
0x068B	0x0AF2      	INCF       R2, 1
;__Lib_MathDouble.c,1463 :: 		
0x068C	0x2E9F      	GOTO       INT3216EOK
;__Lib_MathDouble.c,1465 :: 		
IRES016:
;__Lib_MathDouble.c,1466 :: 		
0x068D	0x01F2      	CLRF       R2
;__Lib_MathDouble.c,1467 :: 		
0x068E	0x01F1      	CLRF       R1
;__Lib_MathDouble.c,1468 :: 		
0x068F	0x2E9F      	GOTO       INT3216EOK
;__Lib_MathDouble.c,1469 :: 		
SETIOV16:
;__Lib_MathDouble.c,1470 :: 		
0x0690	0x147B      	BSF        R11, 0
;__Lib_MathDouble.c,1471 :: 		
0x0691	0x1FFB      	BTFSS      R11, 7
;__Lib_MathDouble.c,1472 :: 		
0x0692	0x2EA2      	GOTO       INT3216EER
;__Lib_MathDouble.c,1474 :: 		
0x0693	0x01F2      	CLRF       R2
;__Lib_MathDouble.c,1475 :: 		
0x0694	0x1FFA      	BTFSS      R10, 7
;__Lib_MathDouble.c,1476 :: 		
0x0695	0x2EA2      	GOTO       INT3216EER
;__Lib_MathDouble.c,1477 :: 		
0x0696	0x30FF      	MOVLW      255
;__Lib_MathDouble.c,1478 :: 		
0x0697	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,1479 :: 		
0x0698	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,1480 :: 		
0x0699	0x0DFA      	RLF        R10, 1
;__Lib_MathDouble.c,1481 :: 		
0x069A	0x0CF2      	RRF        R2, 1
;__Lib_MathDouble.c,1482 :: 		
0x069B	0x2EA2      	GOTO       INT3216EER
;__Lib_MathDouble.c,1484 :: 		
JPJSETIOV3224:
;__Lib_MathDouble.c,1485 :: 		
0x069C	0x3001      	MOVLW      1
;__Lib_MathDouble.c,1486 :: 		
0x069D	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,1487 :: 		
0x069E	0x2EA4      	GOTO       INT3216EEE
;__Lib_MathDouble.c,1488 :: 		
INT3216EOK:
;__Lib_MathDouble.c,1489 :: 		
0x069F	0x3000      	MOVLW      0
;__Lib_MathDouble.c,1490 :: 		
0x06A0	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,1491 :: 		
0x06A1	0x2EA4      	GOTO       INT3216EEE
;__Lib_MathDouble.c,1492 :: 		
INT3216EER:
;__Lib_MathDouble.c,1493 :: 		
0x06A2	0x30FF      	MOVLW      255
;__Lib_MathDouble.c,1494 :: 		
0x06A3	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,1495 :: 		
INT3216EEE:
;__Lib_MathDouble.c,1498 :: 		
0x06A4	0x08FC      	MOVF       R12, 1
;__Lib_MathDouble.c,1500 :: 		
0x06A5	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,1501 :: 		
0x06A6	0x2EA8      	GOTO       L_Double2Int_0
;__Lib_MathDouble.c,1503 :: 		
0x06A7	0x2615      	CALL       _SETIOV3224
;__Lib_MathDouble.c,1505 :: 		
L_Double2Int_0:
;__Lib_MathDouble.c,1506 :: 		
0x06A8	0x0871      	MOVF       R1, 0
;__Lib_MathDouble.c,1507 :: 		
0x06A9	0x00F0      	MOVWF      R0
;__Lib_MathDouble.c,1508 :: 		
0x06AA	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,1509 :: 		
0x06AB	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,1513 :: 		
L_end_Double2Int:
0x06AC	0x0008      	RETURN
; end of _Double2Int
_Add_32x32_FP:
;__Lib_MathDouble.c,379 :: 		
;__Lib_MathDouble.c,390 :: 		
;__Lib_MathDouble.c,392 :: 		
0x06AD	0x0020      	MOVLB      0
;__Lib_MathDouble.c,393 :: 		
0x06AE	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,394 :: 		
0x06AF	0x0676      	XORWF      R6, 0
;__Lib_MathDouble.c,395 :: 		
0x06B0	0x00A1      	MOVWF      __math_tempbD
;__Lib_MathDouble.c,397 :: 		
0x06B1	0x01F8      	CLRF       R8
;__Lib_MathDouble.c,398 :: 		
0x06B2	0x01F9      	CLRF       R9
;__Lib_MathDouble.c,400 :: 		
0x06B3	0x0873      	MOVF       R3, 0
;__Lib_MathDouble.c,401 :: 		
0x06B4	0x0277      	SUBWF      R7, 0
;__Lib_MathDouble.c,402 :: 		
0x06B5	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,403 :: 		
0x06B6	0x2ECF      	GOTO       USEA32
;__Lib_MathDouble.c,405 :: 		
0x06B7	0x0877      	MOVF       R7, 0
;__Lib_MathDouble.c,406 :: 		
0x06B8	0x00FD      	MOVWF      R13
;__Lib_MathDouble.c,407 :: 		
0x06B9	0x0873      	MOVF       R3, 0
;__Lib_MathDouble.c,408 :: 		
0x06BA	0x00F7      	MOVWF      R7
;__Lib_MathDouble.c,409 :: 		
0x06BB	0x087D      	MOVF       R13, 0
;__Lib_MathDouble.c,410 :: 		
0x06BC	0x00F3      	MOVWF      R3
;__Lib_MathDouble.c,412 :: 		
0x06BD	0x0876      	MOVF       R6, 0
;__Lib_MathDouble.c,413 :: 		
0x06BE	0x00FD      	MOVWF      R13
;__Lib_MathDouble.c,414 :: 		
0x06BF	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,415 :: 		
0x06C0	0x00F6      	MOVWF      R6
;__Lib_MathDouble.c,416 :: 		
0x06C1	0x087D      	MOVF       R13, 0
;__Lib_MathDouble.c,417 :: 		
0x06C2	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,419 :: 		
0x06C3	0x0875      	MOVF       R5, 0
;__Lib_MathDouble.c,420 :: 		
0x06C4	0x00FD      	MOVWF      R13
;__Lib_MathDouble.c,421 :: 		
0x06C5	0x0871      	MOVF       R1, 0
;__Lib_MathDouble.c,422 :: 		
0x06C6	0x00F5      	MOVWF      R5
;__Lib_MathDouble.c,423 :: 		
0x06C7	0x087D      	MOVF       R13, 0
;__Lib_MathDouble.c,424 :: 		
0x06C8	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,426 :: 		
0x06C9	0x0874      	MOVF       R4, 0
;__Lib_MathDouble.c,427 :: 		
0x06CA	0x00FD      	MOVWF      R13
;__Lib_MathDouble.c,428 :: 		
0x06CB	0x0870      	MOVF       R0, 0
;__Lib_MathDouble.c,429 :: 		
0x06CC	0x00F4      	MOVWF      R4
;__Lib_MathDouble.c,430 :: 		
0x06CD	0x087D      	MOVF       R13, 0
;__Lib_MathDouble.c,431 :: 		
0x06CE	0x00F0      	MOVWF      R0
;__Lib_MathDouble.c,432 :: 		
USEA32:
;__Lib_MathDouble.c,433 :: 		
0x06CF	0x0877      	MOVF       R7, 0
;__Lib_MathDouble.c,434 :: 		
0x06D0	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,435 :: 		
0x06D1	0x2F48      	GOTO       JMPEEE
;__Lib_MathDouble.c,436 :: 		
0x06D2	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,437 :: 		
0x06D3	0x00FA      	MOVWF      R10
;__Lib_MathDouble.c,438 :: 		
0x06D4	0x17F2      	BSF        R2, 7
;__Lib_MathDouble.c,439 :: 		
0x06D5	0x17F6      	BSF        R6, 7
;__Lib_MathDouble.c,440 :: 		
0x06D6	0x0877      	MOVF       R7, 0
;__Lib_MathDouble.c,441 :: 		
0x06D7	0x0273      	SUBWF      R3, 0
;__Lib_MathDouble.c,442 :: 		
0x06D8	0x00F7      	MOVWF      R7
;__Lib_MathDouble.c,443 :: 		
0x06D9	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,444 :: 		
0x06DA	0x2F02      	GOTO       ALIGNED32
;__Lib_MathDouble.c,445 :: 		
0x06DB	0x3008      	MOVLW      8
;__Lib_MathDouble.c,446 :: 		
0x06DC	0x0277      	SUBWF      R7, 0
;__Lib_MathDouble.c,447 :: 		
0x06DD	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,448 :: 		
0x06DE	0x2EF8      	GOTO       ALIGNB32
;__Lib_MathDouble.c,449 :: 		
0x06DF	0x00F7      	MOVWF      R7
;__Lib_MathDouble.c,450 :: 		
0x06E0	0x0874      	MOVF       R4, 0
;__Lib_MathDouble.c,451 :: 		
0x06E1	0x00F9      	MOVWF      R9
;__Lib_MathDouble.c,452 :: 		
0x06E2	0x0875      	MOVF       R5, 0
;__Lib_MathDouble.c,453 :: 		
0x06E3	0x00F4      	MOVWF      R4
;__Lib_MathDouble.c,454 :: 		
0x06E4	0x0876      	MOVF       R6, 0
;__Lib_MathDouble.c,455 :: 		
0x06E5	0x00F5      	MOVWF      R5
;__Lib_MathDouble.c,456 :: 		
0x06E6	0x01F6      	CLRF       R6
;__Lib_MathDouble.c,457 :: 		
0x06E7	0x3008      	MOVLW      8
;__Lib_MathDouble.c,458 :: 		
0x06E8	0x0277      	SUBWF      R7, 0
;__Lib_MathDouble.c,459 :: 		
0x06E9	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,460 :: 		
0x06EA	0x2EF8      	GOTO       ALIGNB32
;__Lib_MathDouble.c,461 :: 		
0x06EB	0x00F7      	MOVWF      R7
;__Lib_MathDouble.c,462 :: 		
0x06EC	0x0874      	MOVF       R4, 0
;__Lib_MathDouble.c,463 :: 		
0x06ED	0x00F9      	MOVWF      R9
;__Lib_MathDouble.c,464 :: 		
0x06EE	0x0875      	MOVF       R5, 0
;__Lib_MathDouble.c,465 :: 		
0x06EF	0x00F4      	MOVWF      R4
;__Lib_MathDouble.c,466 :: 		
0x06F0	0x01F5      	CLRF       R5
;__Lib_MathDouble.c,467 :: 		
0x06F1	0x3008      	MOVLW      8
;__Lib_MathDouble.c,468 :: 		
0x06F2	0x0277      	SUBWF      R7, 0
;__Lib_MathDouble.c,469 :: 		
0x06F3	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,470 :: 		
0x06F4	0x2EF8      	GOTO       ALIGNB32
;__Lib_MathDouble.c,471 :: 		
0x06F5	0x087A      	MOVF       R10, 0
;__Lib_MathDouble.c,472 :: 		
0x06F6	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,473 :: 		
0x06F7	0x2F48      	GOTO       JMPEEE
;__Lib_MathDouble.c,474 :: 		
ALIGNB32:
;__Lib_MathDouble.c,475 :: 		
0x06F8	0x0877      	MOVF       R7, 0
;__Lib_MathDouble.c,476 :: 		
0x06F9	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,477 :: 		
0x06FA	0x2F02      	GOTO       ALIGNED32
;__Lib_MathDouble.c,478 :: 		
ALOOPB32:
;__Lib_MathDouble.c,479 :: 		
0x06FB	0x1003      	BCF        STATUS, 0
;__Lib_MathDouble.c,480 :: 		
0x06FC	0x0CF6      	RRF        R6, 1
;__Lib_MathDouble.c,481 :: 		
0x06FD	0x0CF5      	RRF        R5, 1
;__Lib_MathDouble.c,482 :: 		
0x06FE	0x0CF4      	RRF        R4, 1
;__Lib_MathDouble.c,483 :: 		
0x06FF	0x0CF9      	RRF        R9, 1
;__Lib_MathDouble.c,484 :: 		
0x0700	0x0BF7      	DECFSZ     R7, 1
;__Lib_MathDouble.c,485 :: 		
0x0701	0x2EFB      	GOTO       ALOOPB32
;__Lib_MathDouble.c,486 :: 		
ALIGNED32:
;__Lib_MathDouble.c,487 :: 		
0x0702	0x1FA1      	BTFSS      __math_tempbD, 7
;__Lib_MathDouble.c,488 :: 		
0x0703	0x2F0F      	GOTO       AOK32
;__Lib_MathDouble.c,489 :: 		
0x0704	0x09F9      	COMF       R9, 1
;__Lib_MathDouble.c,490 :: 		
0x0705	0x09F4      	COMF       R4, 1
;__Lib_MathDouble.c,491 :: 		
0x0706	0x09F5      	COMF       R5, 1
;__Lib_MathDouble.c,492 :: 		
0x0707	0x09F6      	COMF       R6, 1
;__Lib_MathDouble.c,493 :: 		
0x0708	0x0AF9      	INCF       R9, 1
;__Lib_MathDouble.c,494 :: 		
0x0709	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,495 :: 		
0x070A	0x0AF4      	INCF       R4, 1
;__Lib_MathDouble.c,496 :: 		
0x070B	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,497 :: 		
0x070C	0x0AF5      	INCF       R5, 1
;__Lib_MathDouble.c,498 :: 		
0x070D	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,499 :: 		
0x070E	0x0AF6      	INCF       R6, 1
;__Lib_MathDouble.c,500 :: 		
AOK32:
;__Lib_MathDouble.c,501 :: 		
0x070F	0x0879      	MOVF       R9, 0
;__Lib_MathDouble.c,502 :: 		
0x0710	0x07F8      	ADDWF      R8, 1
;__Lib_MathDouble.c,503 :: 		
0x0711	0x0874      	MOVF       R4, 0
;__Lib_MathDouble.c,504 :: 		
0x0712	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,505 :: 		
0x0713	0x0F74      	INCFSZ     R4, 0
;__Lib_MathDouble.c,506 :: 		
0x0714	0x07F0      	ADDWF      R0, 1
;__Lib_MathDouble.c,507 :: 		
0x0715	0x0875      	MOVF       R5, 0
;__Lib_MathDouble.c,508 :: 		
0x0716	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,509 :: 		
0x0717	0x0F75      	INCFSZ     R5, 0
;__Lib_MathDouble.c,510 :: 		
0x0718	0x07F1      	ADDWF      R1, 1
;__Lib_MathDouble.c,511 :: 		
0x0719	0x0876      	MOVF       R6, 0
;__Lib_MathDouble.c,512 :: 		
0x071A	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,513 :: 		
0x071B	0x0F76      	INCFSZ     R6, 0
;__Lib_MathDouble.c,514 :: 		
0x071C	0x07F2      	ADDWF      R2, 1
;__Lib_MathDouble.c,515 :: 		
0x071D	0x1BA1      	BTFSC      __math_tempbD, 7
;__Lib_MathDouble.c,516 :: 		
0x071E	0x2F28      	GOTO       ACOMP32
;__Lib_MathDouble.c,517 :: 		
0x071F	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,518 :: 		
0x0720	0x2F38      	GOTO       JMPNRMRND4032
;__Lib_MathDouble.c,519 :: 		
0x0721	0x0CF2      	RRF        R2, 1
;__Lib_MathDouble.c,520 :: 		
0x0722	0x0CF1      	RRF        R1, 1
;__Lib_MathDouble.c,521 :: 		
0x0723	0x0CF0      	RRF        R0, 1
;__Lib_MathDouble.c,522 :: 		
0x0724	0x0CF8      	RRF        R8, 1
;__Lib_MathDouble.c,523 :: 		
0x0725	0x0FF3      	INCFSZ     R3, 1
;__Lib_MathDouble.c,524 :: 		
0x0726	0x2F38      	GOTO       JMPNRMRND4032
;__Lib_MathDouble.c,525 :: 		
0x0727	0x2F44      	GOTO       ADD_JMPSETFOV32
;__Lib_MathDouble.c,526 :: 		
ACOMP32:
;__Lib_MathDouble.c,527 :: 		
0x0728	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,528 :: 		
0x0729	0x2F3C      	GOTO       JMPNRM4032
;__Lib_MathDouble.c,529 :: 		
0x072A	0x09F8      	COMF       R8, 1
;__Lib_MathDouble.c,530 :: 		
0x072B	0x09F0      	COMF       R0, 1
;__Lib_MathDouble.c,531 :: 		
0x072C	0x09F1      	COMF       R1, 1
;__Lib_MathDouble.c,532 :: 		
0x072D	0x09F2      	COMF       R2, 1
;__Lib_MathDouble.c,533 :: 		
0x072E	0x0AF8      	INCF       R8, 1
;__Lib_MathDouble.c,534 :: 		
0x072F	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,535 :: 		
0x0730	0x0AF0      	INCF       R0, 1
;__Lib_MathDouble.c,536 :: 		
0x0731	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,537 :: 		
0x0732	0x0AF1      	INCF       R1, 1
;__Lib_MathDouble.c,538 :: 		
0x0733	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,539 :: 		
0x0734	0x0AF2      	INCF       R2, 1
;__Lib_MathDouble.c,540 :: 		
0x0735	0x3080      	MOVLW      128
;__Lib_MathDouble.c,541 :: 		
0x0736	0x06FA      	XORWF      R10, 1
;__Lib_MathDouble.c,542 :: 		
0x0737	0x2F40      	GOTO       JMPNRM32
;__Lib_MathDouble.c,543 :: 		
JMPNRMRND4032:
;__Lib_MathDouble.c,544 :: 		
0x0738	0x3001      	MOVLW      1
;__Lib_MathDouble.c,545 :: 		
0x0739	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,547 :: 		
0x073A	0x252D      	CALL       _NRM4032
;__Lib_MathDouble.c,549 :: 		
0x073B	0x2F4A      	GOTO       ADD32EEE
;__Lib_MathDouble.c,550 :: 		
JMPNRM4032:
;__Lib_MathDouble.c,551 :: 		
0x073C	0x3002      	MOVLW      2
;__Lib_MathDouble.c,552 :: 		
0x073D	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,554 :: 		
0x073E	0x252D      	CALL       _NRM4032
;__Lib_MathDouble.c,556 :: 		
0x073F	0x2F4A      	GOTO       ADD32EEE
;__Lib_MathDouble.c,557 :: 		
JMPNRM32:
;__Lib_MathDouble.c,558 :: 		
0x0740	0x3004      	MOVLW      4
;__Lib_MathDouble.c,559 :: 		
0x0741	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,561 :: 		
0x0742	0x2622      	CALL       _NRM3232
;__Lib_MathDouble.c,563 :: 		
0x0743	0x2F4A      	GOTO       ADD32EEE
;__Lib_MathDouble.c,564 :: 		
ADD_JMPSETFOV32:
;__Lib_MathDouble.c,565 :: 		
0x0744	0x3008      	MOVLW      8
;__Lib_MathDouble.c,566 :: 		
0x0745	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,568 :: 		
0x0746	0x2315      	CALL       _SETFOV32
;__Lib_MathDouble.c,570 :: 		
0x0747	0x2F4A      	GOTO       ADD32EEE
;__Lib_MathDouble.c,571 :: 		
JMPEEE:
;__Lib_MathDouble.c,572 :: 		
0x0748	0x3000      	MOVLW      0
;__Lib_MathDouble.c,573 :: 		
0x0749	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,574 :: 		
ADD32EEE:
;__Lib_MathDouble.c,575 :: 		
0x074A	0x0000      	NOP
;__Lib_MathDouble.c,583 :: 		
L_end_Add_32x32_FP:
0x074B	0x0008      	RETURN
; end of _Add_32x32_FP
_send_command:
;oled_control.c,222 :: 		void send_command (char oled_command) {
;oled_control.c,223 :: 		Soft_I2C_Start();
0x074C	0x2003      	CALL       _Soft_I2C_Start
;oled_control.c,224 :: 		Soft_I2C_Write(led_addr);         // device addres
0x074D	0x002A      	MOVLB      10
0x074E	0x083A      	MOVF       oled_control_led_addr, 0
0x074F	0x002C      	MOVLB      12
0x0750	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x0751	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,225 :: 		Soft_I2C_Write(128);              // 128 - command, 192 - data
0x0752	0x3080      	MOVLW      128
0x0753	0x002C      	MOVLB      12
0x0754	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x0755	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,226 :: 		Soft_I2C_Write(oled_command);
0x0756	0x002B      	MOVLB      11
0x0757	0x086B      	MOVF       FARG_send_command_oled_command, 0
0x0758	0x002C      	MOVLB      12
0x0759	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x075A	0x2022      	CALL       _Soft_I2C_Write
;oled_control.c,227 :: 		Soft_I2C_Stop();
0x075B	0x2075      	CALL       _Soft_I2C_Stop
;oled_control.c,228 :: 		}
L_end_send_command:
0x075C	0x0008      	RETURN
; end of _send_command
_VDelay_ms:
;__Lib_Delays.c,82 :: 		void VDelay_ms(unsigned Time_ms){
;__Lib_Delays.c,84 :: 		NumberOfCyc = Clock_kHz()>>2; // this will be done by compiler, no asm will be genereated except that for assignment;
0x075D	0x30A0      	MOVLW      160
0x075E	0x002C      	MOVLB      12
0x075F	0x00A0      	MOVWF      VDelay_ms_NumberOfCyc_L0
0x0760	0x300F      	MOVLW      15
0x0761	0x00A1      	MOVWF      VDelay_ms_NumberOfCyc_L0+1
0x0762	0x01A2      	CLRF       VDelay_ms_NumberOfCyc_L0+2
0x0763	0x01A3      	CLRF       VDelay_ms_NumberOfCyc_L0+3
;__Lib_Delays.c,85 :: 		NumberOfCyc *= Time_ms;
0x0764	0x30A0      	MOVLW      160
0x0765	0x00F0      	MOVWF      R0
0x0766	0x300F      	MOVLW      15
0x0767	0x00F1      	MOVWF      R1
0x0768	0x3000      	MOVLW      0
0x0769	0x00F2      	MOVWF      R2
0x076A	0x3000      	MOVLW      0
0x076B	0x00F3      	MOVWF      R3
0x076C	0x002B      	MOVLB      11
0x076D	0x086B      	MOVF       FARG_VDelay_ms_Time_ms, 0
0x076E	0x00F4      	MOVWF      R4
0x076F	0x086C      	MOVF       FARG_VDelay_ms_Time_ms+1, 0
0x0770	0x00F5      	MOVWF      R5
0x0771	0x01F6      	CLRF       R6
0x0772	0x01F7      	CLRF       R7
0x0773	0x233D      	CALL       _Mul_32x32_U
0x0774	0x0870      	MOVF       R0, 0
0x0775	0x002C      	MOVLB      12
0x0776	0x00A0      	MOVWF      VDelay_ms_NumberOfCyc_L0
0x0777	0x0871      	MOVF       R1, 0
0x0778	0x00A1      	MOVWF      VDelay_ms_NumberOfCyc_L0+1
0x0779	0x0872      	MOVF       R2, 0
0x077A	0x00A2      	MOVWF      VDelay_ms_NumberOfCyc_L0+2
0x077B	0x0873      	MOVF       R3, 0
0x077C	0x00A3      	MOVWF      VDelay_ms_NumberOfCyc_L0+3
;__Lib_Delays.c,86 :: 		if (NumberOfCyc < 690)
0x077D	0x3000      	MOVLW      0
0x077E	0x0273      	SUBWF      R3, 0
0x077F	0x1D03      	BTFSS      STATUS, 2
0x0780	0x2F8B      	GOTO       L__VDelay_ms38
0x0781	0x3000      	MOVLW      0
0x0782	0x0272      	SUBWF      R2, 0
0x0783	0x1D03      	BTFSS      STATUS, 2
0x0784	0x2F8B      	GOTO       L__VDelay_ms38
0x0785	0x3002      	MOVLW      2
0x0786	0x0271      	SUBWF      R1, 0
0x0787	0x1D03      	BTFSS      STATUS, 2
0x0788	0x2F8B      	GOTO       L__VDelay_ms38
0x0789	0x30B2      	MOVLW      178
0x078A	0x0270      	SUBWF      R0, 0
L__VDelay_ms38:
0x078B	0x1803      	BTFSC      STATUS, 0
0x078C	0x2F8E      	GOTO       L_VDelay_ms15
;__Lib_Delays.c,87 :: 		return;
0x078D	0x2FBD      	GOTO       L_end_VDelay_ms
L_VDelay_ms15:
;__Lib_Delays.c,88 :: 		NumberOfCyc -= 690;
0x078E	0x30B2      	MOVLW      178
0x078F	0x02A0      	SUBWF      VDelay_ms_NumberOfCyc_L0, 1
0x0790	0x3002      	MOVLW      2
0x0791	0x3BA1      	SUBWFB     VDelay_ms_NumberOfCyc_L0+1, 1
0x0792	0x3000      	MOVLW      0
0x0793	0x3BA2      	SUBWFB     VDelay_ms_NumberOfCyc_L0+2, 1
0x0794	0x3BA3      	SUBWFB     VDelay_ms_NumberOfCyc_L0+3, 1
;__Lib_Delays.c,89 :: 		NumberOfCyc =  NumberOfCyc >> 5; // Dec and While below take around 32 instructions
0x0795	0x3005      	MOVLW      5
0x0796	0x00F0      	MOVWF      R0
0x0797	0x0870      	MOVF       R0, 0
L__VDelay_ms39:
0x0798	0x1903      	BTFSC      STATUS, 2
0x0799	0x2FA0      	GOTO       L__VDelay_ms40
0x079A	0x36A3      	LSRF       VDelay_ms_NumberOfCyc_L0+3, 1
0x079B	0x0CA2      	RRF        VDelay_ms_NumberOfCyc_L0+2, 1
0x079C	0x0CA1      	RRF        VDelay_ms_NumberOfCyc_L0+1, 1
0x079D	0x0CA0      	RRF        VDelay_ms_NumberOfCyc_L0, 1
0x079E	0x3EFF      	ADDLW      255
0x079F	0x2F98      	GOTO       L__VDelay_ms39
L__VDelay_ms40:
;__Lib_Delays.c,90 :: 		while (NumberOfCyc--)
L_VDelay_ms16:
0x07A0	0x0820      	MOVF       VDelay_ms_NumberOfCyc_L0, 0
0x07A1	0x00F0      	MOVWF      R0
0x07A2	0x0821      	MOVF       VDelay_ms_NumberOfCyc_L0+1, 0
0x07A3	0x00F1      	MOVWF      R1
0x07A4	0x0822      	MOVF       VDelay_ms_NumberOfCyc_L0+2, 0
0x07A5	0x00F2      	MOVWF      R2
0x07A6	0x0823      	MOVF       VDelay_ms_NumberOfCyc_L0+3, 0
0x07A7	0x00F3      	MOVWF      R3
0x07A8	0x3001      	MOVLW      1
0x07A9	0x02A0      	SUBWF      VDelay_ms_NumberOfCyc_L0, 1
0x07AA	0x3000      	MOVLW      0
0x07AB	0x3BA1      	SUBWFB     VDelay_ms_NumberOfCyc_L0+1, 1
0x07AC	0x3BA2      	SUBWFB     VDelay_ms_NumberOfCyc_L0+2, 1
0x07AD	0x3BA3      	SUBWFB     VDelay_ms_NumberOfCyc_L0+3, 1
0x07AE	0x0870      	MOVF       R0, 0
0x07AF	0x0471      	IORWF       R1, 0
0x07B0	0x0472      	IORWF       R2, 0
0x07B1	0x0473      	IORWF       R3, 0
0x07B2	0x1903      	BTFSC      STATUS, 2
0x07B3	0x2FBD      	GOTO       L_VDelay_ms17
;__Lib_Delays.c,92 :: 		asm nop;
0x07B4	0x0000      	NOP
;__Lib_Delays.c,93 :: 		asm nop;
0x07B5	0x0000      	NOP
;__Lib_Delays.c,94 :: 		asm nop;
0x07B6	0x0000      	NOP
;__Lib_Delays.c,95 :: 		asm nop;
0x07B7	0x0000      	NOP
;__Lib_Delays.c,96 :: 		asm nop;
0x07B8	0x0000      	NOP
;__Lib_Delays.c,97 :: 		asm nop;
0x07B9	0x0000      	NOP
;__Lib_Delays.c,98 :: 		asm nop;
0x07BA	0x0000      	NOP
;__Lib_Delays.c,99 :: 		asm nop;
0x07BB	0x0000      	NOP
;__Lib_Delays.c,100 :: 		}
0x07BC	0x2FA0      	GOTO       L_VDelay_ms16
L_VDelay_ms17:
;__Lib_Delays.c,101 :: 		}
L_end_VDelay_ms:
0x07BD	0x0008      	RETURN
; end of _VDelay_ms
_Byte2Double:
;__Lib_MathDouble.c,1769 :: 		
;__Lib_MathDouble.c,1776 :: 		
0x07BE	0x0020      	MOVLB      0
;__Lib_MathDouble.c,1778 :: 		
0x07BF	0x0870      	MOVF       R0, 0
;__Lib_MathDouble.c,1779 :: 		
0x07C0	0x00F8      	MOVWF      R8
;__Lib_MathDouble.c,1781 :: 		
0x07C1	0x01FB      	CLRF       R11
;__Lib_MathDouble.c,1782 :: 		
0x07C2	0x01FC      	CLRF       R12
;__Lib_MathDouble.c,1784 :: 		
0x07C3	0x309E      	MOVLW      158
;__Lib_MathDouble.c,1785 :: 		
0x07C4	0x00F3      	MOVWF      R3
;__Lib_MathDouble.c,1786 :: 		
0x07C5	0x01FA      	CLRF       R10
;__Lib_MathDouble.c,1787 :: 		
0x07C6	0x01F2      	CLRF       R2
;__Lib_MathDouble.c,1788 :: 		
0x07C7	0x01F1      	CLRF       R1
;__Lib_MathDouble.c,1789 :: 		
0x07C8	0x01F0      	CLRF       R0
;__Lib_MathDouble.c,1790 :: 		
0x07C9	0x3002      	MOVLW      2
;__Lib_MathDouble.c,1791 :: 		
0x07CA	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,1793 :: 		
0x07CB	0x252D      	CALL       _NRM4032
;__Lib_MathDouble.c,1794 :: 		
L_end_Byte2Double:
0x07CC	0x0008      	RETURN
; end of _Byte2Double
_Mul_16x16_U:
;__Lib_Math.c,136 :: 		
;__Lib_Math.c,143 :: 		
0x07CD	0x0020      	MOVLB      0
;__Lib_Math.c,144 :: 		
0x07CE	0x01FB      	CLRF       R11
;__Lib_Math.c,145 :: 		
0x07CF	0x01FA      	CLRF       R10
;__Lib_Math.c,146 :: 		
0x07D0	0x01F9      	CLRF       R9
;__Lib_Math.c,147 :: 		
0x07D1	0x3080      	MOVLW      128
;__Lib_Math.c,148 :: 		
0x07D2	0x00F8      	MOVWF      R8
;__Lib_Math.c,149 :: 		
0x07D3	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,150 :: 		
0x07D4	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,151 :: 		
0x07D5	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,152 :: 		
0x07D6	0x2FE0      	GOTO       $+10
;__Lib_Math.c,153 :: 		
0x07D7	0x0874      	MOVF       R4, 0
;__Lib_Math.c,154 :: 		
0x07D8	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,155 :: 		
0x07D9	0x0875      	MOVF       R5, 0
;__Lib_Math.c,156 :: 		
0x07DA	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,157 :: 		
0x07DB	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,158 :: 		
0x07DC	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,159 :: 		
0x07DD	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,160 :: 		
0x07DE	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,161 :: 		
0x07DF	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,162 :: 		
0x07E0	0x1FF0      	BTFSS      R0, 7
;__Lib_Math.c,163 :: 		
0x07E1	0x2FE8      	GOTO       $+7
;__Lib_Math.c,164 :: 		
0x07E2	0x0874      	MOVF       R4, 0
;__Lib_Math.c,165 :: 		
0x07E3	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,166 :: 		
0x07E4	0x0875      	MOVF       R5, 0
;__Lib_Math.c,167 :: 		
0x07E5	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,168 :: 		
0x07E6	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,169 :: 		
0x07E7	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,170 :: 		
0x07E8	0x0CFB      	RRF        R11, 1
;__Lib_Math.c,171 :: 		
0x07E9	0x0CFA      	RRF        R10, 1
;__Lib_Math.c,172 :: 		
0x07EA	0x0CF9      	RRF        R9, 1
;__Lib_Math.c,173 :: 		
0x07EB	0x0CF8      	RRF        R8, 1
;__Lib_Math.c,174 :: 		
0x07EC	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,175 :: 		
0x07ED	0x2FD3      	GOTO       $-26
;__Lib_Math.c,176 :: 		
0x07EE	0x087B      	MOVF       R11, 0
;__Lib_Math.c,177 :: 		
0x07EF	0x00F3      	MOVWF      R3
;__Lib_Math.c,178 :: 		
0x07F0	0x087A      	MOVF       R10, 0
;__Lib_Math.c,179 :: 		
0x07F1	0x00F2      	MOVWF      R2
;__Lib_Math.c,180 :: 		
0x07F2	0x0879      	MOVF       R9, 0
;__Lib_Math.c,181 :: 		
0x07F3	0x00F1      	MOVWF      R1
;__Lib_Math.c,182 :: 		
0x07F4	0x0878      	MOVF       R8, 0
;__Lib_Math.c,183 :: 		
0x07F5	0x00F0      	MOVWF      R0
;__Lib_Math.c,186 :: 		
L_end_Mul_16x16_U:
0x07F6	0x0008      	RETURN
; end of _Mul_16x16_U
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x07F7	0x0012      	MOVIW      FSR0++ 
;__Lib_System.c,75 :: 		
0x07F8	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x07F9	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x07FA	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x07FB	0x2FF7      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x07FC	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x07FD	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x07FE	0x2FF7      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x07FF	0x0008      	RETURN
; end of ___CC2DW
_lcd_ind:
;main.c,696 :: 		void lcd_ind() {
;main.c,698 :: 		asm CLRWDT;
0x0800	0x0064      	CLRWDT
;main.c,700 :: 		work_int = 0;
0x0801	0x002A      	MOVLB      10
0x0802	0x01D4      	CLRF       _work_int
0x0803	0x01D5      	CLRF       _work_int+1
;main.c,701 :: 		if(ind.B0) work_int += Ind1;
0x0804	0x0028      	MOVLB      8
0x0805	0x1C31      	BTFSS      main_ind, 0
0x0806	0x280C      	GOTO       L_lcd_ind422
0x0807	0x002A      	MOVLB      10
0x0808	0x0852      	MOVF       _Ind1, 0
0x0809	0x07D4      	ADDWF      _work_int, 1
0x080A	0x0853      	MOVF       _Ind1+1, 0
0x080B	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind422:
;main.c,702 :: 		if(ind.B1) work_int += Ind2;
0x080C	0x0028      	MOVLB      8
0x080D	0x1CB1      	BTFSS      main_ind, 1
0x080E	0x2814      	GOTO       L_lcd_ind423
0x080F	0x002A      	MOVLB      10
0x0810	0x085A      	MOVF       _Ind2, 0
0x0811	0x07D4      	ADDWF      _work_int, 1
0x0812	0x085B      	MOVF       _Ind2+1, 0
0x0813	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind423:
;main.c,703 :: 		if(ind.B2) work_int += Ind3;
0x0814	0x0028      	MOVLB      8
0x0815	0x1D31      	BTFSS      main_ind, 2
0x0816	0x281C      	GOTO       L_lcd_ind424
0x0817	0x002A      	MOVLB      10
0x0818	0x0858      	MOVF       _Ind3, 0
0x0819	0x07D4      	ADDWF      _work_int, 1
0x081A	0x0859      	MOVF       _Ind3+1, 0
0x081B	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind424:
;main.c,704 :: 		if(ind.B3) work_int += Ind4;
0x081C	0x0028      	MOVLB      8
0x081D	0x1DB1      	BTFSS      main_ind, 3
0x081E	0x2824      	GOTO       L_lcd_ind425
0x081F	0x002A      	MOVLB      10
0x0820	0x0856      	MOVF       _Ind4, 0
0x0821	0x07D4      	ADDWF      _work_int, 1
0x0822	0x0857      	MOVF       _Ind4+1, 0
0x0823	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind425:
;main.c,705 :: 		if(ind.B4) work_int += Ind5;
0x0824	0x0028      	MOVLB      8
0x0825	0x1E31      	BTFSS      main_ind, 4
0x0826	0x282C      	GOTO       L_lcd_ind426
0x0827	0x002A      	MOVLB      10
0x0828	0x0860      	MOVF       _Ind5, 0
0x0829	0x07D4      	ADDWF      _work_int, 1
0x082A	0x0861      	MOVF       _Ind5+1, 0
0x082B	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind426:
;main.c,706 :: 		if(ind.B5) work_int += Ind6;
0x082C	0x0028      	MOVLB      8
0x082D	0x1EB1      	BTFSS      main_ind, 5
0x082E	0x2834      	GOTO       L_lcd_ind427
0x082F	0x002A      	MOVLB      10
0x0830	0x086B      	MOVF       _Ind6, 0
0x0831	0x07D4      	ADDWF      _work_int, 1
0x0832	0x086C      	MOVF       _Ind6+1, 0
0x0833	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind427:
;main.c,707 :: 		if(ind.B6) work_int += Ind7;
0x0834	0x0028      	MOVLB      8
0x0835	0x1F31      	BTFSS      main_ind, 6
0x0836	0x283C      	GOTO       L_lcd_ind428
0x0837	0x002A      	MOVLB      10
0x0838	0x0869      	MOVF       _Ind7, 0
0x0839	0x07D4      	ADDWF      _work_int, 1
0x083A	0x086A      	MOVF       _Ind7+1, 0
0x083B	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind428:
0x083C	0x002A      	MOVLB      10
;main.c,708 :: 		if(work_int>9999) {    // more then 9999 nH
0x083D	0x3080      	MOVLW      128
0x083E	0x3A27      	XORLW      39
0x083F	0x00F0      	MOVWF      R0
0x0840	0x3080      	MOVLW      128
0x0841	0x0655      	XORWF      _work_int+1, 0
0x0842	0x0270      	SUBWF      R0, 0
0x0843	0x1D03      	BTFSS      STATUS, 2
0x0844	0x2847      	GOTO       L__lcd_ind756
0x0845	0x0854      	MOVF       _work_int, 0
0x0846	0x3C0F      	SUBLW      15
L__lcd_ind756:
0x0847	0x1803      	BTFSC      STATUS, 0
0x0848	0x286E      	GOTO       L_lcd_ind429
;main.c,709 :: 		work_int += 50; // round
0x0849	0x3032      	MOVLW      50
0x084A	0x0754      	ADDWF      _work_int, 0
0x084B	0x00F0      	MOVWF      R0
0x084C	0x3000      	MOVLW      0
0x084D	0x3D55      	ADDWFC     _work_int+1, 0
0x084E	0x00F1      	MOVWF      R1
0x084F	0x0870      	MOVF       R0, 0
0x0850	0x00D4      	MOVWF      _work_int
0x0851	0x0871      	MOVF       R1, 0
0x0852	0x00D5      	MOVWF      _work_int+1
;main.c,710 :: 		IntToStr(work_int, work_str);
0x0853	0x0870      	MOVF       R0, 0
0x0854	0x002C      	MOVLB      12
0x0855	0x00A4      	MOVWF      FARG_IntToStr_input
0x0856	0x0871      	MOVF       R1, 0
0x0857	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x0858	0x3062      	MOVLW      _work_str
0x0859	0x00A6      	MOVWF      FARG_IntToStr_output
0x085A	0x3005      	MOVLW      hi_addr(_work_str)
0x085B	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x085C	0x3180      	MOVLP      0
0x085D	0x2587      	CALL       _IntToStr
0x085E	0x3188      	MOVLP      8
;main.c,711 :: 		work_str_2[0] = work_str[1];
0x085F	0x002A      	MOVLB      10
0x0860	0x0863      	MOVF       _work_str+1, 0
0x0861	0x002B      	MOVLB      11
0x0862	0x00A0      	MOVWF      _work_str_2
;main.c,712 :: 		work_str_2[1] = work_str[2];
0x0863	0x002A      	MOVLB      10
0x0864	0x0864      	MOVF       _work_str+2, 0
0x0865	0x002B      	MOVLB      11
0x0866	0x00A1      	MOVWF      _work_str_2+1
;main.c,713 :: 		work_str_2[2] = '.';
0x0867	0x302E      	MOVLW      46
0x0868	0x00A2      	MOVWF      _work_str_2+2
;main.c,714 :: 		work_str_2[3] = work_str[3];
0x0869	0x002A      	MOVLB      10
0x086A	0x0865      	MOVF       _work_str+3, 0
0x086B	0x002B      	MOVLB      11
0x086C	0x00A3      	MOVWF      _work_str_2+3
;main.c,715 :: 		}
0x086D	0x28A3      	GOTO       L_lcd_ind430
L_lcd_ind429:
;main.c,717 :: 		IntToStr(work_int, work_str);
0x086E	0x002A      	MOVLB      10
0x086F	0x0854      	MOVF       _work_int, 0
0x0870	0x002C      	MOVLB      12
0x0871	0x00A4      	MOVWF      FARG_IntToStr_input
0x0872	0x002A      	MOVLB      10
0x0873	0x0855      	MOVF       _work_int+1, 0
0x0874	0x002C      	MOVLB      12
0x0875	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x0876	0x3062      	MOVLW      _work_str
0x0877	0x00A6      	MOVWF      FARG_IntToStr_output
0x0878	0x3005      	MOVLW      hi_addr(_work_str)
0x0879	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x087A	0x3180      	MOVLP      0
0x087B	0x2587      	CALL       _IntToStr
0x087C	0x3188      	MOVLP      8
;main.c,718 :: 		if(work_str[2] != ' ') work_str_2[0] = work_str[2]; else work_str_2[0] = '0';
0x087D	0x002A      	MOVLB      10
0x087E	0x0864      	MOVF       _work_str+2, 0
0x087F	0x3A20      	XORLW      32
0x0880	0x1903      	BTFSC      STATUS, 2
0x0881	0x2886      	GOTO       L_lcd_ind431
0x0882	0x0864      	MOVF       _work_str+2, 0
0x0883	0x002B      	MOVLB      11
0x0884	0x00A0      	MOVWF      _work_str_2
0x0885	0x2889      	GOTO       L_lcd_ind432
L_lcd_ind431:
0x0886	0x002B      	MOVLB      11
0x0887	0x3030      	MOVLW      48
0x0888	0x00A0      	MOVWF      _work_str_2
L_lcd_ind432:
;main.c,719 :: 		work_str_2[1] = '.';
0x0889	0x302E      	MOVLW      46
0x088A	0x00A1      	MOVWF      _work_str_2+1
;main.c,720 :: 		if(work_str[3] != ' ') work_str_2[2] = work_str[3]; else work_str_2[2] = '0';
0x088B	0x002A      	MOVLB      10
0x088C	0x0865      	MOVF       _work_str+3, 0
0x088D	0x3A20      	XORLW      32
0x088E	0x1903      	BTFSC      STATUS, 2
0x088F	0x2894      	GOTO       L_lcd_ind433
0x0890	0x0865      	MOVF       _work_str+3, 0
0x0891	0x002B      	MOVLB      11
0x0892	0x00A2      	MOVWF      _work_str_2+2
0x0893	0x2897      	GOTO       L_lcd_ind434
L_lcd_ind433:
0x0894	0x002B      	MOVLB      11
0x0895	0x3030      	MOVLW      48
0x0896	0x00A2      	MOVWF      _work_str_2+2
L_lcd_ind434:
;main.c,721 :: 		if(work_str[4] != ' ') work_str_2[3] = work_str[4]; else work_str_2[3] = '0';
0x0897	0x002A      	MOVLB      10
0x0898	0x0866      	MOVF       _work_str+4, 0
0x0899	0x3A20      	XORLW      32
0x089A	0x1903      	BTFSC      STATUS, 2
0x089B	0x28A0      	GOTO       L_lcd_ind435
0x089C	0x0866      	MOVF       _work_str+4, 0
0x089D	0x002B      	MOVLB      11
0x089E	0x00A3      	MOVWF      _work_str_2+3
0x089F	0x28A3      	GOTO       L_lcd_ind436
L_lcd_ind435:
0x08A0	0x002B      	MOVLB      11
0x08A1	0x3030      	MOVLW      48
0x08A2	0x00A3      	MOVWF      _work_str_2+3
L_lcd_ind436:
;main.c,722 :: 		}
L_lcd_ind430:
;main.c,723 :: 		if(type==4 | type==5) {  // 128*64 OLED
0x08A3	0x002A      	MOVLB      10
0x08A4	0x086D      	MOVF       _type, 0
0x08A5	0x3A04      	XORLW      4
0x08A6	0x3001      	MOVLW      1
0x08A7	0x1D03      	BTFSS      STATUS, 2
0x08A8	0x3000      	MOVLW      0
0x08A9	0x00F1      	MOVWF      R1
0x08AA	0x086D      	MOVF       _type, 0
0x08AB	0x3A05      	XORLW      5
0x08AC	0x3001      	MOVLW      1
0x08AD	0x1D03      	BTFSS      STATUS, 2
0x08AE	0x3000      	MOVLW      0
0x08AF	0x00F0      	MOVWF      R0
0x08B0	0x0871      	MOVF       R1, 0
0x08B1	0x04F0      	IORWF       R0, 1
0x08B2	0x1903      	BTFSC      STATUS, 2
0x08B3	0x28ED      	GOTO       L_lcd_ind437
;main.c,724 :: 		if(SW==1) column = 4; else column = 6;
0x08B4	0x0028      	MOVLB      8
0x08B5	0x0847      	MOVF       main_SW, 0
0x08B6	0x3A01      	XORLW      1
0x08B7	0x1D03      	BTFSS      STATUS, 2
0x08B8	0x28BD      	GOTO       L_lcd_ind438
0x08B9	0x3004      	MOVLW      4
0x08BA	0x002B      	MOVLB      11
0x08BB	0x00EB      	MOVWF      lcd_ind_column_L0
0x08BC	0x28C0      	GOTO       L_lcd_ind439
L_lcd_ind438:
0x08BD	0x002B      	MOVLB      11
0x08BE	0x3006      	MOVLW      6
0x08BF	0x00EB      	MOVWF      lcd_ind_column_L0
L_lcd_ind439:
;main.c,725 :: 		led_wr_str (column, 16, "L=", 2);
0x08C0	0x086B      	MOVF       lcd_ind_column_L0, 0
0x08C1	0x002C      	MOVLB      12
0x08C2	0x00A4      	MOVWF      FARG_led_wr_str_col
0x08C3	0x3010      	MOVLW      16
0x08C4	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x08C5	0x303C      	MOVLW      ?lstr81_main
0x08C6	0x00A6      	MOVWF      FARG_led_wr_str_str
0x08C7	0x3004      	MOVLW      hi_addr(?lstr81_main)
0x08C8	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x08C9	0x3002      	MOVLW      2
0x08CA	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x08CB	0x3180      	MOVLP      0
0x08CC	0x24B4      	CALL       _led_wr_str
0x08CD	0x3188      	MOVLP      8
;main.c,726 :: 		led_wr_str (column, 16+6*12, "uH", 2);
0x08CE	0x002B      	MOVLB      11
0x08CF	0x086B      	MOVF       lcd_ind_column_L0, 0
0x08D0	0x002C      	MOVLB      12
0x08D1	0x00A4      	MOVWF      FARG_led_wr_str_col
0x08D2	0x3058      	MOVLW      88
0x08D3	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x08D4	0x3039      	MOVLW      ?lstr82_main
0x08D5	0x00A6      	MOVWF      FARG_led_wr_str_str
0x08D6	0x3004      	MOVLW      hi_addr(?lstr82_main)
0x08D7	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x08D8	0x3002      	MOVLW      2
0x08D9	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x08DA	0x3180      	MOVLP      0
0x08DB	0x24B4      	CALL       _led_wr_str
0x08DC	0x3188      	MOVLP      8
;main.c,727 :: 		led_wr_str (column, 16+2*12, work_str_2, 4);
0x08DD	0x002B      	MOVLB      11
0x08DE	0x086B      	MOVF       lcd_ind_column_L0, 0
0x08DF	0x002C      	MOVLB      12
0x08E0	0x00A4      	MOVWF      FARG_led_wr_str_col
0x08E1	0x3028      	MOVLW      40
0x08E2	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x08E3	0x30A0      	MOVLW      _work_str_2
0x08E4	0x00A6      	MOVWF      FARG_led_wr_str_str
0x08E5	0x3005      	MOVLW      hi_addr(_work_str_2)
0x08E6	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x08E7	0x3004      	MOVLW      4
0x08E8	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x08E9	0x3180      	MOVLP      0
0x08EA	0x24B4      	CALL       _led_wr_str
0x08EB	0x3188      	MOVLP      8
;main.c,728 :: 		}
0x08EC	0x2972      	GOTO       L_lcd_ind440
L_lcd_ind437:
;main.c,729 :: 		else if(type==2 | type==3) {// 128*32 OLED
0x08ED	0x002A      	MOVLB      10
0x08EE	0x086D      	MOVF       _type, 0
0x08EF	0x3A02      	XORLW      2
0x08F0	0x3001      	MOVLW      1
0x08F1	0x1D03      	BTFSS      STATUS, 2
0x08F2	0x3000      	MOVLW      0
0x08F3	0x00F1      	MOVWF      R1
0x08F4	0x086D      	MOVF       _type, 0
0x08F5	0x3A03      	XORLW      3
0x08F6	0x3001      	MOVLW      1
0x08F7	0x1D03      	BTFSS      STATUS, 2
0x08F8	0x3000      	MOVLW      0
0x08F9	0x00F0      	MOVWF      R0
0x08FA	0x0871      	MOVF       R1, 0
0x08FB	0x04F0      	IORWF       R0, 1
0x08FC	0x1903      	BTFSC      STATUS, 2
0x08FD	0x2936      	GOTO       L_lcd_ind441
;main.c,730 :: 		if(SW==1) column = 0; else column = 1;
0x08FE	0x0028      	MOVLB      8
0x08FF	0x0847      	MOVF       main_SW, 0
0x0900	0x3A01      	XORLW      1
0x0901	0x1D03      	BTFSS      STATUS, 2
0x0902	0x2906      	GOTO       L_lcd_ind442
0x0903	0x002B      	MOVLB      11
0x0904	0x01EB      	CLRF       lcd_ind_column_L0
0x0905	0x2909      	GOTO       L_lcd_ind443
L_lcd_ind442:
0x0906	0x002B      	MOVLB      11
0x0907	0x3001      	MOVLW      1
0x0908	0x00EB      	MOVWF      lcd_ind_column_L0
L_lcd_ind443:
;main.c,731 :: 		led_wr_str (column, 9, "L=", 2);
0x0909	0x086B      	MOVF       lcd_ind_column_L0, 0
0x090A	0x002C      	MOVLB      12
0x090B	0x00A4      	MOVWF      FARG_led_wr_str_col
0x090C	0x3009      	MOVLW      9
0x090D	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x090E	0x3036      	MOVLW      ?lstr83_main
0x090F	0x00A6      	MOVWF      FARG_led_wr_str_str
0x0910	0x3004      	MOVLW      hi_addr(?lstr83_main)
0x0911	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x0912	0x3002      	MOVLW      2
0x0913	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0914	0x3180      	MOVLP      0
0x0915	0x24B4      	CALL       _led_wr_str
0x0916	0x3188      	MOVLP      8
;main.c,732 :: 		led_wr_str (column, 15, "uH", 2);
0x0917	0x002B      	MOVLB      11
0x0918	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0919	0x002C      	MOVLB      12
0x091A	0x00A4      	MOVWF      FARG_led_wr_str_col
0x091B	0x300F      	MOVLW      15
0x091C	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x091D	0x3044      	MOVLW      ?lstr84_main
0x091E	0x00A6      	MOVWF      FARG_led_wr_str_str
0x091F	0x3004      	MOVLW      hi_addr(?lstr84_main)
0x0920	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x0921	0x3002      	MOVLW      2
0x0922	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0923	0x3180      	MOVLP      0
0x0924	0x24B4      	CALL       _led_wr_str
0x0925	0x3188      	MOVLP      8
;main.c,733 :: 		led_wr_str (column, 11, work_str_2, 4);
0x0926	0x002B      	MOVLB      11
0x0927	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0928	0x002C      	MOVLB      12
0x0929	0x00A4      	MOVWF      FARG_led_wr_str_col
0x092A	0x300B      	MOVLW      11
0x092B	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x092C	0x30A0      	MOVLW      _work_str_2
0x092D	0x00A6      	MOVWF      FARG_led_wr_str_str
0x092E	0x3005      	MOVLW      hi_addr(_work_str_2)
0x092F	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x0930	0x3004      	MOVLW      4
0x0931	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0932	0x3180      	MOVLP      0
0x0933	0x24B4      	CALL       _led_wr_str
0x0934	0x3188      	MOVLP      8
;main.c,734 :: 		}
0x0935	0x2972      	GOTO       L_lcd_ind444
L_lcd_ind441:
;main.c,735 :: 		else if(type==1) { //  1602 LCD
0x0936	0x002A      	MOVLB      10
0x0937	0x086D      	MOVF       _type, 0
0x0938	0x3A01      	XORLW      1
0x0939	0x1D03      	BTFSS      STATUS, 2
0x093A	0x2972      	GOTO       L_lcd_ind445
;main.c,736 :: 		if(SW==1) column = 0; else column = 1;
0x093B	0x0028      	MOVLB      8
0x093C	0x0847      	MOVF       main_SW, 0
0x093D	0x3A01      	XORLW      1
0x093E	0x1D03      	BTFSS      STATUS, 2
0x093F	0x2943      	GOTO       L_lcd_ind446
0x0940	0x002B      	MOVLB      11
0x0941	0x01EB      	CLRF       lcd_ind_column_L0
0x0942	0x2946      	GOTO       L_lcd_ind447
L_lcd_ind446:
0x0943	0x002B      	MOVLB      11
0x0944	0x3001      	MOVLW      1
0x0945	0x00EB      	MOVWF      lcd_ind_column_L0
L_lcd_ind447:
;main.c,737 :: 		led_wr_str (column, 9, "L=", 2);
0x0946	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0947	0x002C      	MOVLB      12
0x0948	0x00A4      	MOVWF      FARG_led_wr_str_col
0x0949	0x3009      	MOVLW      9
0x094A	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x094B	0x3041      	MOVLW      ?lstr85_main
0x094C	0x00A6      	MOVWF      FARG_led_wr_str_str
0x094D	0x3004      	MOVLW      hi_addr(?lstr85_main)
0x094E	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x094F	0x3002      	MOVLW      2
0x0950	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0951	0x3180      	MOVLP      0
0x0952	0x24B4      	CALL       _led_wr_str
0x0953	0x3188      	MOVLP      8
;main.c,738 :: 		led_wr_str (column, 15, "u", 1);
0x0954	0x002B      	MOVLB      11
0x0955	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0956	0x002C      	MOVLB      12
0x0957	0x00A4      	MOVWF      FARG_led_wr_str_col
0x0958	0x300F      	MOVLW      15
0x0959	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x095A	0x303F      	MOVLW      ?lstr86_main
0x095B	0x00A6      	MOVWF      FARG_led_wr_str_str
0x095C	0x3004      	MOVLW      hi_addr(?lstr86_main)
0x095D	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x095E	0x3001      	MOVLW      1
0x095F	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0960	0x3180      	MOVLP      0
0x0961	0x24B4      	CALL       _led_wr_str
0x0962	0x3188      	MOVLP      8
;main.c,739 :: 		led_wr_str (column, 11, work_str_2, 4);
0x0963	0x002B      	MOVLB      11
0x0964	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0965	0x002C      	MOVLB      12
0x0966	0x00A4      	MOVWF      FARG_led_wr_str_col
0x0967	0x300B      	MOVLW      11
0x0968	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x0969	0x30A0      	MOVLW      _work_str_2
0x096A	0x00A6      	MOVWF      FARG_led_wr_str_str
0x096B	0x3005      	MOVLW      hi_addr(_work_str_2)
0x096C	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x096D	0x3004      	MOVLW      4
0x096E	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x096F	0x3180      	MOVLP      0
0x0970	0x24B4      	CALL       _led_wr_str
0x0971	0x3188      	MOVLP      8
;main.c,740 :: 		}
L_lcd_ind445:
L_lcd_ind444:
L_lcd_ind440:
;main.c,742 :: 		asm CLRWDT;
0x0972	0x0064      	CLRWDT
;main.c,744 :: 		work_int = 0;
0x0973	0x002A      	MOVLB      10
0x0974	0x01D4      	CLRF       _work_int
0x0975	0x01D5      	CLRF       _work_int+1
;main.c,745 :: 		if(cap.B0) work_int += Cap1;
0x0976	0x0027      	MOVLB      7
0x0977	0x1C5B      	BTFSS      main_cap, 0
0x0978	0x297E      	GOTO       L_lcd_ind449
0x0979	0x002A      	MOVLB      10
0x097A	0x0848      	MOVF       _Cap1, 0
0x097B	0x07D4      	ADDWF      _work_int, 1
0x097C	0x0849      	MOVF       _Cap1+1, 0
0x097D	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind449:
;main.c,746 :: 		if(cap.B1) work_int += Cap2;
0x097E	0x0027      	MOVLB      7
0x097F	0x1CDB      	BTFSS      main_cap, 1
0x0980	0x2986      	GOTO       L_lcd_ind450
0x0981	0x002A      	MOVLB      10
0x0982	0x0846      	MOVF       _Cap2, 0
0x0983	0x07D4      	ADDWF      _work_int, 1
0x0984	0x0847      	MOVF       _Cap2+1, 0
0x0985	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind450:
;main.c,747 :: 		if(cap.B2) work_int += Cap3;
0x0986	0x0027      	MOVLB      7
0x0987	0x1D5B      	BTFSS      main_cap, 2
0x0988	0x298E      	GOTO       L_lcd_ind451
0x0989	0x002A      	MOVLB      10
0x098A	0x084E      	MOVF       _Cap3, 0
0x098B	0x07D4      	ADDWF      _work_int, 1
0x098C	0x084F      	MOVF       _Cap3+1, 0
0x098D	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind451:
;main.c,748 :: 		if(cap.B3) work_int += Cap4;
0x098E	0x0027      	MOVLB      7
0x098F	0x1DDB      	BTFSS      main_cap, 3
0x0990	0x2996      	GOTO       L_lcd_ind452
0x0991	0x002A      	MOVLB      10
0x0992	0x084C      	MOVF       _Cap4, 0
0x0993	0x07D4      	ADDWF      _work_int, 1
0x0994	0x084D      	MOVF       _Cap4+1, 0
0x0995	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind452:
;main.c,749 :: 		if(cap.B4) work_int += Cap5;
0x0996	0x0027      	MOVLB      7
0x0997	0x1E5B      	BTFSS      main_cap, 4
0x0998	0x299E      	GOTO       L_lcd_ind453
0x0999	0x002A      	MOVLB      10
0x099A	0x084A      	MOVF       _Cap5, 0
0x099B	0x07D4      	ADDWF      _work_int, 1
0x099C	0x084B      	MOVF       _Cap5+1, 0
0x099D	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind453:
;main.c,750 :: 		if(cap.B5) work_int += Cap6;
0x099E	0x0027      	MOVLB      7
0x099F	0x1EDB      	BTFSS      main_cap, 5
0x09A0	0x29A6      	GOTO       L_lcd_ind454
0x09A1	0x002A      	MOVLB      10
0x09A2	0x0844      	MOVF       _Cap6, 0
0x09A3	0x07D4      	ADDWF      _work_int, 1
0x09A4	0x0845      	MOVF       _Cap6+1, 0
0x09A5	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind454:
;main.c,751 :: 		if(cap.B6) work_int += Cap7;
0x09A6	0x0027      	MOVLB      7
0x09A7	0x1F5B      	BTFSS      main_cap, 6
0x09A8	0x29AE      	GOTO       L_lcd_ind455
0x09A9	0x002A      	MOVLB      10
0x09AA	0x0842      	MOVF       _Cap7, 0
0x09AB	0x07D4      	ADDWF      _work_int, 1
0x09AC	0x0843      	MOVF       _Cap7+1, 0
0x09AD	0x3DD5      	ADDWFC     _work_int+1, 1
L_lcd_ind455:
0x09AE	0x002A      	MOVLB      10
;main.c,752 :: 		IntToStr(work_int, work_str);
0x09AF	0x0854      	MOVF       _work_int, 0
0x09B0	0x002C      	MOVLB      12
0x09B1	0x00A4      	MOVWF      FARG_IntToStr_input
0x09B2	0x002A      	MOVLB      10
0x09B3	0x0855      	MOVF       _work_int+1, 0
0x09B4	0x002C      	MOVLB      12
0x09B5	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x09B6	0x3062      	MOVLW      _work_str
0x09B7	0x00A6      	MOVWF      FARG_IntToStr_output
0x09B8	0x3005      	MOVLW      hi_addr(_work_str)
0x09B9	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x09BA	0x3180      	MOVLP      0
0x09BB	0x2587      	CALL       _IntToStr
0x09BC	0x3188      	MOVLP      8
;main.c,753 :: 		work_str_2[0] = work_str[2];
0x09BD	0x002A      	MOVLB      10
0x09BE	0x0864      	MOVF       _work_str+2, 0
0x09BF	0x002B      	MOVLB      11
0x09C0	0x00A0      	MOVWF      _work_str_2
;main.c,754 :: 		work_str_2[1] = work_str[3];
0x09C1	0x002A      	MOVLB      10
0x09C2	0x0865      	MOVF       _work_str+3, 0
0x09C3	0x002B      	MOVLB      11
0x09C4	0x00A1      	MOVWF      _work_str_2+1
;main.c,755 :: 		work_str_2[2] = work_str[4];
0x09C5	0x002A      	MOVLB      10
0x09C6	0x0866      	MOVF       _work_str+4, 0
0x09C7	0x002B      	MOVLB      11
0x09C8	0x00A2      	MOVWF      _work_str_2+2
;main.c,756 :: 		work_str_2[3] = work_str[5];
0x09C9	0x002A      	MOVLB      10
0x09CA	0x0867      	MOVF       _work_str+5, 0
0x09CB	0x002B      	MOVLB      11
0x09CC	0x00A3      	MOVWF      _work_str_2+3
;main.c,758 :: 		if(type==4 | type==5) {  // 128*64 OLED
0x09CD	0x002A      	MOVLB      10
0x09CE	0x086D      	MOVF       _type, 0
0x09CF	0x3A04      	XORLW      4
0x09D0	0x3001      	MOVLW      1
0x09D1	0x1D03      	BTFSS      STATUS, 2
0x09D2	0x3000      	MOVLW      0
0x09D3	0x00F1      	MOVWF      R1
0x09D4	0x086D      	MOVF       _type, 0
0x09D5	0x3A05      	XORLW      5
0x09D6	0x3001      	MOVLW      1
0x09D7	0x1D03      	BTFSS      STATUS, 2
0x09D8	0x3000      	MOVLW      0
0x09D9	0x00F0      	MOVWF      R0
0x09DA	0x0871      	MOVF       R1, 0
0x09DB	0x04F0      	IORWF       R0, 1
0x09DC	0x1903      	BTFSC      STATUS, 2
0x09DD	0x2A17      	GOTO       L_lcd_ind456
;main.c,759 :: 		if(SW==1) column = 6; else column = 4;
0x09DE	0x0028      	MOVLB      8
0x09DF	0x0847      	MOVF       main_SW, 0
0x09E0	0x3A01      	XORLW      1
0x09E1	0x1D03      	BTFSS      STATUS, 2
0x09E2	0x29E7      	GOTO       L_lcd_ind457
0x09E3	0x3006      	MOVLW      6
0x09E4	0x002B      	MOVLB      11
0x09E5	0x00EB      	MOVWF      lcd_ind_column_L0
0x09E6	0x29EA      	GOTO       L_lcd_ind458
L_lcd_ind457:
0x09E7	0x002B      	MOVLB      11
0x09E8	0x3004      	MOVLW      4
0x09E9	0x00EB      	MOVWF      lcd_ind_column_L0
L_lcd_ind458:
;main.c,760 :: 		led_wr_str (column, 16, "C=", 2);
0x09EA	0x086B      	MOVF       lcd_ind_column_L0, 0
0x09EB	0x002C      	MOVLB      12
0x09EC	0x00A4      	MOVWF      FARG_led_wr_str_col
0x09ED	0x3010      	MOVLW      16
0x09EE	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x09EF	0x30CF      	MOVLW      ?lstr87_main
0x09F0	0x00A6      	MOVWF      FARG_led_wr_str_str
0x09F1	0x3003      	MOVLW      hi_addr(?lstr87_main)
0x09F2	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x09F3	0x3002      	MOVLW      2
0x09F4	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x09F5	0x3180      	MOVLP      0
0x09F6	0x24B4      	CALL       _led_wr_str
0x09F7	0x3188      	MOVLP      8
;main.c,761 :: 		led_wr_str (column, 16+6*12, "pF", 2);
0x09F8	0x002B      	MOVLB      11
0x09F9	0x086B      	MOVF       lcd_ind_column_L0, 0
0x09FA	0x002C      	MOVLB      12
0x09FB	0x00A4      	MOVWF      FARG_led_wr_str_col
0x09FC	0x3058      	MOVLW      88
0x09FD	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x09FE	0x30D8      	MOVLW      ?lstr88_main
0x09FF	0x00A6      	MOVWF      FARG_led_wr_str_str
0x0A00	0x3003      	MOVLW      hi_addr(?lstr88_main)
0x0A01	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x0A02	0x3002      	MOVLW      2
0x0A03	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0A04	0x3180      	MOVLP      0
0x0A05	0x24B4      	CALL       _led_wr_str
0x0A06	0x3188      	MOVLP      8
;main.c,762 :: 		led_wr_str (column, 16+2*12, work_str_2, 4);
0x0A07	0x002B      	MOVLB      11
0x0A08	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0A09	0x002C      	MOVLB      12
0x0A0A	0x00A4      	MOVWF      FARG_led_wr_str_col
0x0A0B	0x3028      	MOVLW      40
0x0A0C	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x0A0D	0x30A0      	MOVLW      _work_str_2
0x0A0E	0x00A6      	MOVWF      FARG_led_wr_str_str
0x0A0F	0x3005      	MOVLW      hi_addr(_work_str_2)
0x0A10	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x0A11	0x3004      	MOVLW      4
0x0A12	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0A13	0x3180      	MOVLP      0
0x0A14	0x24B4      	CALL       _led_wr_str
0x0A15	0x3188      	MOVLP      8
;main.c,763 :: 		}
0x0A16	0x2A9C      	GOTO       L_lcd_ind459
L_lcd_ind456:
;main.c,764 :: 		else if(type==2 | type==3) {// 128*32 OLED
0x0A17	0x002A      	MOVLB      10
0x0A18	0x086D      	MOVF       _type, 0
0x0A19	0x3A02      	XORLW      2
0x0A1A	0x3001      	MOVLW      1
0x0A1B	0x1D03      	BTFSS      STATUS, 2
0x0A1C	0x3000      	MOVLW      0
0x0A1D	0x00F1      	MOVWF      R1
0x0A1E	0x086D      	MOVF       _type, 0
0x0A1F	0x3A03      	XORLW      3
0x0A20	0x3001      	MOVLW      1
0x0A21	0x1D03      	BTFSS      STATUS, 2
0x0A22	0x3000      	MOVLW      0
0x0A23	0x00F0      	MOVWF      R0
0x0A24	0x0871      	MOVF       R1, 0
0x0A25	0x04F0      	IORWF       R0, 1
0x0A26	0x1903      	BTFSC      STATUS, 2
0x0A27	0x2A60      	GOTO       L_lcd_ind460
;main.c,765 :: 		if(SW==1) column = 1; else column = 0;
0x0A28	0x0028      	MOVLB      8
0x0A29	0x0847      	MOVF       main_SW, 0
0x0A2A	0x3A01      	XORLW      1
0x0A2B	0x1D03      	BTFSS      STATUS, 2
0x0A2C	0x2A31      	GOTO       L_lcd_ind461
0x0A2D	0x3001      	MOVLW      1
0x0A2E	0x002B      	MOVLB      11
0x0A2F	0x00EB      	MOVWF      lcd_ind_column_L0
0x0A30	0x2A33      	GOTO       L_lcd_ind462
L_lcd_ind461:
0x0A31	0x002B      	MOVLB      11
0x0A32	0x01EB      	CLRF       lcd_ind_column_L0
L_lcd_ind462:
;main.c,766 :: 		led_wr_str (column, 9, "C=", 2);
0x0A33	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0A34	0x002C      	MOVLB      12
0x0A35	0x00A4      	MOVWF      FARG_led_wr_str_col
0x0A36	0x3009      	MOVLW      9
0x0A37	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x0A38	0x30D5      	MOVLW      ?lstr89_main
0x0A39	0x00A6      	MOVWF      FARG_led_wr_str_str
0x0A3A	0x3003      	MOVLW      hi_addr(?lstr89_main)
0x0A3B	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x0A3C	0x3002      	MOVLW      2
0x0A3D	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0A3E	0x3180      	MOVLP      0
0x0A3F	0x24B4      	CALL       _led_wr_str
0x0A40	0x3188      	MOVLP      8
;main.c,767 :: 		led_wr_str (column, 15, "pF", 2);
0x0A41	0x002B      	MOVLB      11
0x0A42	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0A43	0x002C      	MOVLB      12
0x0A44	0x00A4      	MOVWF      FARG_led_wr_str_col
0x0A45	0x300F      	MOVLW      15
0x0A46	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x0A47	0x30D2      	MOVLW      ?lstr90_main
0x0A48	0x00A6      	MOVWF      FARG_led_wr_str_str
0x0A49	0x3003      	MOVLW      hi_addr(?lstr90_main)
0x0A4A	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x0A4B	0x3002      	MOVLW      2
0x0A4C	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0A4D	0x3180      	MOVLP      0
0x0A4E	0x24B4      	CALL       _led_wr_str
0x0A4F	0x3188      	MOVLP      8
;main.c,768 :: 		led_wr_str (column, 11, work_str_2, 4);
0x0A50	0x002B      	MOVLB      11
0x0A51	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0A52	0x002C      	MOVLB      12
0x0A53	0x00A4      	MOVWF      FARG_led_wr_str_col
0x0A54	0x300B      	MOVLW      11
0x0A55	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x0A56	0x30A0      	MOVLW      _work_str_2
0x0A57	0x00A6      	MOVWF      FARG_led_wr_str_str
0x0A58	0x3005      	MOVLW      hi_addr(_work_str_2)
0x0A59	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x0A5A	0x3004      	MOVLW      4
0x0A5B	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0A5C	0x3180      	MOVLP      0
0x0A5D	0x24B4      	CALL       _led_wr_str
0x0A5E	0x3188      	MOVLP      8
;main.c,769 :: 		}
0x0A5F	0x2A9C      	GOTO       L_lcd_ind463
L_lcd_ind460:
;main.c,770 :: 		else if(type==1) { // 1602 LCD
0x0A60	0x002A      	MOVLB      10
0x0A61	0x086D      	MOVF       _type, 0
0x0A62	0x3A01      	XORLW      1
0x0A63	0x1D03      	BTFSS      STATUS, 2
0x0A64	0x2A9C      	GOTO       L_lcd_ind464
;main.c,771 :: 		if(SW==1) column = 1; else column = 0;
0x0A65	0x0028      	MOVLB      8
0x0A66	0x0847      	MOVF       main_SW, 0
0x0A67	0x3A01      	XORLW      1
0x0A68	0x1D03      	BTFSS      STATUS, 2
0x0A69	0x2A6E      	GOTO       L_lcd_ind465
0x0A6A	0x3001      	MOVLW      1
0x0A6B	0x002B      	MOVLB      11
0x0A6C	0x00EB      	MOVWF      lcd_ind_column_L0
0x0A6D	0x2A70      	GOTO       L_lcd_ind466
L_lcd_ind465:
0x0A6E	0x002B      	MOVLB      11
0x0A6F	0x01EB      	CLRF       lcd_ind_column_L0
L_lcd_ind466:
;main.c,772 :: 		led_wr_str (column, 9, "C=", 2);
0x0A70	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0A71	0x002C      	MOVLB      12
0x0A72	0x00A4      	MOVWF      FARG_led_wr_str_col
0x0A73	0x3009      	MOVLW      9
0x0A74	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x0A75	0x30DC      	MOVLW      ?lstr91_main
0x0A76	0x00A6      	MOVWF      FARG_led_wr_str_str
0x0A77	0x3003      	MOVLW      hi_addr(?lstr91_main)
0x0A78	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x0A79	0x3002      	MOVLW      2
0x0A7A	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0A7B	0x3180      	MOVLP      0
0x0A7C	0x24B4      	CALL       _led_wr_str
0x0A7D	0x3188      	MOVLP      8
;main.c,773 :: 		led_wr_str (column, 15, "p", 1);
0x0A7E	0x002B      	MOVLB      11
0x0A7F	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0A80	0x002C      	MOVLB      12
0x0A81	0x00A4      	MOVWF      FARG_led_wr_str_col
0x0A82	0x300F      	MOVLW      15
0x0A83	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x0A84	0x302A      	MOVLW      ?lstr92_main
0x0A85	0x00A6      	MOVWF      FARG_led_wr_str_str
0x0A86	0x3004      	MOVLW      hi_addr(?lstr92_main)
0x0A87	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x0A88	0x3001      	MOVLW      1
0x0A89	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0A8A	0x3180      	MOVLP      0
0x0A8B	0x24B4      	CALL       _led_wr_str
0x0A8C	0x3188      	MOVLP      8
;main.c,774 :: 		led_wr_str (column, 11, work_str_2, 4);
0x0A8D	0x002B      	MOVLB      11
0x0A8E	0x086B      	MOVF       lcd_ind_column_L0, 0
0x0A8F	0x002C      	MOVLB      12
0x0A90	0x00A4      	MOVWF      FARG_led_wr_str_col
0x0A91	0x300B      	MOVLW      11
0x0A92	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x0A93	0x30A0      	MOVLW      _work_str_2
0x0A94	0x00A6      	MOVWF      FARG_led_wr_str_str
0x0A95	0x3005      	MOVLW      hi_addr(_work_str_2)
0x0A96	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x0A97	0x3004      	MOVLW      4
0x0A98	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x0A99	0x3180      	MOVLP      0
0x0A9A	0x24B4      	CALL       _led_wr_str
0x0A9B	0x3188      	MOVLP      8
;main.c,775 :: 		}
L_lcd_ind464:
L_lcd_ind463:
L_lcd_ind459:
;main.c,777 :: 		asm CLRWDT;
0x0A9C	0x0064      	CLRWDT
;main.c,778 :: 		return;
;main.c,779 :: 		}
L_end_lcd_ind:
0x0A9D	0x0008      	RETURN
; end of _lcd_ind
_get_reverse:
;main.h,64 :: 		int get_reverse() {
;main.h,66 :: 		FVRCON = 0b10000001; // ADC 1024 vmV Vref
0x0A9E	0x3081      	MOVLW      129
0x0A9F	0x0022      	MOVLB      2
0x0AA0	0x0097      	MOVWF      FVRCON
;main.h,67 :: 		while(FVRCON.B6 == 0);
L_get_reverse25:
0x0AA1	0x1B17      	BTFSC      FVRCON, 6
0x0AA2	0x2AA4      	GOTO       L_get_reverse26
0x0AA3	0x2AA1      	GOTO       L_get_reverse25
L_get_reverse26:
;main.h,68 :: 		Reverse = ADC_Get_Sample(0);
0x0AA4	0x002C      	MOVLB      12
0x0AA5	0x01A4      	CLRF       FARG_ADC_Get_Sample_channel
0x0AA6	0x3180      	MOVLP      0
0x0AA7	0x25FD      	CALL       _ADC_Get_Sample
0x0AA8	0x3188      	MOVLP      8
0x0AA9	0x0870      	MOVF       R0, 0
0x0AAA	0x002B      	MOVLB      11
0x0AAB	0x00EB      	MOVWF      get_reverse_Reverse_L0
0x0AAC	0x0871      	MOVF       R1, 0
0x0AAD	0x00EC      	MOVWF      get_reverse_Reverse_L0+1
;main.h,69 :: 		if(Reverse <= 1000) return Reverse;
0x0AAE	0x3080      	MOVLW      128
0x0AAF	0x3A03      	XORLW      3
0x0AB0	0x00F2      	MOVWF      R2
0x0AB1	0x3080      	MOVLW      128
0x0AB2	0x0671      	XORWF      R1, 0
0x0AB3	0x0272      	SUBWF      R2, 0
0x0AB4	0x1D03      	BTFSS      STATUS, 2
0x0AB5	0x2AB8      	GOTO       L__get_reverse561
0x0AB6	0x0870      	MOVF       R0, 0
0x0AB7	0x3CE8      	SUBLW      232
L__get_reverse561:
0x0AB8	0x1C03      	BTFSS      STATUS, 0
0x0AB9	0x2ABF      	GOTO       L_get_reverse27
0x0ABA	0x086B      	MOVF       get_reverse_Reverse_L0, 0
0x0ABB	0x00F0      	MOVWF      R0
0x0ABC	0x086C      	MOVF       get_reverse_Reverse_L0+1, 0
0x0ABD	0x00F1      	MOVWF      R1
0x0ABE	0x2AFE      	GOTO       L_end_get_reverse
L_get_reverse27:
;main.h,70 :: 		FVRCON = 0b10000010; // ADC 2048 vmV Vref
0x0ABF	0x3082      	MOVLW      130
0x0AC0	0x0022      	MOVLB      2
0x0AC1	0x0097      	MOVWF      FVRCON
;main.h,71 :: 		while(FVRCON.B6 == 0);
L_get_reverse28:
0x0AC2	0x1B17      	BTFSC      FVRCON, 6
0x0AC3	0x2AC5      	GOTO       L_get_reverse29
0x0AC4	0x2AC2      	GOTO       L_get_reverse28
L_get_reverse29:
;main.h,72 :: 		Reverse = ADC_Get_Sample(0);
0x0AC5	0x002C      	MOVLB      12
0x0AC6	0x01A4      	CLRF       FARG_ADC_Get_Sample_channel
0x0AC7	0x3180      	MOVLP      0
0x0AC8	0x25FD      	CALL       _ADC_Get_Sample
0x0AC9	0x3188      	MOVLP      8
0x0ACA	0x0870      	MOVF       R0, 0
0x0ACB	0x002B      	MOVLB      11
0x0ACC	0x00EB      	MOVWF      get_reverse_Reverse_L0
0x0ACD	0x0871      	MOVF       R1, 0
0x0ACE	0x00EC      	MOVWF      get_reverse_Reverse_L0+1
;main.h,73 :: 		if(Reverse <= 1000) return Reverse * 2;
0x0ACF	0x3080      	MOVLW      128
0x0AD0	0x3A03      	XORLW      3
0x0AD1	0x00F2      	MOVWF      R2
0x0AD2	0x3080      	MOVLW      128
0x0AD3	0x0671      	XORWF      R1, 0
0x0AD4	0x0272      	SUBWF      R2, 0
0x0AD5	0x1D03      	BTFSS      STATUS, 2
0x0AD6	0x2AD9      	GOTO       L__get_reverse562
0x0AD7	0x0870      	MOVF       R0, 0
0x0AD8	0x3CE8      	SUBLW      232
L__get_reverse562:
0x0AD9	0x1C03      	BTFSS      STATUS, 0
0x0ADA	0x2AE2      	GOTO       L_get_reverse30
0x0ADB	0x086B      	MOVF       get_reverse_Reverse_L0, 0
0x0ADC	0x00F0      	MOVWF      R0
0x0ADD	0x086C      	MOVF       get_reverse_Reverse_L0+1, 0
0x0ADE	0x00F1      	MOVWF      R1
0x0ADF	0x35F0      	LSLF       R0, 1
0x0AE0	0x0DF1      	RLF        R1, 1
0x0AE1	0x2AFE      	GOTO       L_end_get_reverse
L_get_reverse30:
;main.h,74 :: 		FVRCON = 0b10000011; // ADC 4096 vmV Vref
0x0AE2	0x3083      	MOVLW      131
0x0AE3	0x0022      	MOVLB      2
0x0AE4	0x0097      	MOVWF      FVRCON
;main.h,75 :: 		while(FVRCON.B6 == 0);
L_get_reverse31:
0x0AE5	0x1B17      	BTFSC      FVRCON, 6
0x0AE6	0x2AE8      	GOTO       L_get_reverse32
0x0AE7	0x2AE5      	GOTO       L_get_reverse31
L_get_reverse32:
;main.h,76 :: 		Reverse = ADC_Get_Sample(0);
0x0AE8	0x002C      	MOVLB      12
0x0AE9	0x01A4      	CLRF       FARG_ADC_Get_Sample_channel
0x0AEA	0x3180      	MOVLP      0
0x0AEB	0x25FD      	CALL       _ADC_Get_Sample
0x0AEC	0x3188      	MOVLP      8
0x0AED	0x0870      	MOVF       R0, 0
0x0AEE	0x002B      	MOVLB      11
0x0AEF	0x00EB      	MOVWF      get_reverse_Reverse_L0
0x0AF0	0x0871      	MOVF       R1, 0
0x0AF1	0x00EC      	MOVWF      get_reverse_Reverse_L0+1
;main.h,77 :: 		return Reverse * 4;
0x0AF2	0x0870      	MOVF       R0, 0
0x0AF3	0x00F2      	MOVWF      R2
0x0AF4	0x0871      	MOVF       R1, 0
0x0AF5	0x00F3      	MOVWF      R3
0x0AF6	0x35F2      	LSLF       R2, 1
0x0AF7	0x0DF3      	RLF        R3, 1
0x0AF8	0x35F2      	LSLF       R2, 1
0x0AF9	0x0DF3      	RLF        R3, 1
0x0AFA	0x0872      	MOVF       R2, 0
0x0AFB	0x00F0      	MOVWF      R0
0x0AFC	0x0873      	MOVF       R3, 0
0x0AFD	0x00F1      	MOVWF      R1
;main.h,78 :: 		}
L_end_get_reverse:
0x0AFE	0x0008      	RETURN
; end of _get_reverse
_Div_32x32_FP:
;__Lib_MathDouble.c,758 :: 		
;__Lib_MathDouble.c,770 :: 		
;__Lib_MathDouble.c,773 :: 		
0x0AFF	0x0874      	MOVF       R4, 0
0x0B00	0x3A00      	XORLW      0
0x0B01	0x1D03      	BTFSS      STATUS, 2
0x0B02	0x2B18      	GOTO       L_Div_32x32_FP7
;__Lib_MathDouble.c,774 :: 		
0x0B03	0x0875      	MOVF       R5, 0
0x0B04	0x3A00      	XORLW      0
0x0B05	0x1D03      	BTFSS      STATUS, 2
0x0B06	0x2B18      	GOTO       L_Div_32x32_FP8
;__Lib_MathDouble.c,775 :: 		
0x0B07	0x0876      	MOVF       R6, 0
0x0B08	0x3A00      	XORLW      0
0x0B09	0x1D03      	BTFSS      STATUS, 2
0x0B0A	0x2B18      	GOTO       L_Div_32x32_FP9
;__Lib_MathDouble.c,776 :: 		
0x0B0B	0x0877      	MOVF       R7, 0
0x0B0C	0x3A00      	XORLW      0
0x0B0D	0x1D03      	BTFSS      STATUS, 2
0x0B0E	0x2B18      	GOTO       L_Div_32x32_FP10
;__Lib_MathDouble.c,777 :: 		
0x0B0F	0x30FF      	MOVLW      255
0x0B10	0x00F0      	MOVWF      R0
;__Lib_MathDouble.c,778 :: 		
0x0B11	0x30FF      	MOVLW      255
0x0B12	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,779 :: 		
0x0B13	0x307F      	MOVLW      127
0x0B14	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,780 :: 		
0x0B15	0x30FF      	MOVLW      255
0x0B16	0x00F3      	MOVWF      R3
;__Lib_MathDouble.c,781 :: 		
0x0B17	0x2BBA      	GOTO       L_end_Div_32x32_FP
;__Lib_MathDouble.c,782 :: 		
L_Div_32x32_FP10:
L_Div_32x32_FP9:
L_Div_32x32_FP8:
L_Div_32x32_FP7:
;__Lib_MathDouble.c,785 :: 		
0x0B18	0x0020      	MOVLB      0
;__Lib_MathDouble.c,787 :: 		
0x0B19	0x0877      	MOVF       R7, 0
;__Lib_MathDouble.c,788 :: 		
0x0B1A	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,789 :: 		
0x0B1B	0x2BA6      	GOTO       JPDSETFDZ32
;__Lib_MathDouble.c,791 :: 		
0x0B1C	0x0873      	MOVF       R3, 0
;__Lib_MathDouble.c,792 :: 		
0x0B1D	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,793 :: 		
0x0B1E	0x2BAB      	GOTO       JPDRES032
;__Lib_MathDouble.c,795 :: 		
0x0B1F	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,796 :: 		
0x0B20	0x0676      	XORWF      R6, 0
;__Lib_MathDouble.c,797 :: 		
0x0B21	0x3980      	ANDLW      128
;__Lib_MathDouble.c,798 :: 		
0x0B22	0x00FA      	MOVWF      R10
;__Lib_MathDouble.c,799 :: 		
0x0B23	0x17F2      	BSF        R2, 7
;__Lib_MathDouble.c,800 :: 		
0x0B24	0x17F6      	BSF        R6, 7
;__Lib_MathDouble.c,802 :: 		
0x0B25	0x01A1      	CLRF       __math_tempbD
;__Lib_MathDouble.c,803 :: 		
0x0B26	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,804 :: 		
0x0B27	0x00F8      	MOVWF      R8
;__Lib_MathDouble.c,805 :: 		
0x0B28	0x0871      	MOVF       R1, 0
;__Lib_MathDouble.c,806 :: 		
0x0B29	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,807 :: 		
0x0B2A	0x0870      	MOVF       R0, 0
;__Lib_MathDouble.c,808 :: 		
0x0B2B	0x00FD      	MOVWF      R13
;__Lib_MathDouble.c,810 :: 		
0x0B2C	0x0874      	MOVF       R4, 0
;__Lib_MathDouble.c,811 :: 		
0x0B2D	0x02FD      	SUBWF      R13, 1
;__Lib_MathDouble.c,812 :: 		
0x0B2E	0x0875      	MOVF       R5, 0
;__Lib_MathDouble.c,813 :: 		
0x0B2F	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,814 :: 		
0x0B30	0x0F75      	INCFSZ     R5, 0
;__Lib_MathDouble.c,816 :: 		
0x0B31	0x02FC      	SUBWF      R12, 1
;__Lib_MathDouble.c,817 :: 		
0x0B32	0x0876      	MOVF       R6, 0
;__Lib_MathDouble.c,818 :: 		
0x0B33	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,819 :: 		
0x0B34	0x0F76      	INCFSZ     R6, 0
;__Lib_MathDouble.c,821 :: 		
0x0B35	0x02F8      	SUBWF      R8, 1
;__Lib_MathDouble.c,822 :: 		
0x0B36	0x01F8      	CLRF       R8
;__Lib_MathDouble.c,823 :: 		
0x0B37	0x01FC      	CLRF       R12
;__Lib_MathDouble.c,824 :: 		
0x0B38	0x01FD      	CLRF       R13
;__Lib_MathDouble.c,825 :: 		
0x0B39	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,826 :: 		
0x0B3A	0x2B42      	GOTO       DALIGN32OK
;__Lib_MathDouble.c,828 :: 		
0x0B3B	0x1003      	BCF        STATUS, 0
;__Lib_MathDouble.c,829 :: 		
0x0B3C	0x0CF2      	RRF        R2, 1
;__Lib_MathDouble.c,830 :: 		
0x0B3D	0x0CF1      	RRF        R1, 1
;__Lib_MathDouble.c,831 :: 		
0x0B3E	0x0CF0      	RRF        R0, 1
;__Lib_MathDouble.c,832 :: 		
0x0B3F	0x0CF8      	RRF        R8, 1
;__Lib_MathDouble.c,833 :: 		
0x0B40	0x3001      	MOVLW      1
;__Lib_MathDouble.c,834 :: 		
0x0B41	0x00A1      	MOVWF      __math_tempbD
;__Lib_MathDouble.c,835 :: 		
DALIGN32OK:
;__Lib_MathDouble.c,836 :: 		
0x0B42	0x0877      	MOVF       R7, 0
;__Lib_MathDouble.c,837 :: 		
0x0B43	0x02F3      	SUBWF      R3, 1
;__Lib_MathDouble.c,838 :: 		
0x0B44	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,839 :: 		
0x0B45	0x2B4C      	GOTO       ALTB32
;__Lib_MathDouble.c,841 :: 		
0x0B46	0x307E      	MOVLW      126
;__Lib_MathDouble.c,842 :: 		
0x0B47	0x0721      	ADDWF      __math_tempbD, 0
;__Lib_MathDouble.c,843 :: 		
0x0B48	0x07F3      	ADDWF      R3, 1
;__Lib_MathDouble.c,844 :: 		
0x0B49	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,845 :: 		
0x0B4A	0x2BB0      	GOTO       JPDSETFOV32
;__Lib_MathDouble.c,846 :: 		
0x0B4B	0x2B51      	GOTO       DARGOK32
;__Lib_MathDouble.c,847 :: 		
ALTB32:
;__Lib_MathDouble.c,848 :: 		
0x0B4C	0x307E      	MOVLW      126
;__Lib_MathDouble.c,849 :: 		
0x0B4D	0x0721      	ADDWF      __math_tempbD, 0
;__Lib_MathDouble.c,850 :: 		
0x0B4E	0x07F3      	ADDWF      R3, 1
;__Lib_MathDouble.c,851 :: 		
0x0B4F	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,852 :: 		
0x0B50	0x2BB5      	GOTO       JPDSETFUN32
;__Lib_MathDouble.c,853 :: 		
DARGOK32:
;__Lib_MathDouble.c,854 :: 		
0x0B51	0x3018      	MOVLW      24
;__Lib_MathDouble.c,856 :: 		
0x0B52	0x07FA      	ADDWF      R10, 1
;__Lib_MathDouble.c,857 :: 		
DLOOP32:
;__Lib_MathDouble.c,858 :: 		
0x0B53	0x0DFD      	RLF        R13, 1
;__Lib_MathDouble.c,859 :: 		
0x0B54	0x0DFC      	RLF        R12, 1
;__Lib_MathDouble.c,860 :: 		
0x0B55	0x0DF8      	RLF        R8, 1
;__Lib_MathDouble.c,861 :: 		
0x0B56	0x0DF0      	RLF        R0, 1
;__Lib_MathDouble.c,862 :: 		
0x0B57	0x0DF1      	RLF        R1, 1
;__Lib_MathDouble.c,863 :: 		
0x0B58	0x0DF2      	RLF        R2, 1
;__Lib_MathDouble.c,864 :: 		
0x0B59	0x0DA1      	RLF        __math_tempbD, 1
;__Lib_MathDouble.c,866 :: 		
0x0B5A	0x0874      	MOVF       R4, 0
;__Lib_MathDouble.c,867 :: 		
0x0B5B	0x02F0      	SUBWF      R0, 1
;__Lib_MathDouble.c,868 :: 		
0x0B5C	0x0875      	MOVF       R5, 0
;__Lib_MathDouble.c,869 :: 		
0x0B5D	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,870 :: 		
0x0B5E	0x0F75      	INCFSZ     R5, 0
;__Lib_MathDouble.c,872 :: 		
0x0B5F	0x02F1      	SUBWF      R1, 1
;__Lib_MathDouble.c,873 :: 		
0x0B60	0x0876      	MOVF       R6, 0
;__Lib_MathDouble.c,874 :: 		
0x0B61	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,875 :: 		
0x0B62	0x0F76      	INCFSZ     R6, 0
;__Lib_MathDouble.c,877 :: 		
0x0B63	0x02F2      	SUBWF      R2, 1
;__Lib_MathDouble.c,878 :: 		
0x0B64	0x0D76      	RLF        R6, 0
;__Lib_MathDouble.c,879 :: 		
0x0B65	0x04A1      	IORWF       __math_tempbD, 1
;__Lib_MathDouble.c,880 :: 		
0x0B66	0x1C21      	BTFSS      __math_tempbD, 0
;__Lib_MathDouble.c,881 :: 		
0x0B67	0x2B6A      	GOTO       DREST32
;__Lib_MathDouble.c,882 :: 		
0x0B68	0x147D      	BSF        R13, 0
;__Lib_MathDouble.c,883 :: 		
0x0B69	0x2B75      	GOTO       DOK32
;__Lib_MathDouble.c,884 :: 		
DREST32:
;__Lib_MathDouble.c,885 :: 		
0x0B6A	0x0874      	MOVF       R4, 0
;__Lib_MathDouble.c,886 :: 		
0x0B6B	0x07F0      	ADDWF      R0, 1
;__Lib_MathDouble.c,887 :: 		
0x0B6C	0x0875      	MOVF       R5, 0
;__Lib_MathDouble.c,888 :: 		
0x0B6D	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,889 :: 		
0x0B6E	0x0F75      	INCFSZ     R5, 0
;__Lib_MathDouble.c,891 :: 		
0x0B6F	0x07F1      	ADDWF      R1, 1
;__Lib_MathDouble.c,892 :: 		
0x0B70	0x0876      	MOVF       R6, 0
;__Lib_MathDouble.c,893 :: 		
0x0B71	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,894 :: 		
0x0B72	0x0A76      	INCF       R6, 0
;__Lib_MathDouble.c,895 :: 		
0x0B73	0x07F2      	ADDWF      R2, 1
;__Lib_MathDouble.c,896 :: 		
0x0B74	0x107D      	BCF        R13, 0
;__Lib_MathDouble.c,897 :: 		
DOK32:
;__Lib_MathDouble.c,899 :: 		
0x0B75	0x03FA      	DECF       R10, 1
;__Lib_MathDouble.c,900 :: 		
0x0B76	0x301F      	MOVLW      31
;__Lib_MathDouble.c,901 :: 		
0x0B77	0x057A      	ANDWF      R10, 0
;__Lib_MathDouble.c,902 :: 		
0x0B78	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,903 :: 		
0x0B79	0x2B53      	GOTO       DLOOP32
;__Lib_MathDouble.c,905 :: 		
0x0B7A	0x1B7B      	BTFSC      R11, 6
;__Lib_MathDouble.c,906 :: 		
0x0B7B	0x1C7D      	BTFSS      R13, 0
;__Lib_MathDouble.c,907 :: 		
0x0B7C	0x2B9C      	GOTO       DIV32OK
;__Lib_MathDouble.c,908 :: 		
0x0B7D	0x1003      	BCF        STATUS, 0
;__Lib_MathDouble.c,909 :: 		
0x0B7E	0x0DF0      	RLF        R0, 1
;__Lib_MathDouble.c,910 :: 		
0x0B7F	0x0DF1      	RLF        R1, 1
;__Lib_MathDouble.c,911 :: 		
0x0B80	0x0DF2      	RLF        R2, 1
;__Lib_MathDouble.c,912 :: 		
0x0B81	0x0DA1      	RLF        __math_tempbD, 1
;__Lib_MathDouble.c,914 :: 		
0x0B82	0x0874      	MOVF       R4, 0
;__Lib_MathDouble.c,915 :: 		
0x0B83	0x02F0      	SUBWF      R0, 1
;__Lib_MathDouble.c,916 :: 		
0x0B84	0x0875      	MOVF       R5, 0
;__Lib_MathDouble.c,917 :: 		
0x0B85	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,918 :: 		
0x0B86	0x0F75      	INCFSZ     R5, 0
;__Lib_MathDouble.c,919 :: 		
0x0B87	0x02F1      	SUBWF      R1, 1
;__Lib_MathDouble.c,920 :: 		
0x0B88	0x0876      	MOVF       R6, 0
;__Lib_MathDouble.c,921 :: 		
0x0B89	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,922 :: 		
0x0B8A	0x0F76      	INCFSZ     R6, 0
;__Lib_MathDouble.c,923 :: 		
0x0B8B	0x02F2      	SUBWF      R2, 1
;__Lib_MathDouble.c,924 :: 		
0x0B8C	0x0D76      	RLF        R6, 0
;__Lib_MathDouble.c,925 :: 		
0x0B8D	0x0421      	IORWF       __math_tempbD, 0
;__Lib_MathDouble.c,926 :: 		
0x0B8E	0x3901      	ANDLW      1
;__Lib_MathDouble.c,927 :: 		
0x0B8F	0x07FD      	ADDWF      R13, 1
;__Lib_MathDouble.c,928 :: 		
0x0B90	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,929 :: 		
0x0B91	0x0AFC      	INCF       R12, 1
;__Lib_MathDouble.c,930 :: 		
0x0B92	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,931 :: 		
0x0B93	0x0AF8      	INCF       R8, 1
;__Lib_MathDouble.c,932 :: 		
0x0B94	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,933 :: 		
0x0B95	0x2B9C      	GOTO       DIV32OK
;__Lib_MathDouble.c,934 :: 		
0x0B96	0x0CF8      	RRF        R8, 1
;__Lib_MathDouble.c,935 :: 		
0x0B97	0x0CFC      	RRF        R12, 1
;__Lib_MathDouble.c,936 :: 		
0x0B98	0x0CFD      	RRF        R13, 1
;__Lib_MathDouble.c,937 :: 		
0x0B99	0x0AF3      	INCF       R3, 1
;__Lib_MathDouble.c,938 :: 		
0x0B9A	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,939 :: 		
0x0B9B	0x2BB0      	GOTO       JPDSETFOV32
;__Lib_MathDouble.c,940 :: 		
DIV32OK:
;__Lib_MathDouble.c,941 :: 		
0x0B9C	0x1FFA      	BTFSS      R10, 7
;__Lib_MathDouble.c,942 :: 		
0x0B9D	0x13F8      	BCF        R8, 7
;__Lib_MathDouble.c,943 :: 		
0x0B9E	0x0878      	MOVF       R8, 0
;__Lib_MathDouble.c,944 :: 		
0x0B9F	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,945 :: 		
0x0BA0	0x087C      	MOVF       R12, 0
;__Lib_MathDouble.c,946 :: 		
0x0BA1	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,947 :: 		
0x0BA2	0x087D      	MOVF       R13, 0
;__Lib_MathDouble.c,948 :: 		
0x0BA3	0x00F0      	MOVWF      R0
;__Lib_MathDouble.c,950 :: 		
0x0BA4	0x3000      	MOVLW      0
;__Lib_MathDouble.c,952 :: 		
0x0BA5	0x2BB9      	GOTO       DIV32EEE
;__Lib_MathDouble.c,953 :: 		
JPDSETFDZ32:
;__Lib_MathDouble.c,954 :: 		
0x0BA6	0x3001      	MOVLW      1
;__Lib_MathDouble.c,957 :: 		
0x0BA7	0x3180      	MOVLP      0
0x0BA8	0x25FA      	CALL       _SETFDZ32
0x0BA9	0x3188      	MOVLP      8
;__Lib_MathDouble.c,959 :: 		
0x0BAA	0x2BB9      	GOTO       DIV32EEE
;__Lib_MathDouble.c,960 :: 		
JPDRES032:
;__Lib_MathDouble.c,961 :: 		
0x0BAB	0x3002      	MOVLW      2
;__Lib_MathDouble.c,964 :: 		
0x0BAC	0x3180      	MOVLP      0
0x0BAD	0x2321      	CALL       _RES032
0x0BAE	0x3188      	MOVLP      8
;__Lib_MathDouble.c,966 :: 		
0x0BAF	0x2BB9      	GOTO       DIV32EEE
;__Lib_MathDouble.c,967 :: 		
JPDSETFOV32:
;__Lib_MathDouble.c,968 :: 		
0x0BB0	0x3004      	MOVLW      4
;__Lib_MathDouble.c,971 :: 		
0x0BB1	0x3180      	MOVLP      0
0x0BB2	0x2315      	CALL       _SETFOV32
0x0BB3	0x3188      	MOVLP      8
;__Lib_MathDouble.c,973 :: 		
0x0BB4	0x2BB9      	GOTO       DIV32EEE
;__Lib_MathDouble.c,974 :: 		
JPDSETFUN32:
;__Lib_MathDouble.c,975 :: 		
0x0BB5	0x3008      	MOVLW      8
;__Lib_MathDouble.c,978 :: 		
0x0BB6	0x3180      	MOVLP      0
0x0BB7	0x2328      	CALL       _SETFUN32
0x0BB8	0x3188      	MOVLP      8
;__Lib_MathDouble.c,980 :: 		
DIV32EEE:
;__Lib_MathDouble.c,981 :: 		
0x0BB9	0x0000      	NOP
;__Lib_MathDouble.c,990 :: 		
L_end_Div_32x32_FP:
0x0BBA	0x0008      	RETURN
; end of _Div_32x32_FP
_Compare_Double:
;__Lib_MathDouble.c,2038 :: 		
;__Lib_MathDouble.c,2047 :: 		
;__Lib_MathDouble.c,2049 :: 		
0x0BBB	0x0020      	MOVLB      0
;__Lib_MathDouble.c,2051 :: 		
0x0BBC	0x01FA      	CLRF       R10
;__Lib_MathDouble.c,2052 :: 		
0x0BBD	0x0873      	MOVF       R3, 0
;__Lib_MathDouble.c,2053 :: 		
0x0BBE	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,2054 :: 		
0x0BBF	0x147A      	BSF        R10, 0
;__Lib_MathDouble.c,2055 :: 		
0x0BC0	0x0877      	MOVF       R7, 0
;__Lib_MathDouble.c,2056 :: 		
0x0BC1	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,2057 :: 		
0x0BC2	0x14FA      	BSF        R10, 1
;__Lib_MathDouble.c,2059 :: 		
0x0BC3	0x087A      	MOVF       R10, 0
;__Lib_MathDouble.c,2060 :: 		
0x0BC4	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,2061 :: 		
0x0BC5	0x2C06      	GOTO       COMPARE_EQU
;__Lib_MathDouble.c,2062 :: 		
0x0BC6	0x3A03      	XORLW      3
;__Lib_MathDouble.c,2063 :: 		
0x0BC7	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,2064 :: 		
0x0BC8	0x2BD1      	GOTO       COMPARE_NOTZERO
;__Lib_MathDouble.c,2066 :: 		
0x0BC9	0x187A      	BTFSC      R10, 0
;__Lib_MathDouble.c,2067 :: 		
0x0BCA	0x2BCE      	GOTO       COMPARE_XNOTZERO
;__Lib_MathDouble.c,2069 :: 		
0x0BCB	0x1FF6      	BTFSS      R6, 7
;__Lib_MathDouble.c,2070 :: 		
0x0BCC	0x2C04      	GOTO       COMPARE_LT
;__Lib_MathDouble.c,2071 :: 		
0x0BCD	0x2C02      	GOTO       COMPARE_GT
;__Lib_MathDouble.c,2072 :: 		
COMPARE_XNOTZERO:
;__Lib_MathDouble.c,2073 :: 		
0x0BCE	0x1FF2      	BTFSS      R2, 7
;__Lib_MathDouble.c,2074 :: 		
0x0BCF	0x2C02      	GOTO       COMPARE_GT
;__Lib_MathDouble.c,2075 :: 		
0x0BD0	0x2C04      	GOTO       COMPARE_LT
;__Lib_MathDouble.c,2077 :: 		
COMPARE_NOTZERO:
;__Lib_MathDouble.c,2078 :: 		
0x0BD1	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,2079 :: 		
0x0BD2	0x3980      	ANDLW      128
;__Lib_MathDouble.c,2080 :: 		
0x0BD3	0x00FA      	MOVWF      R10
;__Lib_MathDouble.c,2081 :: 		
0x0BD4	0x13F2      	BCF        R2, 7
;__Lib_MathDouble.c,2083 :: 		
0x0BD5	0x0876      	MOVF       R6, 0
;__Lib_MathDouble.c,2084 :: 		
0x0BD6	0x3980      	ANDLW      128
;__Lib_MathDouble.c,2085 :: 		
0x0BD7	0x13F6      	BCF        R6, 7
;__Lib_MathDouble.c,2087 :: 		
0x0BD8	0x067A      	XORWF      R10, 0
;__Lib_MathDouble.c,2088 :: 		
0x0BD9	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,2089 :: 		
0x0BDA	0x2BDF      	GOTO       COMPARE_TESTALL
;__Lib_MathDouble.c,2091 :: 		
0x0BDB	0x087A      	MOVF       R10, 0
;__Lib_MathDouble.c,2092 :: 		
0x0BDC	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,2093 :: 		
0x0BDD	0x2C02      	GOTO       COMPARE_GT
;__Lib_MathDouble.c,2094 :: 		
0x0BDE	0x2C04      	GOTO       COMPARE_LT
;__Lib_MathDouble.c,2096 :: 		
COMPARE_TESTALL:
;__Lib_MathDouble.c,2097 :: 		
0x0BDF	0x0877      	MOVF       R7, 0
;__Lib_MathDouble.c,2098 :: 		
0x0BE0	0x0273      	SUBWF      R3, 0
;__Lib_MathDouble.c,2099 :: 		
0x0BE1	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,2100 :: 		
0x0BE2	0x2BE6      	GOTO       COMPARE_C1
;__Lib_MathDouble.c,2101 :: 		
0x0BE3	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,2102 :: 		
0x0BE4	0x2BFA      	GOTO       GT_FALSE
;__Lib_MathDouble.c,2103 :: 		
0x0BE5	0x2BFE      	GOTO       GT_TRUE
;__Lib_MathDouble.c,2104 :: 		
COMPARE_C1:
;__Lib_MathDouble.c,2105 :: 		
0x0BE6	0x0876      	MOVF       R6, 0
;__Lib_MathDouble.c,2106 :: 		
0x0BE7	0x0272      	SUBWF      R2, 0
;__Lib_MathDouble.c,2107 :: 		
0x0BE8	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,2108 :: 		
0x0BE9	0x2BED      	GOTO       COMPARE_C2
;__Lib_MathDouble.c,2109 :: 		
0x0BEA	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,2110 :: 		
0x0BEB	0x2BFA      	GOTO       GT_FALSE
;__Lib_MathDouble.c,2111 :: 		
0x0BEC	0x2BFE      	GOTO       GT_TRUE
;__Lib_MathDouble.c,2112 :: 		
COMPARE_C2:
;__Lib_MathDouble.c,2113 :: 		
0x0BED	0x0875      	MOVF       R5, 0
;__Lib_MathDouble.c,2114 :: 		
0x0BEE	0x0271      	SUBWF      R1, 0
;__Lib_MathDouble.c,2115 :: 		
0x0BEF	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,2116 :: 		
0x0BF0	0x2BF4      	GOTO       COMPARE_C3
;__Lib_MathDouble.c,2117 :: 		
0x0BF1	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,2118 :: 		
0x0BF2	0x2BFA      	GOTO       GT_FALSE
;__Lib_MathDouble.c,2119 :: 		
0x0BF3	0x2BFE      	GOTO       GT_TRUE
;__Lib_MathDouble.c,2120 :: 		
COMPARE_C3:
;__Lib_MathDouble.c,2121 :: 		
0x0BF4	0x0874      	MOVF       R4, 0
;__Lib_MathDouble.c,2122 :: 		
0x0BF5	0x0270      	SUBWF      R0, 0
;__Lib_MathDouble.c,2123 :: 		
0x0BF6	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,2124 :: 		
0x0BF7	0x2C06      	GOTO       COMPARE_EQU
;__Lib_MathDouble.c,2125 :: 		
0x0BF8	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,2126 :: 		
0x0BF9	0x2BFE      	GOTO       GT_TRUE
;__Lib_MathDouble.c,2128 :: 		
GT_FALSE:
;__Lib_MathDouble.c,2129 :: 		
0x0BFA	0x08FA      	MOVF       R10, 1
;__Lib_MathDouble.c,2130 :: 		
0x0BFB	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,2131 :: 		
0x0BFC	0x2C04      	GOTO       COMPARE_LT
;__Lib_MathDouble.c,2132 :: 		
0x0BFD	0x2C02      	GOTO       COMPARE_GT
;__Lib_MathDouble.c,2133 :: 		
GT_TRUE:
;__Lib_MathDouble.c,2134 :: 		
0x0BFE	0x08FA      	MOVF       R10, 1
;__Lib_MathDouble.c,2135 :: 		
0x0BFF	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,2136 :: 		
0x0C00	0x2C02      	GOTO       COMPARE_GT
;__Lib_MathDouble.c,2137 :: 		
0x0C01	0x2C04      	GOTO       COMPARE_LT
;__Lib_MathDouble.c,2139 :: 		
COMPARE_GT:
;__Lib_MathDouble.c,2142 :: 		
0x0C02	0x1403      	BSF        STATUS, 0
;__Lib_MathDouble.c,2143 :: 		
0x0C03	0x0008      	RETURN
;__Lib_MathDouble.c,2144 :: 		
COMPARE_LT:
;__Lib_MathDouble.c,2147 :: 		
0x0C04	0x1003      	BCF        STATUS, 0
;__Lib_MathDouble.c,2148 :: 		
0x0C05	0x0008      	RETURN
;__Lib_MathDouble.c,2149 :: 		
COMPARE_EQU:
;__Lib_MathDouble.c,2152 :: 		
0x0C06	0x1403      	BSF        STATUS, 0
;__Lib_MathDouble.c,2153 :: 		
0x0C07	0x1503      	BSF        STATUS, 2
;__Lib_MathDouble.c,2154 :: 		
0x0C08	0x0008      	RETURN
;__Lib_MathDouble.c,2156 :: 		
L_end_Compare_Double:
0x0C09	0x0008      	RETURN
; end of _Compare_Double
_Div_32x32_S:
;__Lib_Math.c,1084 :: 		
;__Lib_Math.c,1095 :: 		
;__Lib_Math.c,1098 :: 		
0x0C0A	0x0874      	MOVF       R4, 0
0x0C0B	0x3A00      	XORLW      0
0x0C0C	0x1D03      	BTFSS      STATUS, 2
0x0C0D	0x2C23      	GOTO       L_Div_32x32_S6
;__Lib_Math.c,1099 :: 		
0x0C0E	0x0875      	MOVF       R5, 0
0x0C0F	0x3A00      	XORLW      0
0x0C10	0x1D03      	BTFSS      STATUS, 2
0x0C11	0x2C23      	GOTO       L_Div_32x32_S7
;__Lib_Math.c,1100 :: 		
0x0C12	0x0876      	MOVF       R6, 0
0x0C13	0x3A00      	XORLW      0
0x0C14	0x1D03      	BTFSS      STATUS, 2
0x0C15	0x2C23      	GOTO       L_Div_32x32_S8
;__Lib_Math.c,1101 :: 		
0x0C16	0x0877      	MOVF       R7, 0
0x0C17	0x3A00      	XORLW      0
0x0C18	0x1D03      	BTFSS      STATUS, 2
0x0C19	0x2C23      	GOTO       L_Div_32x32_S9
;__Lib_Math.c,1102 :: 		
0x0C1A	0x30FF      	MOVLW      255
0x0C1B	0x00F0      	MOVWF      R0
;__Lib_Math.c,1103 :: 		
0x0C1C	0x30FF      	MOVLW      255
0x0C1D	0x00F1      	MOVWF      R1
;__Lib_Math.c,1104 :: 		
0x0C1E	0x30FF      	MOVLW      255
0x0C1F	0x00F2      	MOVWF      R2
;__Lib_Math.c,1105 :: 		
0x0C20	0x307F      	MOVLW      127
0x0C21	0x00F3      	MOVWF      R3
;__Lib_Math.c,1106 :: 		
0x0C22	0x2CBF      	GOTO       L_end_Div_32x32_S
;__Lib_Math.c,1107 :: 		
L_Div_32x32_S9:
L_Div_32x32_S8:
L_Div_32x32_S7:
L_Div_32x32_S6:
;__Lib_Math.c,1110 :: 		
0x0C23	0x0020      	MOVLB      0
;__Lib_Math.c,1112 :: 		
0x0C24	0x01FC      	CLRF       R12
;__Lib_Math.c,1113 :: 		
0x0C25	0x1BF7      	BTFSC      R7, 7
;__Lib_Math.c,1114 :: 		
0x0C26	0x0AFC      	INCF       R12, 1
;__Lib_Math.c,1116 :: 		
0x0C27	0x01FD      	CLRF       R13
;__Lib_Math.c,1117 :: 		
0x0C28	0x01FB      	CLRF       R11
;__Lib_Math.c,1118 :: 		
0x0C29	0x01FA      	CLRF       R10
;__Lib_Math.c,1119 :: 		
0x0C2A	0x01F9      	CLRF       R9
;__Lib_Math.c,1120 :: 		
0x0C2B	0x01F8      	CLRF       R8
;__Lib_Math.c,1121 :: 		
0x0C2C	0x0873      	MOVF       R3, 0
;__Lib_Math.c,1122 :: 		
0x0C2D	0x0472      	IORWF       R2, 0
;__Lib_Math.c,1123 :: 		
0x0C2E	0x0471      	IORWF       R1, 0
;__Lib_Math.c,1124 :: 		
0x0C2F	0x0470      	IORWF       R0, 0
;__Lib_Math.c,1125 :: 		
0x0C30	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1126 :: 		
0x0C31	0x2CB8      	GOTO       END_ALL
;__Lib_Math.c,1128 :: 		
0x0C32	0x0873      	MOVF       R3, 0
;__Lib_Math.c,1129 :: 		
0x0C33	0x0677      	XORWF      R7, 0
;__Lib_Math.c,1130 :: 		
0x0C34	0x00A0      	MOVWF      ___math_tempb
;__Lib_Math.c,1131 :: 		
0x0C35	0x1BA0      	BTFSC      ___math_tempb, 7
;__Lib_Math.c,1132 :: 		
0x0C36	0x09FD      	COMF       R13, 1
;__Lib_Math.c,1136 :: 		
0x0C37	0x1FF7      	BTFSS      R7, 7
;__Lib_Math.c,1137 :: 		
0x0C38	0x2C44      	GOTO       CA3232S
;__Lib_Math.c,1139 :: 		
0x0C39	0x09F4      	COMF       R4, 1
;__Lib_Math.c,1140 :: 		
0x0C3A	0x09F5      	COMF       R5, 1
;__Lib_Math.c,1141 :: 		
0x0C3B	0x09F6      	COMF       R6, 1
;__Lib_Math.c,1142 :: 		
0x0C3C	0x09F7      	COMF       R7, 1
;__Lib_Math.c,1143 :: 		
0x0C3D	0x0AF4      	INCF       R4, 1
;__Lib_Math.c,1144 :: 		
0x0C3E	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1145 :: 		
0x0C3F	0x0AF5      	INCF       R5, 1
;__Lib_Math.c,1146 :: 		
0x0C40	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1147 :: 		
0x0C41	0x0AF6      	INCF       R6, 1
;__Lib_Math.c,1148 :: 		
0x0C42	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1149 :: 		
0x0C43	0x0AF7      	INCF       R7, 1
;__Lib_Math.c,1151 :: 		
CA3232S:
;__Lib_Math.c,1152 :: 		
0x0C44	0x1FF3      	BTFSS      R3, 7
;__Lib_Math.c,1153 :: 		
0x0C45	0x2C51      	GOTO       C3232SX
;__Lib_Math.c,1155 :: 		
0x0C46	0x09F0      	COMF       R0, 1
;__Lib_Math.c,1156 :: 		
0x0C47	0x09F1      	COMF       R1, 1
;__Lib_Math.c,1157 :: 		
0x0C48	0x09F2      	COMF       R2, 1
;__Lib_Math.c,1158 :: 		
0x0C49	0x09F3      	COMF       R3, 1
;__Lib_Math.c,1159 :: 		
0x0C4A	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,1160 :: 		
0x0C4B	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1161 :: 		
0x0C4C	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,1162 :: 		
0x0C4D	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1163 :: 		
0x0C4E	0x0AF2      	INCF       R2, 1
;__Lib_Math.c,1164 :: 		
0x0C4F	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1165 :: 		
0x0C50	0x0AF3      	INCF       R3, 1
;__Lib_Math.c,1167 :: 		
C3232SX:
;__Lib_Math.c,1168 :: 		
0x0C51	0x0873      	MOVF       R3, 0
;__Lib_Math.c,1169 :: 		
0x0C52	0x0477      	IORWF       R7, 0
;__Lib_Math.c,1170 :: 		
0x0C53	0x00A0      	MOVWF      ___math_tempb
;__Lib_Math.c,1171 :: 		
0x0C54	0x1BA0      	BTFSC      ___math_tempb, 7
;__Lib_Math.c,1172 :: 		
0x0C55	0x2C74      	GOTO       C3232SX1
;__Lib_Math.c,1174 :: 		
C3232S:
;__Lib_Math.c,1177 :: 		
0x0C56	0x3180      	MOVLP      0
0x0C57	0x2373      	CALL       _SDIV3232L
0x0C58	0x3188      	MOVLP      8
;__Lib_Math.c,1181 :: 		
0x0C59	0x1BFC      	BTFSC      R12, 7
;__Lib_Math.c,1182 :: 		
0x0C5A	0x2C91      	GOTO       C3232SX4
;__Lib_Math.c,1184 :: 		
C3232SOK:
;__Lib_Math.c,1185 :: 		
0x0C5B	0x1FFD      	BTFSS      R13, 7
;__Lib_Math.c,1186 :: 		
0x0C5C	0x2CB8      	GOTO       END_ALL
;__Lib_Math.c,1188 :: 		
0x0C5D	0x09F0      	COMF       R0, 1
;__Lib_Math.c,1189 :: 		
0x0C5E	0x09F1      	COMF       R1, 1
;__Lib_Math.c,1190 :: 		
0x0C5F	0x09F2      	COMF       R2, 1
;__Lib_Math.c,1191 :: 		
0x0C60	0x09F3      	COMF       R3, 1
;__Lib_Math.c,1192 :: 		
0x0C61	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,1193 :: 		
0x0C62	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1194 :: 		
0x0C63	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,1195 :: 		
0x0C64	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1196 :: 		
0x0C65	0x0AF2      	INCF       R2, 1
;__Lib_Math.c,1197 :: 		
0x0C66	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1198 :: 		
0x0C67	0x0AF3      	INCF       R3, 1
;__Lib_Math.c,1200 :: 		
0x0C68	0x09F8      	COMF       R8, 1
;__Lib_Math.c,1201 :: 		
0x0C69	0x09F9      	COMF       R9, 1
;__Lib_Math.c,1202 :: 		
0x0C6A	0x09FA      	COMF       R10, 1
;__Lib_Math.c,1203 :: 		
0x0C6B	0x09FB      	COMF       R11, 1
;__Lib_Math.c,1204 :: 		
0x0C6C	0x0AF8      	INCF       R8, 1
;__Lib_Math.c,1205 :: 		
0x0C6D	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1206 :: 		
0x0C6E	0x0AF9      	INCF       R9, 1
;__Lib_Math.c,1207 :: 		
0x0C6F	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1208 :: 		
0x0C70	0x0AFA      	INCF       R10, 1
;__Lib_Math.c,1209 :: 		
0x0C71	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1210 :: 		
0x0C72	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,1212 :: 		
0x0C73	0x2CB8      	GOTO       END_ALL
;__Lib_Math.c,1214 :: 		
C3232SX1:
;__Lib_Math.c,1215 :: 		
0x0C74	0x1FF7      	BTFSS      R7, 7
;__Lib_Math.c,1216 :: 		
0x0C75	0x2C8B      	GOTO       C3232SX3
;__Lib_Math.c,1217 :: 		
0x0C76	0x1BF3      	BTFSC      R3, 7
;__Lib_Math.c,1218 :: 		
0x0C77	0x2C85      	GOTO       C3232SX2
;__Lib_Math.c,1219 :: 		
0x0C78	0x0873      	MOVF       R3, 0
;__Lib_Math.c,1220 :: 		
0x0C79	0x00FB      	MOVWF      R11
;__Lib_Math.c,1221 :: 		
0x0C7A	0x0872      	MOVF       R2, 0
;__Lib_Math.c,1222 :: 		
0x0C7B	0x00FA      	MOVWF      R10
;__Lib_Math.c,1223 :: 		
0x0C7C	0x0871      	MOVF       R1, 0
;__Lib_Math.c,1224 :: 		
0x0C7D	0x00F9      	MOVWF      R9
;__Lib_Math.c,1225 :: 		
0x0C7E	0x0870      	MOVF       R0, 0
;__Lib_Math.c,1226 :: 		
0x0C7F	0x00F8      	MOVWF      R8
;__Lib_Math.c,1227 :: 		
0x0C80	0x01F3      	CLRF       R3
;__Lib_Math.c,1228 :: 		
0x0C81	0x01F2      	CLRF       R2
;__Lib_Math.c,1229 :: 		
0x0C82	0x01F1      	CLRF       R1
;__Lib_Math.c,1230 :: 		
0x0C83	0x01F0      	CLRF       R0
;__Lib_Math.c,1231 :: 		
0x0C84	0x2C5B      	GOTO       C3232SOK
;__Lib_Math.c,1232 :: 		
C3232SX2:
;__Lib_Math.c,1233 :: 		
0x0C85	0x01F3      	CLRF       R3
;__Lib_Math.c,1234 :: 		
0x0C86	0x01F2      	CLRF       R2
;__Lib_Math.c,1235 :: 		
0x0C87	0x01F1      	CLRF       R1
;__Lib_Math.c,1236 :: 		
0x0C88	0x01F0      	CLRF       R0
;__Lib_Math.c,1237 :: 		
0x0C89	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,1238 :: 		
0x0C8A	0x3400      	RETLW      0
;__Lib_Math.c,1240 :: 		
C3232SX3:
;__Lib_Math.c,1241 :: 		
0x0C8B	0x09F3      	COMF       R3, 1
;__Lib_Math.c,1242 :: 		
0x0C8C	0x09F2      	COMF       R2, 1
;__Lib_Math.c,1243 :: 		
0x0C8D	0x09F1      	COMF       R1, 1
;__Lib_Math.c,1244 :: 		
0x0C8E	0x09F0      	COMF       R0, 1
;__Lib_Math.c,1246 :: 		
0x0C8F	0x17FC      	BSF        R12, 7
;__Lib_Math.c,1248 :: 		
0x0C90	0x2C56      	GOTO       C3232S
;__Lib_Math.c,1250 :: 		
C3232SX4:
;__Lib_Math.c,1251 :: 		
0x0C91	0x0AF8      	INCF       R8, 1
;__Lib_Math.c,1252 :: 		
0x0C92	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1253 :: 		
0x0C93	0x0AF9      	INCF       R9, 1
;__Lib_Math.c,1254 :: 		
0x0C94	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1255 :: 		
0x0C95	0x0AFA      	INCF       R10, 1
;__Lib_Math.c,1256 :: 		
0x0C96	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1257 :: 		
0x0C97	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,1258 :: 		
0x0C98	0x0874      	MOVF       R4, 0
;__Lib_Math.c,1259 :: 		
0x0C99	0x0278      	SUBWF      R8, 0
;__Lib_Math.c,1260 :: 		
0x0C9A	0x1D03      	BTFSS      STATUS, 2
;__Lib_Math.c,1261 :: 		
0x0C9B	0x2C5B      	GOTO       C3232SOK
;__Lib_Math.c,1262 :: 		
0x0C9C	0x0875      	MOVF       R5, 0
;__Lib_Math.c,1263 :: 		
0x0C9D	0x0279      	SUBWF      R9, 0
;__Lib_Math.c,1264 :: 		
0x0C9E	0x1D03      	BTFSS      STATUS, 2
;__Lib_Math.c,1265 :: 		
0x0C9F	0x2C5B      	GOTO       C3232SOK
;__Lib_Math.c,1266 :: 		
0x0CA0	0x0876      	MOVF       R6, 0
;__Lib_Math.c,1267 :: 		
0x0CA1	0x027A      	SUBWF      R10, 0
;__Lib_Math.c,1268 :: 		
0x0CA2	0x1D03      	BTFSS      STATUS, 2
;__Lib_Math.c,1269 :: 		
0x0CA3	0x2C5B      	GOTO       C3232SOK
;__Lib_Math.c,1270 :: 		
0x0CA4	0x0877      	MOVF       R7, 0
;__Lib_Math.c,1271 :: 		
0x0CA5	0x027B      	SUBWF      R11, 0
;__Lib_Math.c,1272 :: 		
0x0CA6	0x1D03      	BTFSS      STATUS, 2
;__Lib_Math.c,1273 :: 		
0x0CA7	0x2C5B      	GOTO       C3232SOK
;__Lib_Math.c,1274 :: 		
0x0CA8	0x01FB      	CLRF       R11
;__Lib_Math.c,1275 :: 		
0x0CA9	0x01FA      	CLRF       R10
;__Lib_Math.c,1276 :: 		
0x0CAA	0x01F9      	CLRF       R9
;__Lib_Math.c,1277 :: 		
0x0CAB	0x01F8      	CLRF       R8
;__Lib_Math.c,1278 :: 		
0x0CAC	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,1279 :: 		
0x0CAD	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1280 :: 		
0x0CAE	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,1281 :: 		
0x0CAF	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1282 :: 		
0x0CB0	0x0AF2      	INCF       R2, 1
;__Lib_Math.c,1283 :: 		
0x0CB1	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,1284 :: 		
0x0CB2	0x0AF3      	INCF       R3, 1
;__Lib_Math.c,1285 :: 		
0x0CB3	0x1FF3      	BTFSS      R3, 7
;__Lib_Math.c,1286 :: 		
0x0CB4	0x2C5B      	GOTO       C3232SOK
;__Lib_Math.c,1287 :: 		
0x0CB5	0x01A0      	CLRF       ___math_tempb
;__Lib_Math.c,1288 :: 		
0x0CB6	0x1620      	BSF        ___math_tempb, 4
;__Lib_Math.c,1289 :: 		
0x0CB7	0x34FF      	RETLW      255
;__Lib_Math.c,1290 :: 		
END_ALL:
;__Lib_Math.c,1291 :: 		
0x0CB8	0x01A0      	CLRF       ___math_tempb
;__Lib_Math.c,1292 :: 		
0x0CB9	0x1C7C      	BTFSS      R12, 0
;__Lib_Math.c,1293 :: 		
0x0CBA	0x2CBE      	GOTO       avoid_comfrem
;__Lib_Math.c,1295 :: 		
0x0CBB	0x3180      	MOVLP      0
0x0CBC	0x249F      	CALL       _COMFREM
0x0CBD	0x3188      	MOVLP      8
;__Lib_Math.c,1297 :: 		
avoid_comfrem:
;__Lib_Math.c,1298 :: 		
0x0CBE	0x3E00      	ADDLW      0
;__Lib_Math.c,1300 :: 		
L_end_Div_32x32_S:
0x0CBF	0x0008      	RETURN
; end of _Div_32x32_S
_Button:
;__Lib_Button.c,6 :: 		
;__Lib_Button.c,8 :: 		
0x0CC0	0x002C      	MOVLB      12
0x0CC1	0x01A1      	CLRF       Button_rslt_L0
;__Lib_Button.c,11 :: 		
0x0CC2	0x002B      	MOVLB      11
0x0CC3	0x086D      	MOVF       FARG_Button_pin, 0
0x0CC4	0x00F1      	MOVWF      R1
0x0CC5	0x3001      	MOVLW      1
0x0CC6	0x00F0      	MOVWF      R0
0x0CC7	0x0871      	MOVF       R1, 0
L__Button5:
0x0CC8	0x1903      	BTFSC      STATUS, 2
0x0CC9	0x2CCD      	GOTO       L__Button6
0x0CCA	0x35F0      	LSLF       R0, 1
0x0CCB	0x3EFF      	ADDLW      255
0x0CCC	0x2CC8      	GOTO       L__Button5
L__Button6:
0x0CCD	0x0870      	MOVF       R0, 0
0x0CCE	0x002C      	MOVLB      12
0x0CCF	0x00A0      	MOVWF      Button_pMask_L0
;__Lib_Button.c,13 :: 		
0x0CD0	0x002B      	MOVLB      11
0x0CD1	0x086B      	MOVF       FARG_Button_port, 0
0x0CD2	0x0084      	MOVWF      FSR0
0x0CD3	0x086C      	MOVF       FARG_Button_port+1, 0
0x0CD4	0x0085      	MOVWF      FSR0H
0x0CD5	0x0870      	MOVF       R0, 0
0x0CD6	0x0500      	ANDWF      INDF0, 0
0x0CD7	0x00F1      	MOVWF      R1
0x0CD8	0x0871      	MOVF       R1, 0
0x0CD9	0x3001      	MOVLW      1
0x0CDA	0x1D03      	BTFSS      STATUS, 2
0x0CDB	0x3000      	MOVLW      0
0x0CDC	0x00F0      	MOVWF      R0
0x0CDD	0x086F      	MOVF       FARG_Button_active_state, 0
0x0CDE	0x06F0      	XORWF      R0, 1
0x0CDF	0x1903      	BTFSC      STATUS, 2
0x0CE0	0x2D02      	GOTO       L_Button0
;__Lib_Button.c,15 :: 		
L_Button1:
0x0CE1	0x086E      	MOVF       FARG_Button_time_ms, 0
0x0CE2	0x3C00      	SUBLW      0
0x0CE3	0x1803      	BTFSC      STATUS, 0
0x0CE4	0x2CED      	GOTO       L_Button2
;__Lib_Button.c,16 :: 		
0x0CE5	0x3180      	MOVLP      0
0x0CE6	0x24AB      	CALL       _Delay_500us
0x0CE7	0x3188      	MOVLP      8
;__Lib_Button.c,17 :: 		
0x0CE8	0x3180      	MOVLP      0
0x0CE9	0x24AB      	CALL       _Delay_500us
0x0CEA	0x3188      	MOVLP      8
;__Lib_Button.c,18 :: 		
0x0CEB	0x03EE      	DECF       FARG_Button_time_ms, 1
;__Lib_Button.c,19 :: 		
0x0CEC	0x2CE1      	GOTO       L_Button1
L_Button2:
;__Lib_Button.c,21 :: 		
0x0CED	0x086B      	MOVF       FARG_Button_port, 0
0x0CEE	0x0084      	MOVWF      FSR0
0x0CEF	0x086C      	MOVF       FARG_Button_port+1, 0
0x0CF0	0x0085      	MOVWF      FSR0H
0x0CF1	0x002C      	MOVLB      12
0x0CF2	0x0820      	MOVF       Button_pMask_L0, 0
0x0CF3	0x0500      	ANDWF      INDF0, 0
0x0CF4	0x00F1      	MOVWF      R1
0x0CF5	0x0871      	MOVF       R1, 0
0x0CF6	0x3001      	MOVLW      1
0x0CF7	0x1D03      	BTFSS      STATUS, 2
0x0CF8	0x3000      	MOVLW      0
0x0CF9	0x00F0      	MOVWF      R0
0x0CFA	0x002B      	MOVLB      11
0x0CFB	0x086F      	MOVF       FARG_Button_active_state, 0
0x0CFC	0x06F0      	XORWF      R0, 1
0x0CFD	0x1903      	BTFSC      STATUS, 2
0x0CFE	0x2D02      	GOTO       L_Button3
;__Lib_Button.c,22 :: 		
0x0CFF	0x30FF      	MOVLW      255
0x0D00	0x002C      	MOVLB      12
0x0D01	0x00A1      	MOVWF      Button_rslt_L0
L_Button3:
;__Lib_Button.c,23 :: 		
L_Button0:
0x0D02	0x002C      	MOVLB      12
;__Lib_Button.c,25 :: 		
0x0D03	0x0821      	MOVF       Button_rslt_L0, 0
0x0D04	0x00F0      	MOVWF      R0
;__Lib_Button.c,26 :: 		
L_end_Button:
0x0D05	0x0008      	RETURN
; end of _Button
_get_forward:
;main.h,81 :: 		int get_forward() {
;main.h,83 :: 		FVRCON = 0b10000001; // ADC 1024 vmV Vref
0x0D06	0x3081      	MOVLW      129
0x0D07	0x0022      	MOVLB      2
0x0D08	0x0097      	MOVWF      FVRCON
;main.h,84 :: 		while(FVRCON.B6 == 0);
L_get_forward33:
0x0D09	0x1B17      	BTFSC      FVRCON, 6
0x0D0A	0x2D0C      	GOTO       L_get_forward34
0x0D0B	0x2D09      	GOTO       L_get_forward33
L_get_forward34:
;main.h,85 :: 		Forward = ADC_Get_Sample(1);
0x0D0C	0x3001      	MOVLW      1
0x0D0D	0x002C      	MOVLB      12
0x0D0E	0x00A4      	MOVWF      FARG_ADC_Get_Sample_channel
0x0D0F	0x3180      	MOVLP      0
0x0D10	0x25FD      	CALL       _ADC_Get_Sample
0x0D11	0x3188      	MOVLP      8
0x0D12	0x0870      	MOVF       R0, 0
0x0D13	0x002B      	MOVLB      11
0x0D14	0x00EB      	MOVWF      get_forward_Forward_L0
0x0D15	0x0871      	MOVF       R1, 0
0x0D16	0x00EC      	MOVWF      get_forward_Forward_L0+1
;main.h,86 :: 		if(Forward <= 1000) return Forward;
0x0D17	0x3080      	MOVLW      128
0x0D18	0x3A03      	XORLW      3
0x0D19	0x00F2      	MOVWF      R2
0x0D1A	0x3080      	MOVLW      128
0x0D1B	0x0671      	XORWF      R1, 0
0x0D1C	0x0272      	SUBWF      R2, 0
0x0D1D	0x1D03      	BTFSS      STATUS, 2
0x0D1E	0x2D21      	GOTO       L__get_forward564
0x0D1F	0x0870      	MOVF       R0, 0
0x0D20	0x3CE8      	SUBLW      232
L__get_forward564:
0x0D21	0x1C03      	BTFSS      STATUS, 0
0x0D22	0x2D28      	GOTO       L_get_forward35
0x0D23	0x086B      	MOVF       get_forward_Forward_L0, 0
0x0D24	0x00F0      	MOVWF      R0
0x0D25	0x086C      	MOVF       get_forward_Forward_L0+1, 0
0x0D26	0x00F1      	MOVWF      R1
0x0D27	0x2D74      	GOTO       L_end_get_forward
L_get_forward35:
;main.h,87 :: 		FVRCON = 0b10000010; // ADC 2048 vmV Vref
0x0D28	0x3082      	MOVLW      130
0x0D29	0x0022      	MOVLB      2
0x0D2A	0x0097      	MOVWF      FVRCON
;main.h,88 :: 		while(FVRCON.B6 == 0);
L_get_forward36:
0x0D2B	0x1B17      	BTFSC      FVRCON, 6
0x0D2C	0x2D2E      	GOTO       L_get_forward37
0x0D2D	0x2D2B      	GOTO       L_get_forward36
L_get_forward37:
;main.h,89 :: 		Forward = ADC_Get_Sample(1);
0x0D2E	0x3001      	MOVLW      1
0x0D2F	0x002C      	MOVLB      12
0x0D30	0x00A4      	MOVWF      FARG_ADC_Get_Sample_channel
0x0D31	0x3180      	MOVLP      0
0x0D32	0x25FD      	CALL       _ADC_Get_Sample
0x0D33	0x3188      	MOVLP      8
0x0D34	0x0870      	MOVF       R0, 0
0x0D35	0x002B      	MOVLB      11
0x0D36	0x00EB      	MOVWF      get_forward_Forward_L0
0x0D37	0x0871      	MOVF       R1, 0
0x0D38	0x00EC      	MOVWF      get_forward_Forward_L0+1
;main.h,90 :: 		if(Forward <= 1000) return Forward * 2;
0x0D39	0x3080      	MOVLW      128
0x0D3A	0x3A03      	XORLW      3
0x0D3B	0x00F2      	MOVWF      R2
0x0D3C	0x3080      	MOVLW      128
0x0D3D	0x0671      	XORWF      R1, 0
0x0D3E	0x0272      	SUBWF      R2, 0
0x0D3F	0x1D03      	BTFSS      STATUS, 2
0x0D40	0x2D43      	GOTO       L__get_forward565
0x0D41	0x0870      	MOVF       R0, 0
0x0D42	0x3CE8      	SUBLW      232
L__get_forward565:
0x0D43	0x1C03      	BTFSS      STATUS, 0
0x0D44	0x2D4C      	GOTO       L_get_forward38
0x0D45	0x086B      	MOVF       get_forward_Forward_L0, 0
0x0D46	0x00F0      	MOVWF      R0
0x0D47	0x086C      	MOVF       get_forward_Forward_L0+1, 0
0x0D48	0x00F1      	MOVWF      R1
0x0D49	0x35F0      	LSLF       R0, 1
0x0D4A	0x0DF1      	RLF        R1, 1
0x0D4B	0x2D74      	GOTO       L_end_get_forward
L_get_forward38:
;main.h,91 :: 		FVRCON = 0b10000011; // ADC 4096 vmV Vref
0x0D4C	0x3083      	MOVLW      131
0x0D4D	0x0022      	MOVLB      2
0x0D4E	0x0097      	MOVWF      FVRCON
;main.h,92 :: 		while(FVRCON.B6 == 0);
L_get_forward39:
0x0D4F	0x1B17      	BTFSC      FVRCON, 6
0x0D50	0x2D52      	GOTO       L_get_forward40
0x0D51	0x2D4F      	GOTO       L_get_forward39
L_get_forward40:
;main.h,93 :: 		Forward = ADC_Get_Sample(1);
0x0D52	0x3001      	MOVLW      1
0x0D53	0x002C      	MOVLB      12
0x0D54	0x00A4      	MOVWF      FARG_ADC_Get_Sample_channel
0x0D55	0x3180      	MOVLP      0
0x0D56	0x25FD      	CALL       _ADC_Get_Sample
0x0D57	0x3188      	MOVLP      8
0x0D58	0x0870      	MOVF       R0, 0
0x0D59	0x002B      	MOVLB      11
0x0D5A	0x00EB      	MOVWF      get_forward_Forward_L0
0x0D5B	0x0871      	MOVF       R1, 0
0x0D5C	0x00EC      	MOVWF      get_forward_Forward_L0+1
;main.h,94 :: 		if(Forward == 1024) Overload = 1;
0x0D5D	0x0871      	MOVF       R1, 0
0x0D5E	0x3A04      	XORLW      4
0x0D5F	0x1D03      	BTFSS      STATUS, 2
0x0D60	0x2D63      	GOTO       L__get_forward566
0x0D61	0x3000      	MOVLW      0
0x0D62	0x0670      	XORWF      R0, 0
L__get_forward566:
0x0D63	0x1D03      	BTFSS      STATUS, 2
0x0D64	0x2D69      	GOTO       L_get_forward41
0x0D65	0x3001      	MOVLW      1
0x0D66	0x0028      	MOVLB      8
0x0D67	0x00A9      	MOVWF      main_Overload
0x0D68	0x2D6B      	GOTO       L_get_forward42
L_get_forward41:
0x0D69	0x0028      	MOVLB      8
;main.h,95 :: 		else Overload = 0;
0x0D6A	0x01A9      	CLRF       main_Overload
L_get_forward42:
;main.h,96 :: 		return Forward * 4;
0x0D6B	0x002B      	MOVLB      11
0x0D6C	0x086B      	MOVF       get_forward_Forward_L0, 0
0x0D6D	0x00F0      	MOVWF      R0
0x0D6E	0x086C      	MOVF       get_forward_Forward_L0+1, 0
0x0D6F	0x00F1      	MOVWF      R1
0x0D70	0x35F0      	LSLF       R0, 1
0x0D71	0x0DF1      	RLF        R1, 1
0x0D72	0x35F0      	LSLF       R0, 1
0x0D73	0x0DF1      	RLF        R1, 1
;main.h,97 :: 		}
L_end_get_forward:
0x0D74	0x0008      	RETURN
; end of _get_forward
_Longint2Double:
;__Lib_MathDouble.c,1891 :: 		
;__Lib_MathDouble.c,1898 :: 		
0x0D75	0x0020      	MOVLB      0
;__Lib_MathDouble.c,1900 :: 		
0x0D76	0x0870      	MOVF       R0, 0
;__Lib_MathDouble.c,1901 :: 		
0x0D77	0x00F8      	MOVWF      R8
;__Lib_MathDouble.c,1902 :: 		
0x0D78	0x0871      	MOVF       R1, 0
;__Lib_MathDouble.c,1903 :: 		
0x0D79	0x00F0      	MOVWF      R0
;__Lib_MathDouble.c,1904 :: 		
0x0D7A	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,1905 :: 		
0x0D7B	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,1906 :: 		
0x0D7C	0x0873      	MOVF       R3, 0
;__Lib_MathDouble.c,1907 :: 		
0x0D7D	0x00F2      	MOVWF      R2
;__Lib_MathDouble.c,1908 :: 		
0x0D7E	0x01F3      	CLRF       R3
;__Lib_MathDouble.c,1911 :: 		
0x0D7F	0x01FB      	CLRF       R11
;__Lib_MathDouble.c,1912 :: 		
0x0D80	0x01FC      	CLRF       R12
;__Lib_MathDouble.c,1914 :: 		
0x0D81	0x309E      	MOVLW      158
;__Lib_MathDouble.c,1915 :: 		
0x0D82	0x00F3      	MOVWF      R3
;__Lib_MathDouble.c,1916 :: 		
0x0D83	0x01FA      	CLRF       R10
;__Lib_MathDouble.c,1917 :: 		
0x0D84	0x1FF2      	BTFSS      R2, 7
;__Lib_MathDouble.c,1918 :: 		
0x0D85	0x2D92      	GOTO       FLO3232EEE
;__Lib_MathDouble.c,1919 :: 		
0x0D86	0x09F8      	COMF       R8, 1
;__Lib_MathDouble.c,1920 :: 		
0x0D87	0x09F0      	COMF       R0, 1
;__Lib_MathDouble.c,1921 :: 		
0x0D88	0x09F1      	COMF       R1, 1
;__Lib_MathDouble.c,1922 :: 		
0x0D89	0x09F2      	COMF       R2, 1
;__Lib_MathDouble.c,1923 :: 		
0x0D8A	0x0AF8      	INCF       R8, 1
;__Lib_MathDouble.c,1924 :: 		
0x0D8B	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,1925 :: 		
0x0D8C	0x0AF0      	INCF       R0, 1
;__Lib_MathDouble.c,1926 :: 		
0x0D8D	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,1927 :: 		
0x0D8E	0x0AF1      	INCF       R1, 1
;__Lib_MathDouble.c,1928 :: 		
0x0D8F	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,1929 :: 		
0x0D90	0x0AF2      	INCF       R2, 1
;__Lib_MathDouble.c,1930 :: 		
0x0D91	0x17FA      	BSF        R10, 7
;__Lib_MathDouble.c,1931 :: 		
FLO3232EEE:
;__Lib_MathDouble.c,1932 :: 		
0x0D92	0x3002      	MOVLW      2
;__Lib_MathDouble.c,1933 :: 		
0x0D93	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,1935 :: 		
0x0D94	0x3180      	MOVLP      0
0x0D95	0x252D      	CALL       _NRM4032
0x0D96	0x3188      	MOVLP      8
;__Lib_MathDouble.c,1936 :: 		
L_end_Longint2Double:
0x0D97	0x0008      	RETURN
; end of _Longint2Double
_Mul_32x32_FP:
;__Lib_MathDouble.c,608 :: 		
;__Lib_MathDouble.c,620 :: 		
;__Lib_MathDouble.c,622 :: 		
0x0D98	0x0020      	MOVLB      0
;__Lib_MathDouble.c,624 :: 		
0x0D99	0x01FB      	CLRF       R11
;__Lib_MathDouble.c,625 :: 		
0x0D9A	0x0873      	MOVF       R3, 0
;__Lib_MathDouble.c,626 :: 		
0x0D9B	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,627 :: 		
0x0D9C	0x0877      	MOVF       R7, 0
;__Lib_MathDouble.c,628 :: 		
0x0D9D	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,629 :: 		
0x0D9E	0x2DEE      	GOTO       JPMRES032
;__Lib_MathDouble.c,631 :: 		
0x0D9F	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,632 :: 		
0x0DA0	0x0676      	XORWF      R6, 0
;__Lib_MathDouble.c,633 :: 		
0x0DA1	0x00FA      	MOVWF      R10
;__Lib_MathDouble.c,634 :: 		
0x0DA2	0x0877      	MOVF       R7, 0
;__Lib_MathDouble.c,635 :: 		
0x0DA3	0x07F3      	ADDWF      R3, 1
;__Lib_MathDouble.c,636 :: 		
0x0DA4	0x307E      	MOVLW      126
;__Lib_MathDouble.c,637 :: 		
0x0DA5	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,638 :: 		
0x0DA6	0x2DAB      	GOTO       MTUN32
;__Lib_MathDouble.c,639 :: 		
0x0DA7	0x02F3      	SUBWF      R3, 1
;__Lib_MathDouble.c,640 :: 		
0x0DA8	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,641 :: 		
0x0DA9	0x2DF3      	GOTO       JPMSETFOV32
;__Lib_MathDouble.c,642 :: 		
0x0DAA	0x2DAE      	GOTO       MOK32
;__Lib_MathDouble.c,643 :: 		
MTUN32:
;__Lib_MathDouble.c,644 :: 		
0x0DAB	0x02F3      	SUBWF      R3, 1
;__Lib_MathDouble.c,645 :: 		
0x0DAC	0x1C03      	BTFSS      STATUS, 0
;__Lib_MathDouble.c,646 :: 		
0x0DAD	0x2DF8      	GOTO       JPMSETFUN32
;__Lib_MathDouble.c,647 :: 		
MOK32:
;__Lib_MathDouble.c,648 :: 		
0x0DAE	0x0872      	MOVF       R2, 0
;__Lib_MathDouble.c,649 :: 		
0x0DAF	0x00F8      	MOVWF      R8
;__Lib_MathDouble.c,650 :: 		
0x0DB0	0x0871      	MOVF       R1, 0
;__Lib_MathDouble.c,651 :: 		
0x0DB1	0x00FC      	MOVWF      R12
;__Lib_MathDouble.c,652 :: 		
0x0DB2	0x0870      	MOVF       R0, 0
;__Lib_MathDouble.c,653 :: 		
0x0DB3	0x00FD      	MOVWF      R13
;__Lib_MathDouble.c,654 :: 		
0x0DB4	0x17F8      	BSF        R8, 7
;__Lib_MathDouble.c,655 :: 		
0x0DB5	0x17F6      	BSF        R6, 7
;__Lib_MathDouble.c,656 :: 		
0x0DB6	0x1003      	BCF        STATUS, 0
;__Lib_MathDouble.c,657 :: 		
0x0DB7	0x01F2      	CLRF       R2
;__Lib_MathDouble.c,658 :: 		
0x0DB8	0x01F1      	CLRF       R1
;__Lib_MathDouble.c,659 :: 		
0x0DB9	0x01F0      	CLRF       R0
;__Lib_MathDouble.c,660 :: 		
0x0DBA	0x3018      	MOVLW      24
;__Lib_MathDouble.c,661 :: 		
0x0DBB	0x00A1      	MOVWF      __math_tempbD
;__Lib_MathDouble.c,662 :: 		
MLOOP32:
;__Lib_MathDouble.c,663 :: 		
0x0DBC	0x1C7D      	BTFSS      R13, 0
;__Lib_MathDouble.c,664 :: 		
0x0DBD	0x2DC8      	GOTO       MNOADD32
;__Lib_MathDouble.c,666 :: 		
0x0DBE	0x0874      	MOVF       R4, 0
;__Lib_MathDouble.c,667 :: 		
0x0DBF	0x07F0      	ADDWF      R0, 1
;__Lib_MathDouble.c,668 :: 		
0x0DC0	0x0875      	MOVF       R5, 0
;__Lib_MathDouble.c,669 :: 		
0x0DC1	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,670 :: 		
0x0DC2	0x0F75      	INCFSZ     R5, 0
;__Lib_MathDouble.c,671 :: 		
0x0DC3	0x07F1      	ADDWF      R1, 1
;__Lib_MathDouble.c,672 :: 		
0x0DC4	0x0876      	MOVF       R6, 0
;__Lib_MathDouble.c,673 :: 		
0x0DC5	0x1803      	BTFSC      STATUS, 0
;__Lib_MathDouble.c,674 :: 		
0x0DC6	0x0F76      	INCFSZ     R6, 0
;__Lib_MathDouble.c,675 :: 		
0x0DC7	0x07F2      	ADDWF      R2, 1
;__Lib_MathDouble.c,676 :: 		
MNOADD32:
;__Lib_MathDouble.c,677 :: 		
0x0DC8	0x0CF2      	RRF        R2, 1
;__Lib_MathDouble.c,678 :: 		
0x0DC9	0x0CF1      	RRF        R1, 1
;__Lib_MathDouble.c,679 :: 		
0x0DCA	0x0CF0      	RRF        R0, 1
;__Lib_MathDouble.c,680 :: 		
0x0DCB	0x0CF8      	RRF        R8, 1
;__Lib_MathDouble.c,681 :: 		
0x0DCC	0x0CFC      	RRF        R12, 1
;__Lib_MathDouble.c,682 :: 		
0x0DCD	0x0CFD      	RRF        R13, 1
;__Lib_MathDouble.c,683 :: 		
0x0DCE	0x1003      	BCF        STATUS, 0
;__Lib_MathDouble.c,684 :: 		
0x0DCF	0x0BA1      	DECFSZ     __math_tempbD, 1
;__Lib_MathDouble.c,685 :: 		
0x0DD0	0x2DBC      	GOTO       MLOOP32
;__Lib_MathDouble.c,686 :: 		
0x0DD1	0x1BF2      	BTFSC      R2, 7
;__Lib_MathDouble.c,687 :: 		
0x0DD2	0x2DD8      	GOTO       MROUND32
;__Lib_MathDouble.c,688 :: 		
0x0DD3	0x0DF8      	RLF        R8, 1
;__Lib_MathDouble.c,689 :: 		
0x0DD4	0x0DF0      	RLF        R0, 1
;__Lib_MathDouble.c,690 :: 		
0x0DD5	0x0DF1      	RLF        R1, 1
;__Lib_MathDouble.c,691 :: 		
0x0DD6	0x0DF2      	RLF        R2, 1
;__Lib_MathDouble.c,692 :: 		
0x0DD7	0x03F3      	DECF       R3, 1
;__Lib_MathDouble.c,693 :: 		
MROUND32:
;__Lib_MathDouble.c,694 :: 		
0x0DD8	0x1B7B      	BTFSC      R11, 6
;__Lib_MathDouble.c,695 :: 		
0x0DD9	0x1C70      	BTFSS      R0, 0
;__Lib_MathDouble.c,696 :: 		
0x0DDA	0x2DEA      	GOTO       MUL32OK
;__Lib_MathDouble.c,697 :: 		
0x0DDB	0x1FF8      	BTFSS      R8, 7
;__Lib_MathDouble.c,698 :: 		
0x0DDC	0x2DEA      	GOTO       MUL32OK
;__Lib_MathDouble.c,699 :: 		
0x0DDD	0x0AF0      	INCF       R0, 1
;__Lib_MathDouble.c,700 :: 		
0x0DDE	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,701 :: 		
0x0DDF	0x0AF1      	INCF       R1, 1
;__Lib_MathDouble.c,702 :: 		
0x0DE0	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,703 :: 		
0x0DE1	0x0AF2      	INCF       R2, 1
;__Lib_MathDouble.c,704 :: 		
0x0DE2	0x1D03      	BTFSS      STATUS, 2
;__Lib_MathDouble.c,705 :: 		
0x0DE3	0x2DEA      	GOTO       MUL32OK
;__Lib_MathDouble.c,706 :: 		
0x0DE4	0x0CF2      	RRF        R2, 1
;__Lib_MathDouble.c,707 :: 		
0x0DE5	0x0CF1      	RRF        R1, 1
;__Lib_MathDouble.c,708 :: 		
0x0DE6	0x0CF0      	RRF        R0, 1
;__Lib_MathDouble.c,709 :: 		
0x0DE7	0x0AF3      	INCF       R3, 1
;__Lib_MathDouble.c,710 :: 		
0x0DE8	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,711 :: 		
0x0DE9	0x2DF3      	GOTO       JPMSETFOV32
;__Lib_MathDouble.c,712 :: 		
MUL32OK:
;__Lib_MathDouble.c,713 :: 		
0x0DEA	0x1FFA      	BTFSS      R10, 7
;__Lib_MathDouble.c,714 :: 		
0x0DEB	0x13F2      	BCF        R2, 7
;__Lib_MathDouble.c,715 :: 		
0x0DEC	0x3000      	MOVLW      0
;__Lib_MathDouble.c,717 :: 		
0x0DED	0x2DFC      	GOTO       MUL32EEE
;__Lib_MathDouble.c,718 :: 		
JPMRES032:
;__Lib_MathDouble.c,719 :: 		
0x0DEE	0x3001      	MOVLW      1
;__Lib_MathDouble.c,722 :: 		
0x0DEF	0x3180      	MOVLP      0
0x0DF0	0x2321      	CALL       _RES032
0x0DF1	0x3188      	MOVLP      8
;__Lib_MathDouble.c,724 :: 		
0x0DF2	0x2DFC      	GOTO       MUL32EEE
;__Lib_MathDouble.c,725 :: 		
JPMSETFOV32:
;__Lib_MathDouble.c,726 :: 		
0x0DF3	0x3002      	MOVLW      2
;__Lib_MathDouble.c,729 :: 		
0x0DF4	0x3180      	MOVLP      0
0x0DF5	0x2315      	CALL       _SETFOV32
0x0DF6	0x3188      	MOVLP      8
;__Lib_MathDouble.c,731 :: 		
0x0DF7	0x2DFC      	GOTO       MUL32EEE
;__Lib_MathDouble.c,732 :: 		
JPMSETFUN32:
;__Lib_MathDouble.c,733 :: 		
0x0DF8	0x3004      	MOVLW      4
;__Lib_MathDouble.c,736 :: 		
0x0DF9	0x3180      	MOVLP      0
0x0DFA	0x2328      	CALL       _SETFUN32
0x0DFB	0x3188      	MOVLP      8
;__Lib_MathDouble.c,738 :: 		
MUL32EEE:
;__Lib_MathDouble.c,739 :: 		
0x0DFC	0x0000      	NOP
;__Lib_MathDouble.c,746 :: 		
L_end_Mul_32x32_FP:
0x0DFD	0x0008      	RETURN
; end of _Mul_32x32_FP
_correction:
;main.h,42 :: 		int correction(int input) {
;main.h,44 :: 		if(input <= 80) return 0;
0x0DFE	0x3080      	MOVLW      128
0x0DFF	0x00F0      	MOVWF      R0
0x0E00	0x3080      	MOVLW      128
0x0E01	0x002B      	MOVLB      11
0x0E02	0x066C      	XORWF      FARG_correction_input+1, 0
0x0E03	0x0270      	SUBWF      R0, 0
0x0E04	0x1D03      	BTFSS      STATUS, 2
0x0E05	0x2E08      	GOTO       L__correction547
0x0E06	0x086B      	MOVF       FARG_correction_input, 0
0x0E07	0x3C50      	SUBLW      80
L__correction547:
0x0E08	0x1C03      	BTFSS      STATUS, 0
0x0E09	0x2E0D      	GOTO       L_correction0
0x0E0A	0x01F0      	CLRF       R0
0x0E0B	0x01F1      	CLRF       R1
0x0E0C	0x2EE0      	GOTO       L_end_correction
L_correction0:
;main.h,45 :: 		if(input <= 171) input += 244;
0x0E0D	0x3080      	MOVLW      128
0x0E0E	0x00F0      	MOVWF      R0
0x0E0F	0x3080      	MOVLW      128
0x0E10	0x066C      	XORWF      FARG_correction_input+1, 0
0x0E11	0x0270      	SUBWF      R0, 0
0x0E12	0x1D03      	BTFSS      STATUS, 2
0x0E13	0x2E16      	GOTO       L__correction548
0x0E14	0x086B      	MOVF       FARG_correction_input, 0
0x0E15	0x3CAB      	SUBLW      171
L__correction548:
0x0E16	0x1C03      	BTFSS      STATUS, 0
0x0E17	0x2E1D      	GOTO       L_correction1
0x0E18	0x30F4      	MOVLW      244
0x0E19	0x07EB      	ADDWF      FARG_correction_input, 1
0x0E1A	0x3000      	MOVLW      0
0x0E1B	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0E1C	0x2EDC      	GOTO       L_correction2
L_correction1:
;main.h,46 :: 		else if(input <= 328) input += 254;
0x0E1D	0x3080      	MOVLW      128
0x0E1E	0x3A01      	XORLW      1
0x0E1F	0x00F0      	MOVWF      R0
0x0E20	0x3080      	MOVLW      128
0x0E21	0x066C      	XORWF      FARG_correction_input+1, 0
0x0E22	0x0270      	SUBWF      R0, 0
0x0E23	0x1D03      	BTFSS      STATUS, 2
0x0E24	0x2E27      	GOTO       L__correction549
0x0E25	0x086B      	MOVF       FARG_correction_input, 0
0x0E26	0x3C48      	SUBLW      72
L__correction549:
0x0E27	0x1C03      	BTFSS      STATUS, 0
0x0E28	0x2E2E      	GOTO       L_correction3
0x0E29	0x30FE      	MOVLW      254
0x0E2A	0x07EB      	ADDWF      FARG_correction_input, 1
0x0E2B	0x3000      	MOVLW      0
0x0E2C	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0E2D	0x2EDC      	GOTO       L_correction4
L_correction3:
;main.h,47 :: 		else if(input <= 582) input += 280;
0x0E2E	0x3080      	MOVLW      128
0x0E2F	0x3A02      	XORLW      2
0x0E30	0x00F0      	MOVWF      R0
0x0E31	0x3080      	MOVLW      128
0x0E32	0x066C      	XORWF      FARG_correction_input+1, 0
0x0E33	0x0270      	SUBWF      R0, 0
0x0E34	0x1D03      	BTFSS      STATUS, 2
0x0E35	0x2E38      	GOTO       L__correction550
0x0E36	0x086B      	MOVF       FARG_correction_input, 0
0x0E37	0x3C46      	SUBLW      70
L__correction550:
0x0E38	0x1C03      	BTFSS      STATUS, 0
0x0E39	0x2E3F      	GOTO       L_correction5
0x0E3A	0x3018      	MOVLW      24
0x0E3B	0x07EB      	ADDWF      FARG_correction_input, 1
0x0E3C	0x3001      	MOVLW      1
0x0E3D	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0E3E	0x2EDC      	GOTO       L_correction6
L_correction5:
;main.h,48 :: 		else if(input <= 820) input += 297;
0x0E3F	0x3080      	MOVLW      128
0x0E40	0x3A03      	XORLW      3
0x0E41	0x00F0      	MOVWF      R0
0x0E42	0x3080      	MOVLW      128
0x0E43	0x066C      	XORWF      FARG_correction_input+1, 0
0x0E44	0x0270      	SUBWF      R0, 0
0x0E45	0x1D03      	BTFSS      STATUS, 2
0x0E46	0x2E49      	GOTO       L__correction551
0x0E47	0x086B      	MOVF       FARG_correction_input, 0
0x0E48	0x3C34      	SUBLW      52
L__correction551:
0x0E49	0x1C03      	BTFSS      STATUS, 0
0x0E4A	0x2E50      	GOTO       L_correction7
0x0E4B	0x3029      	MOVLW      41
0x0E4C	0x07EB      	ADDWF      FARG_correction_input, 1
0x0E4D	0x3001      	MOVLW      1
0x0E4E	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0E4F	0x2EDC      	GOTO       L_correction8
L_correction7:
;main.h,49 :: 		else if(input <= 1100) input += 310;
0x0E50	0x3080      	MOVLW      128
0x0E51	0x3A04      	XORLW      4
0x0E52	0x00F0      	MOVWF      R0
0x0E53	0x3080      	MOVLW      128
0x0E54	0x066C      	XORWF      FARG_correction_input+1, 0
0x0E55	0x0270      	SUBWF      R0, 0
0x0E56	0x1D03      	BTFSS      STATUS, 2
0x0E57	0x2E5A      	GOTO       L__correction552
0x0E58	0x086B      	MOVF       FARG_correction_input, 0
0x0E59	0x3C4C      	SUBLW      76
L__correction552:
0x0E5A	0x1C03      	BTFSS      STATUS, 0
0x0E5B	0x2E61      	GOTO       L_correction9
0x0E5C	0x3036      	MOVLW      54
0x0E5D	0x07EB      	ADDWF      FARG_correction_input, 1
0x0E5E	0x3001      	MOVLW      1
0x0E5F	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0E60	0x2EDC      	GOTO       L_correction10
L_correction9:
;main.h,50 :: 		else if(input <= 2181) input += 430;
0x0E61	0x3080      	MOVLW      128
0x0E62	0x3A08      	XORLW      8
0x0E63	0x00F0      	MOVWF      R0
0x0E64	0x3080      	MOVLW      128
0x0E65	0x066C      	XORWF      FARG_correction_input+1, 0
0x0E66	0x0270      	SUBWF      R0, 0
0x0E67	0x1D03      	BTFSS      STATUS, 2
0x0E68	0x2E6B      	GOTO       L__correction553
0x0E69	0x086B      	MOVF       FARG_correction_input, 0
0x0E6A	0x3C85      	SUBLW      133
L__correction553:
0x0E6B	0x1C03      	BTFSS      STATUS, 0
0x0E6C	0x2E72      	GOTO       L_correction11
0x0E6D	0x30AE      	MOVLW      174
0x0E6E	0x07EB      	ADDWF      FARG_correction_input, 1
0x0E6F	0x3001      	MOVLW      1
0x0E70	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0E71	0x2EDC      	GOTO       L_correction12
L_correction11:
;main.h,51 :: 		else if(input <= 3322) input += 484;
0x0E72	0x3080      	MOVLW      128
0x0E73	0x3A0C      	XORLW      12
0x0E74	0x00F0      	MOVWF      R0
0x0E75	0x3080      	MOVLW      128
0x0E76	0x066C      	XORWF      FARG_correction_input+1, 0
0x0E77	0x0270      	SUBWF      R0, 0
0x0E78	0x1D03      	BTFSS      STATUS, 2
0x0E79	0x2E7C      	GOTO       L__correction554
0x0E7A	0x086B      	MOVF       FARG_correction_input, 0
0x0E7B	0x3CFA      	SUBLW      250
L__correction554:
0x0E7C	0x1C03      	BTFSS      STATUS, 0
0x0E7D	0x2E83      	GOTO       L_correction13
0x0E7E	0x30E4      	MOVLW      228
0x0E7F	0x07EB      	ADDWF      FARG_correction_input, 1
0x0E80	0x3001      	MOVLW      1
0x0E81	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0E82	0x2EDC      	GOTO       L_correction14
L_correction13:
;main.h,52 :: 		else if(input <= 4623) input += 530;
0x0E83	0x3080      	MOVLW      128
0x0E84	0x3A12      	XORLW      18
0x0E85	0x00F0      	MOVWF      R0
0x0E86	0x3080      	MOVLW      128
0x0E87	0x066C      	XORWF      FARG_correction_input+1, 0
0x0E88	0x0270      	SUBWF      R0, 0
0x0E89	0x1D03      	BTFSS      STATUS, 2
0x0E8A	0x2E8D      	GOTO       L__correction555
0x0E8B	0x086B      	MOVF       FARG_correction_input, 0
0x0E8C	0x3C0F      	SUBLW      15
L__correction555:
0x0E8D	0x1C03      	BTFSS      STATUS, 0
0x0E8E	0x2E94      	GOTO       L_correction15
0x0E8F	0x3012      	MOVLW      18
0x0E90	0x07EB      	ADDWF      FARG_correction_input, 1
0x0E91	0x3002      	MOVLW      2
0x0E92	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0E93	0x2EDC      	GOTO       L_correction16
L_correction15:
;main.h,53 :: 		else if(input <= 5862) input += 648;
0x0E94	0x3080      	MOVLW      128
0x0E95	0x3A16      	XORLW      22
0x0E96	0x00F0      	MOVWF      R0
0x0E97	0x3080      	MOVLW      128
0x0E98	0x066C      	XORWF      FARG_correction_input+1, 0
0x0E99	0x0270      	SUBWF      R0, 0
0x0E9A	0x1D03      	BTFSS      STATUS, 2
0x0E9B	0x2E9E      	GOTO       L__correction556
0x0E9C	0x086B      	MOVF       FARG_correction_input, 0
0x0E9D	0x3CE6      	SUBLW      230
L__correction556:
0x0E9E	0x1C03      	BTFSS      STATUS, 0
0x0E9F	0x2EA5      	GOTO       L_correction17
0x0EA0	0x3088      	MOVLW      136
0x0EA1	0x07EB      	ADDWF      FARG_correction_input, 1
0x0EA2	0x3002      	MOVLW      2
0x0EA3	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0EA4	0x2EDC      	GOTO       L_correction18
L_correction17:
;main.h,54 :: 		else if(input <= 7146) input += 743;
0x0EA5	0x3080      	MOVLW      128
0x0EA6	0x3A1B      	XORLW      27
0x0EA7	0x00F0      	MOVWF      R0
0x0EA8	0x3080      	MOVLW      128
0x0EA9	0x066C      	XORWF      FARG_correction_input+1, 0
0x0EAA	0x0270      	SUBWF      R0, 0
0x0EAB	0x1D03      	BTFSS      STATUS, 2
0x0EAC	0x2EAF      	GOTO       L__correction557
0x0EAD	0x086B      	MOVF       FARG_correction_input, 0
0x0EAE	0x3CEA      	SUBLW      234
L__correction557:
0x0EAF	0x1C03      	BTFSS      STATUS, 0
0x0EB0	0x2EB6      	GOTO       L_correction19
0x0EB1	0x30E7      	MOVLW      231
0x0EB2	0x07EB      	ADDWF      FARG_correction_input, 1
0x0EB3	0x3002      	MOVLW      2
0x0EB4	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0EB5	0x2EDC      	GOTO       L_correction20
L_correction19:
;main.h,55 :: 		else if(input <= 8502) input += 800;
0x0EB6	0x3080      	MOVLW      128
0x0EB7	0x3A21      	XORLW      33
0x0EB8	0x00F0      	MOVWF      R0
0x0EB9	0x3080      	MOVLW      128
0x0EBA	0x066C      	XORWF      FARG_correction_input+1, 0
0x0EBB	0x0270      	SUBWF      R0, 0
0x0EBC	0x1D03      	BTFSS      STATUS, 2
0x0EBD	0x2EC0      	GOTO       L__correction558
0x0EBE	0x086B      	MOVF       FARG_correction_input, 0
0x0EBF	0x3C36      	SUBLW      54
L__correction558:
0x0EC0	0x1C03      	BTFSS      STATUS, 0
0x0EC1	0x2EC7      	GOTO       L_correction21
0x0EC2	0x3020      	MOVLW      32
0x0EC3	0x07EB      	ADDWF      FARG_correction_input, 1
0x0EC4	0x3003      	MOVLW      3
0x0EC5	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0EC6	0x2EDC      	GOTO       L_correction22
L_correction21:
;main.h,56 :: 		else if(input <= 10500) input += 840;
0x0EC7	0x3080      	MOVLW      128
0x0EC8	0x3A29      	XORLW      41
0x0EC9	0x00F0      	MOVWF      R0
0x0ECA	0x3080      	MOVLW      128
0x0ECB	0x066C      	XORWF      FARG_correction_input+1, 0
0x0ECC	0x0270      	SUBWF      R0, 0
0x0ECD	0x1D03      	BTFSS      STATUS, 2
0x0ECE	0x2ED1      	GOTO       L__correction559
0x0ECF	0x086B      	MOVF       FARG_correction_input, 0
0x0ED0	0x3C04      	SUBLW      4
L__correction559:
0x0ED1	0x1C03      	BTFSS      STATUS, 0
0x0ED2	0x2ED8      	GOTO       L_correction23
0x0ED3	0x3048      	MOVLW      72
0x0ED4	0x07EB      	ADDWF      FARG_correction_input, 1
0x0ED5	0x3003      	MOVLW      3
0x0ED6	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
0x0ED7	0x2EDC      	GOTO       L_correction24
L_correction23:
;main.h,57 :: 		else  input += 860;
0x0ED8	0x305C      	MOVLW      92
0x0ED9	0x07EB      	ADDWF      FARG_correction_input, 1
0x0EDA	0x3003      	MOVLW      3
0x0EDB	0x3DEC      	ADDWFC     FARG_correction_input+1, 1
L_correction24:
L_correction22:
L_correction20:
L_correction18:
L_correction16:
L_correction14:
L_correction12:
L_correction10:
L_correction8:
L_correction6:
L_correction4:
L_correction2:
;main.h,59 :: 		return input;
0x0EDC	0x086B      	MOVF       FARG_correction_input, 0
0x0EDD	0x00F0      	MOVWF      R0
0x0EDE	0x086C      	MOVF       FARG_correction_input+1, 0
0x0EDF	0x00F1      	MOVWF      R1
;main.h,60 :: 		}
L_end_correction:
0x0EE0	0x0008      	RETURN
; end of _correction
_Int2Double:
;__Lib_MathDouble.c,1802 :: 		
;__Lib_MathDouble.c,1808 :: 		
0x0EE1	0x0020      	MOVLB      0
;__Lib_MathDouble.c,1809 :: 		
0x0EE2	0x0870      	MOVF       R0, 0
;__Lib_MathDouble.c,1810 :: 		
0x0EE3	0x00F8      	MOVWF      R8
;__Lib_MathDouble.c,1811 :: 		
0x0EE4	0x0871      	MOVF       R1, 0
;__Lib_MathDouble.c,1812 :: 		
0x0EE5	0x00F0      	MOVWF      R0
;__Lib_MathDouble.c,1813 :: 		
0x0EE6	0x01F1      	CLRF       R1
;__Lib_MathDouble.c,1814 :: 		
0x0EE7	0x01F2      	CLRF       R2
;__Lib_MathDouble.c,1815 :: 		
0x0EE8	0x01F3      	CLRF       R3
;__Lib_MathDouble.c,1818 :: 		
0x0EE9	0x01FB      	CLRF       R11
;__Lib_MathDouble.c,1819 :: 		
0x0EEA	0x01FC      	CLRF       R12
;__Lib_MathDouble.c,1821 :: 		
0x0EEB	0x3096      	MOVLW      150
;__Lib_MathDouble.c,1822 :: 		
0x0EEC	0x00F3      	MOVWF      R3
;__Lib_MathDouble.c,1823 :: 		
0x0EED	0x01FA      	CLRF       R10
;__Lib_MathDouble.c,1824 :: 		
0x0EEE	0x1FF0      	BTFSS      R0, 7
;__Lib_MathDouble.c,1825 :: 		
0x0EEF	0x2EF6      	GOTO       FLO1632EEE
;__Lib_MathDouble.c,1827 :: 		
0x0EF0	0x09F8      	COMF       R8, 1
;__Lib_MathDouble.c,1828 :: 		
0x0EF1	0x09F0      	COMF       R0, 1
;__Lib_MathDouble.c,1830 :: 		
0x0EF2	0x0AF8      	INCF       R8, 1
;__Lib_MathDouble.c,1831 :: 		
0x0EF3	0x1903      	BTFSC      STATUS, 2
;__Lib_MathDouble.c,1832 :: 		
0x0EF4	0x0AF0      	INCF       R0, 1
;__Lib_MathDouble.c,1834 :: 		
0x0EF5	0x17FA      	BSF        R10, 7
;__Lib_MathDouble.c,1835 :: 		
FLO1632EEE:
;__Lib_MathDouble.c,1836 :: 		
0x0EF6	0x0870      	MOVF       R0, 0
;__Lib_MathDouble.c,1837 :: 		
0x0EF7	0x00F1      	MOVWF      R1
;__Lib_MathDouble.c,1838 :: 		
0x0EF8	0x0878      	MOVF       R8, 0
;__Lib_MathDouble.c,1839 :: 		
0x0EF9	0x00F0      	MOVWF      R0
;__Lib_MathDouble.c,1840 :: 		
0x0EFA	0x01F8      	CLRF       R8
;__Lib_MathDouble.c,1841 :: 		
0x0EFB	0x01F2      	CLRF       R2
;__Lib_MathDouble.c,1843 :: 		
0x0EFC	0x3180      	MOVLP      0
0x0EFD	0x2622      	CALL       _NRM3232
0x0EFE	0x3188      	MOVLP      8
;__Lib_MathDouble.c,1844 :: 		
L_end_Int2Double:
0x0EFF	0x0008      	RETURN
; end of _Int2Double
_set_ind:
;main.h,163 :: 		void set_ind(char Ind) {  // 0 - 31
;main.h,164 :: 		if(L_invert == 0) {
0x0F00	0x0028      	MOVLB      8
0x0F01	0x0848      	MOVF       main_L_invert, 0
0x0F02	0x3A00      	XORLW      0
0x0F03	0x1D03      	BTFSS      STATUS, 2
0x0F04	0x2F3E      	GOTO       L_set_ind64
;main.h,165 :: 		Ind_005 = Ind.B0;
0x0F05	0x002B      	MOVLB      11
0x0F06	0x184F      	BTFSC      FARG_set_ind_Ind, 0
0x0F07	0x2F0B      	GOTO       L__set_ind579
0x0F08	0x0022      	MOVLB      2
0x0F09	0x118D      	BCF        LATB3_bit, BitPos(LATB3_bit+0)
0x0F0A	0x2F0D      	GOTO       L__set_ind580
L__set_ind579:
0x0F0B	0x0022      	MOVLB      2
0x0F0C	0x158D      	BSF        LATB3_bit, BitPos(LATB3_bit+0)
L__set_ind580:
;main.h,166 :: 		Ind_011 = Ind.B1;
0x0F0D	0x002B      	MOVLB      11
0x0F0E	0x18CF      	BTFSC      FARG_set_ind_Ind, 1
0x0F0F	0x2F13      	GOTO       L__set_ind581
0x0F10	0x0022      	MOVLB      2
0x0F11	0x110C      	BCF        LATA2_bit, BitPos(LATA2_bit+0)
0x0F12	0x2F15      	GOTO       L__set_ind582
L__set_ind581:
0x0F13	0x0022      	MOVLB      2
0x0F14	0x150C      	BSF        LATA2_bit, BitPos(LATA2_bit+0)
L__set_ind582:
;main.h,167 :: 		Ind_022 = Ind.B2;
0x0F15	0x002B      	MOVLB      11
0x0F16	0x194F      	BTFSC      FARG_set_ind_Ind, 2
0x0F17	0x2F1B      	GOTO       L__set_ind583
0x0F18	0x0022      	MOVLB      2
0x0F19	0x120D      	BCF        LATB4_bit, BitPos(LATB4_bit+0)
0x0F1A	0x2F1D      	GOTO       L__set_ind584
L__set_ind583:
0x0F1B	0x0022      	MOVLB      2
0x0F1C	0x160D      	BSF        LATB4_bit, BitPos(LATB4_bit+0)
L__set_ind584:
;main.h,168 :: 		Ind_045 = Ind.B3;
0x0F1D	0x002B      	MOVLB      11
0x0F1E	0x19CF      	BTFSC      FARG_set_ind_Ind, 3
0x0F1F	0x2F23      	GOTO       L__set_ind585
0x0F20	0x0022      	MOVLB      2
0x0F21	0x118C      	BCF        LATA3_bit, BitPos(LATA3_bit+0)
0x0F22	0x2F25      	GOTO       L__set_ind586
L__set_ind585:
0x0F23	0x0022      	MOVLB      2
0x0F24	0x158C      	BSF        LATA3_bit, BitPos(LATA3_bit+0)
L__set_ind586:
;main.h,169 :: 		Ind_1   = Ind.B4;
0x0F25	0x002B      	MOVLB      11
0x0F26	0x1A4F      	BTFSC      FARG_set_ind_Ind, 4
0x0F27	0x2F2B      	GOTO       L__set_ind587
0x0F28	0x0022      	MOVLB      2
0x0F29	0x128D      	BCF        LATB5_bit, BitPos(LATB5_bit+0)
0x0F2A	0x2F2D      	GOTO       L__set_ind588
L__set_ind587:
0x0F2B	0x0022      	MOVLB      2
0x0F2C	0x168D      	BSF        LATB5_bit, BitPos(LATB5_bit+0)
L__set_ind588:
;main.h,170 :: 		Ind_22  = Ind.B5;
0x0F2D	0x002B      	MOVLB      11
0x0F2E	0x1ACF      	BTFSC      FARG_set_ind_Ind, 5
0x0F2F	0x2F33      	GOTO       L__set_ind589
0x0F30	0x0022      	MOVLB      2
0x0F31	0x128C      	BCF        LATA5_bit, BitPos(LATA5_bit+0)
0x0F32	0x2F35      	GOTO       L__set_ind590
L__set_ind589:
0x0F33	0x0022      	MOVLB      2
0x0F34	0x168C      	BSF        LATA5_bit, BitPos(LATA5_bit+0)
L__set_ind590:
;main.h,171 :: 		Ind_45  = Ind.B6;
0x0F35	0x002B      	MOVLB      11
0x0F36	0x1B4F      	BTFSC      FARG_set_ind_Ind, 6
0x0F37	0x2F3B      	GOTO       L__set_ind591
0x0F38	0x0022      	MOVLB      2
0x0F39	0x120C      	BCF        LATA4_bit, BitPos(LATA4_bit+0)
0x0F3A	0x2F3D      	GOTO       L__set_ind592
L__set_ind591:
0x0F3B	0x0022      	MOVLB      2
0x0F3C	0x160C      	BSF        LATA4_bit, BitPos(LATA4_bit+0)
L__set_ind592:
;main.h,173 :: 		}
0x0F3D	0x2F76      	GOTO       L_set_ind65
L_set_ind64:
;main.h,175 :: 		Ind_005 = ~Ind.B0;
0x0F3E	0x002B      	MOVLB      11
0x0F3F	0x184F      	BTFSC      FARG_set_ind_Ind, 0
0x0F40	0x2F44      	GOTO       L__set_ind593
0x0F41	0x0022      	MOVLB      2
0x0F42	0x158D      	BSF        LATB3_bit, BitPos(LATB3_bit+0)
0x0F43	0x2F46      	GOTO       L__set_ind594
L__set_ind593:
0x0F44	0x0022      	MOVLB      2
0x0F45	0x118D      	BCF        LATB3_bit, BitPos(LATB3_bit+0)
L__set_ind594:
;main.h,176 :: 		Ind_011 = ~Ind.B1;
0x0F46	0x002B      	MOVLB      11
0x0F47	0x18CF      	BTFSC      FARG_set_ind_Ind, 1
0x0F48	0x2F4C      	GOTO       L__set_ind595
0x0F49	0x0022      	MOVLB      2
0x0F4A	0x150C      	BSF        LATA2_bit, BitPos(LATA2_bit+0)
0x0F4B	0x2F4E      	GOTO       L__set_ind596
L__set_ind595:
0x0F4C	0x0022      	MOVLB      2
0x0F4D	0x110C      	BCF        LATA2_bit, BitPos(LATA2_bit+0)
L__set_ind596:
;main.h,177 :: 		Ind_022 = ~Ind.B2;
0x0F4E	0x002B      	MOVLB      11
0x0F4F	0x194F      	BTFSC      FARG_set_ind_Ind, 2
0x0F50	0x2F54      	GOTO       L__set_ind597
0x0F51	0x0022      	MOVLB      2
0x0F52	0x160D      	BSF        LATB4_bit, BitPos(LATB4_bit+0)
0x0F53	0x2F56      	GOTO       L__set_ind598
L__set_ind597:
0x0F54	0x0022      	MOVLB      2
0x0F55	0x120D      	BCF        LATB4_bit, BitPos(LATB4_bit+0)
L__set_ind598:
;main.h,178 :: 		Ind_045 = ~Ind.B3;
0x0F56	0x002B      	MOVLB      11
0x0F57	0x19CF      	BTFSC      FARG_set_ind_Ind, 3
0x0F58	0x2F5C      	GOTO       L__set_ind599
0x0F59	0x0022      	MOVLB      2
0x0F5A	0x158C      	BSF        LATA3_bit, BitPos(LATA3_bit+0)
0x0F5B	0x2F5E      	GOTO       L__set_ind600
L__set_ind599:
0x0F5C	0x0022      	MOVLB      2
0x0F5D	0x118C      	BCF        LATA3_bit, BitPos(LATA3_bit+0)
L__set_ind600:
;main.h,179 :: 		Ind_1   = ~Ind.B4;
0x0F5E	0x002B      	MOVLB      11
0x0F5F	0x1A4F      	BTFSC      FARG_set_ind_Ind, 4
0x0F60	0x2F64      	GOTO       L__set_ind601
0x0F61	0x0022      	MOVLB      2
0x0F62	0x168D      	BSF        LATB5_bit, BitPos(LATB5_bit+0)
0x0F63	0x2F66      	GOTO       L__set_ind602
L__set_ind601:
0x0F64	0x0022      	MOVLB      2
0x0F65	0x128D      	BCF        LATB5_bit, BitPos(LATB5_bit+0)
L__set_ind602:
;main.h,180 :: 		Ind_22  = ~Ind.B5;
0x0F66	0x002B      	MOVLB      11
0x0F67	0x1ACF      	BTFSC      FARG_set_ind_Ind, 5
0x0F68	0x2F6C      	GOTO       L__set_ind603
0x0F69	0x0022      	MOVLB      2
0x0F6A	0x168C      	BSF        LATA5_bit, BitPos(LATA5_bit+0)
0x0F6B	0x2F6E      	GOTO       L__set_ind604
L__set_ind603:
0x0F6C	0x0022      	MOVLB      2
0x0F6D	0x128C      	BCF        LATA5_bit, BitPos(LATA5_bit+0)
L__set_ind604:
;main.h,181 :: 		Ind_45  = ~Ind.B6;
0x0F6E	0x002B      	MOVLB      11
0x0F6F	0x1B4F      	BTFSC      FARG_set_ind_Ind, 6
0x0F70	0x2F74      	GOTO       L__set_ind605
0x0F71	0x0022      	MOVLB      2
0x0F72	0x160C      	BSF        LATA4_bit, BitPos(LATA4_bit+0)
0x0F73	0x2F76      	GOTO       L__set_ind606
L__set_ind605:
0x0F74	0x0022      	MOVLB      2
0x0F75	0x120C      	BCF        LATA4_bit, BitPos(LATA4_bit+0)
L__set_ind606:
;main.h,183 :: 		}
L_set_ind65:
;main.h,184 :: 		Vdelay_ms(Rel_Del);
0x0F76	0x002A      	MOVLB      10
0x0F77	0x086E      	MOVF       main_Rel_Del, 0
0x0F78	0x002B      	MOVLB      11
0x0F79	0x00EB      	MOVWF      FARG_VDelay_ms_Time_ms
0x0F7A	0x002A      	MOVLB      10
0x0F7B	0x086F      	MOVF       main_Rel_Del+1, 0
0x0F7C	0x002B      	MOVLB      11
0x0F7D	0x00EC      	MOVWF      FARG_VDelay_ms_Time_ms+1
0x0F7E	0x3180      	MOVLP      0
0x0F7F	0x275D      	CALL       _VDelay_ms
0x0F80	0x3188      	MOVLP      8
;main.h,185 :: 		}
L_end_set_ind:
0x0F81	0x0008      	RETURN
; end of _set_ind
_dysp_on:
;oled_control.c,63 :: 		void dysp_on() {
;oled_control.c,64 :: 		if(led_type > 1) send_command(0xAF); //  display ON
0x0F82	0x002A      	MOVLB      10
0x0F83	0x083B      	MOVF       oled_control_led_type, 0
0x0F84	0x3C01      	SUBLW      1
0x0F85	0x1803      	BTFSC      STATUS, 0
0x0F86	0x2F8E      	GOTO       L_dysp_on12
0x0F87	0x30AF      	MOVLW      175
0x0F88	0x002B      	MOVLB      11
0x0F89	0x00EB      	MOVWF      FARG_send_command_oled_command
0x0F8A	0x3180      	MOVLP      0
0x0F8B	0x274C      	CALL       _send_command
0x0F8C	0x3188      	MOVLP      8
0x0F8D	0x2FA0      	GOTO       L_dysp_on13
L_dysp_on12:
;oled_control.c,65 :: 		else if(led_type==1) {
0x0F8E	0x002A      	MOVLB      10
0x0F8F	0x083B      	MOVF       oled_control_led_type, 0
0x0F90	0x3A01      	XORLW      1
0x0F91	0x1D03      	BTFSS      STATUS, 2
0x0F92	0x2FA0      	GOTO       L_dysp_on14
;oled_control.c,66 :: 		LED = 1;
0x0F93	0x3001      	MOVLW      1
0x0F94	0x00B2      	MOVWF      oled_control_LED
;oled_control.c,67 :: 		RS = 0;
0x0F95	0x01B8      	CLRF       oled_control_RS
;oled_control.c,68 :: 		led_send(0);
0x0F96	0x002C      	MOVLB      12
0x0F97	0x01AE      	CLRF       FARG_led_send_nible
0x0F98	0x3180      	MOVLP      0
0x0F99	0x22C1      	CALL       _led_send
0x0F9A	0x3188      	MOVLP      8
;oled_control.c,69 :: 		led_send(0);
0x0F9B	0x002C      	MOVLB      12
0x0F9C	0x01AE      	CLRF       FARG_led_send_nible
0x0F9D	0x3180      	MOVLP      0
0x0F9E	0x22C1      	CALL       _led_send
0x0F9F	0x3188      	MOVLP      8
;oled_control.c,70 :: 		}
L_dysp_on14:
L_dysp_on13:
;oled_control.c,71 :: 		}
L_end_dysp_on:
0x0FA0	0x0008      	RETURN
; end of _dysp_on
_set_cap:
;main.h,187 :: 		void set_cap(char Cap) { // 0 - 31
;main.h,188 :: 		Cap_10  =  Cap.B0;
0x0FA1	0x002B      	MOVLB      11
0x0FA2	0x184F      	BTFSC      FARG_set_cap_Cap, 0
0x0FA3	0x2FA7      	GOTO       L__set_cap608
0x0FA4	0x0022      	MOVLB      2
0x0FA5	0x138E      	BCF        LATC7_bit, BitPos(LATC7_bit+0)
0x0FA6	0x2FA9      	GOTO       L__set_cap609
L__set_cap608:
0x0FA7	0x0022      	MOVLB      2
0x0FA8	0x178E      	BSF        LATC7_bit, BitPos(LATC7_bit+0)
L__set_cap609:
;main.h,189 :: 		Cap_22  =  Cap.B1;
0x0FA9	0x002B      	MOVLB      11
0x0FAA	0x18CF      	BTFSC      FARG_set_cap_Cap, 1
0x0FAB	0x2FAF      	GOTO       L__set_cap610
0x0FAC	0x0022      	MOVLB      2
0x0FAD	0x118E      	BCF        LATC3_bit, BitPos(LATC3_bit+0)
0x0FAE	0x2FB1      	GOTO       L__set_cap611
L__set_cap610:
0x0FAF	0x0022      	MOVLB      2
0x0FB0	0x158E      	BSF        LATC3_bit, BitPos(LATC3_bit+0)
L__set_cap611:
;main.h,190 :: 		Cap_47  =  Cap.B2;
0x0FB1	0x002B      	MOVLB      11
0x0FB2	0x194F      	BTFSC      FARG_set_cap_Cap, 2
0x0FB3	0x2FB7      	GOTO       L__set_cap612
0x0FB4	0x0022      	MOVLB      2
0x0FB5	0x130E      	BCF        LATC6_bit, BitPos(LATC6_bit+0)
0x0FB6	0x2FB9      	GOTO       L__set_cap613
L__set_cap612:
0x0FB7	0x0022      	MOVLB      2
0x0FB8	0x170E      	BSF        LATC6_bit, BitPos(LATC6_bit+0)
L__set_cap613:
;main.h,191 :: 		Cap_100 =  Cap.B3;
0x0FB9	0x002B      	MOVLB      11
0x0FBA	0x19CF      	BTFSC      FARG_set_cap_Cap, 3
0x0FBB	0x2FBF      	GOTO       L__set_cap614
0x0FBC	0x0022      	MOVLB      2
0x0FBD	0x110E      	BCF        LATC2_bit, BitPos(LATC2_bit+0)
0x0FBE	0x2FC1      	GOTO       L__set_cap615
L__set_cap614:
0x0FBF	0x0022      	MOVLB      2
0x0FC0	0x150E      	BSF        LATC2_bit, BitPos(LATC2_bit+0)
L__set_cap615:
;main.h,192 :: 		Cap_220 =  Cap.B4;
0x0FC1	0x002B      	MOVLB      11
0x0FC2	0x1A4F      	BTFSC      FARG_set_cap_Cap, 4
0x0FC3	0x2FC7      	GOTO       L__set_cap616
0x0FC4	0x0022      	MOVLB      2
0x0FC5	0x128E      	BCF        LATC5_bit, BitPos(LATC5_bit+0)
0x0FC6	0x2FC9      	GOTO       L__set_cap617
L__set_cap616:
0x0FC7	0x0022      	MOVLB      2
0x0FC8	0x168E      	BSF        LATC5_bit, BitPos(LATC5_bit+0)
L__set_cap617:
;main.h,193 :: 		Cap_470 =  Cap.B5;
0x0FC9	0x002B      	MOVLB      11
0x0FCA	0x1ACF      	BTFSC      FARG_set_cap_Cap, 5
0x0FCB	0x2FCF      	GOTO       L__set_cap618
0x0FCC	0x0022      	MOVLB      2
0x0FCD	0x108E      	BCF        LATC1_bit, BitPos(LATC1_bit+0)
0x0FCE	0x2FD1      	GOTO       L__set_cap619
L__set_cap618:
0x0FCF	0x0022      	MOVLB      2
0x0FD0	0x148E      	BSF        LATC1_bit, BitPos(LATC1_bit+0)
L__set_cap619:
;main.h,194 :: 		Cap_1000 =  Cap.B6;
0x0FD1	0x002B      	MOVLB      11
0x0FD2	0x1B4F      	BTFSC      FARG_set_cap_Cap, 6
0x0FD3	0x2FD7      	GOTO       L__set_cap620
0x0FD4	0x0022      	MOVLB      2
0x0FD5	0x120E      	BCF        LATC4_bit, BitPos(LATC4_bit+0)
0x0FD6	0x2FD9      	GOTO       L__set_cap621
L__set_cap620:
0x0FD7	0x0022      	MOVLB      2
0x0FD8	0x160E      	BSF        LATC4_bit, BitPos(LATC4_bit+0)
L__set_cap621:
;main.h,196 :: 		Vdelay_ms(Rel_Del);
0x0FD9	0x002A      	MOVLB      10
0x0FDA	0x086E      	MOVF       main_Rel_Del, 0
0x0FDB	0x002B      	MOVLB      11
0x0FDC	0x00EB      	MOVWF      FARG_VDelay_ms_Time_ms
0x0FDD	0x002A      	MOVLB      10
0x0FDE	0x086F      	MOVF       main_Rel_Del+1, 0
0x0FDF	0x002B      	MOVLB      11
0x0FE0	0x00EC      	MOVWF      FARG_VDelay_ms_Time_ms+1
0x0FE1	0x3180      	MOVLP      0
0x0FE2	0x275D      	CALL       _VDelay_ms
0x0FE3	0x3188      	MOVLP      8
;main.h,197 :: 		}
L_end_set_cap:
0x0FE4	0x0008      	RETURN
; end of _set_cap
_set_sw:
;main.h,199 :: 		void set_sw(char SW) {  // 0 - IN,  1 - OUT
;main.h,200 :: 		Cap_sw = SW;
0x0FE5	0x002B      	MOVLB      11
0x0FE6	0x1847      	BTFSC      FARG_set_sw_SW, 0
0x0FE7	0x2FEB      	GOTO       L__set_sw623
0x0FE8	0x0022      	MOVLB      2
0x0FE9	0x100E      	BCF        LATC0_bit, BitPos(LATC0_bit+0)
0x0FEA	0x2FED      	GOTO       L__set_sw624
L__set_sw623:
0x0FEB	0x0022      	MOVLB      2
0x0FEC	0x140E      	BSF        LATC0_bit, BitPos(LATC0_bit+0)
L__set_sw624:
;main.h,201 :: 		Vdelay_ms(Rel_Del);
0x0FED	0x002A      	MOVLB      10
0x0FEE	0x086E      	MOVF       main_Rel_Del, 0
0x0FEF	0x002B      	MOVLB      11
0x0FF0	0x00EB      	MOVWF      FARG_VDelay_ms_Time_ms
0x0FF1	0x002A      	MOVLB      10
0x0FF2	0x086F      	MOVF       main_Rel_Del+1, 0
0x0FF3	0x002B      	MOVLB      11
0x0FF4	0x00EC      	MOVWF      FARG_VDelay_ms_Time_ms+1
0x0FF5	0x3180      	MOVLP      0
0x0FF6	0x275D      	CALL       _VDelay_ms
0x0FF7	0x3188      	MOVLP      8
;main.h,202 :: 		}
L_end_set_sw:
0x0FF8	0x0008      	RETURN
; end of _set_sw
_lcd_swr:
;main.c,440 :: 		void lcd_swr(int swr) {
;main.c,441 :: 		asm CLRWDT;
0x1000	0x0064      	CLRWDT
;main.c,442 :: 		if(swr!=SWR_old) {
0x1001	0x002B      	MOVLB      11
0x1002	0x0850      	MOVF       FARG_lcd_swr_swr+1, 0
0x1003	0x0029      	MOVLB      9
0x1004	0x0657      	XORWF      _SWR_old+1, 0
0x1005	0x1D03      	BTFSS      STATUS, 2
0x1006	0x280A      	GOTO       L__lcd_swr703
0x1007	0x0856      	MOVF       _SWR_old, 0
0x1008	0x002B      	MOVLB      11
0x1009	0x064F      	XORWF      FARG_lcd_swr_swr, 0
L__lcd_swr703:
0x100A	0x1903      	BTFSC      STATUS, 2
0x100B	0x28DE      	GOTO       L_lcd_swr318
;main.c,443 :: 		SWR_old = swr;
0x100C	0x002B      	MOVLB      11
0x100D	0x084F      	MOVF       FARG_lcd_swr_swr, 0
0x100E	0x0029      	MOVLB      9
0x100F	0x00D6      	MOVWF      _SWR_old
0x1010	0x002B      	MOVLB      11
0x1011	0x0850      	MOVF       FARG_lcd_swr_swr+1, 0
0x1012	0x0029      	MOVLB      9
0x1013	0x00D7      	MOVWF      _SWR_old+1
;main.c,444 :: 		if(swr==1) {  // Low power
0x1014	0x3000      	MOVLW      0
0x1015	0x002B      	MOVLB      11
0x1016	0x0650      	XORWF      FARG_lcd_swr_swr+1, 0
0x1017	0x1D03      	BTFSS      STATUS, 2
0x1018	0x281B      	GOTO       L__lcd_swr704
0x1019	0x3001      	MOVLW      1
0x101A	0x064F      	XORWF      FARG_lcd_swr_swr, 0
L__lcd_swr704:
0x101B	0x1D03      	BTFSS      STATUS, 2
0x101C	0x285D      	GOTO       L_lcd_swr319
;main.c,445 :: 		if(type==4 | type==5) led_wr_str (2, 16+4*12, "0.00", 4);   // 128*64 OLED
0x101D	0x002A      	MOVLB      10
0x101E	0x086D      	MOVF       _type, 0
0x101F	0x3A04      	XORLW      4
0x1020	0x3001      	MOVLW      1
0x1021	0x1D03      	BTFSS      STATUS, 2
0x1022	0x3000      	MOVLW      0
0x1023	0x00F1      	MOVWF      R1
0x1024	0x086D      	MOVF       _type, 0
0x1025	0x3A05      	XORLW      5
0x1026	0x3001      	MOVLW      1
0x1027	0x1D03      	BTFSS      STATUS, 2
0x1028	0x3000      	MOVLW      0
0x1029	0x00F0      	MOVWF      R0
0x102A	0x0871      	MOVF       R1, 0
0x102B	0x04F0      	IORWF       R0, 1
0x102C	0x1903      	BTFSC      STATUS, 2
0x102D	0x283D      	GOTO       L_lcd_swr320
0x102E	0x3002      	MOVLW      2
0x102F	0x002C      	MOVLB      12
0x1030	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1031	0x3040      	MOVLW      64
0x1032	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1033	0x306B      	MOVLW      ?lstr54_main
0x1034	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1035	0x3001      	MOVLW      hi_addr(?lstr54_main)
0x1036	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1037	0x3004      	MOVLW      4
0x1038	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1039	0x3180      	MOVLP      0
0x103A	0x24B4      	CALL       _led_wr_str
0x103B	0x3190      	MOVLP      16
0x103C	0x2859      	GOTO       L_lcd_swr321
L_lcd_swr320:
;main.c,446 :: 		else if(type!=0) led_wr_str (1, 4, "0.00", 4);  // 1602  & 128*32 OLED
0x103D	0x002A      	MOVLB      10
0x103E	0x086D      	MOVF       _type, 0
0x103F	0x3A00      	XORLW      0
0x1040	0x1903      	BTFSC      STATUS, 2
0x1041	0x2851      	GOTO       L_lcd_swr322
0x1042	0x3001      	MOVLW      1
0x1043	0x002C      	MOVLB      12
0x1044	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1045	0x3004      	MOVLW      4
0x1046	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1047	0x30EA      	MOVLW      ?lstr55_main
0x1048	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1049	0x3000      	MOVLW      hi_addr(?lstr55_main)
0x104A	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x104B	0x3004      	MOVLW      4
0x104C	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x104D	0x3180      	MOVLP      0
0x104E	0x24B4      	CALL       _led_wr_str
0x104F	0x3190      	MOVLP      16
0x1050	0x2859      	GOTO       L_lcd_swr323
L_lcd_swr322:
;main.c,447 :: 		else  if(type==0) {    // real-time 2-colors led work
0x1051	0x002A      	MOVLB      10
0x1052	0x086D      	MOVF       _type, 0
0x1053	0x3A00      	XORLW      0
0x1054	0x1D03      	BTFSS      STATUS, 2
0x1055	0x2859      	GOTO       L_lcd_swr324
;main.c,448 :: 		LATB.B6 = 1;
0x1056	0x0022      	MOVLB      2
0x1057	0x170D      	BSF        LATB, 6
;main.c,449 :: 		LATB.B7 = 1;
0x1058	0x178D      	BSF        LATB, 7
;main.c,450 :: 		}
L_lcd_swr324:
L_lcd_swr323:
L_lcd_swr321:
;main.c,451 :: 		SWR_old = 0;
0x1059	0x0029      	MOVLB      9
0x105A	0x01D6      	CLRF       _SWR_old
0x105B	0x01D7      	CLRF       _SWR_old+1
;main.c,452 :: 		}
0x105C	0x28DE      	GOTO       L_lcd_swr325
L_lcd_swr319:
;main.c,454 :: 		SWR_old = swr;
0x105D	0x002B      	MOVLB      11
0x105E	0x084F      	MOVF       FARG_lcd_swr_swr, 0
0x105F	0x0029      	MOVLB      9
0x1060	0x00D6      	MOVWF      _SWR_old
0x1061	0x002B      	MOVLB      11
0x1062	0x0850      	MOVF       FARG_lcd_swr_swr+1, 0
0x1063	0x0029      	MOVLB      9
0x1064	0x00D7      	MOVWF      _SWR_old+1
;main.c,455 :: 		IntToStr(swr, work_str);
0x1065	0x002B      	MOVLB      11
0x1066	0x084F      	MOVF       FARG_lcd_swr_swr, 0
0x1067	0x002C      	MOVLB      12
0x1068	0x00A4      	MOVWF      FARG_IntToStr_input
0x1069	0x002B      	MOVLB      11
0x106A	0x0850      	MOVF       FARG_lcd_swr_swr+1, 0
0x106B	0x002C      	MOVLB      12
0x106C	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x106D	0x3062      	MOVLW      _work_str
0x106E	0x00A6      	MOVWF      FARG_IntToStr_output
0x106F	0x3005      	MOVLW      hi_addr(_work_str)
0x1070	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x1071	0x3180      	MOVLP      0
0x1072	0x2587      	CALL       _IntToStr
0x1073	0x3190      	MOVLP      16
;main.c,456 :: 		work_str_2[0] = work_str[3];
0x1074	0x002A      	MOVLB      10
0x1075	0x0865      	MOVF       _work_str+3, 0
0x1076	0x002B      	MOVLB      11
0x1077	0x00A0      	MOVWF      _work_str_2
;main.c,457 :: 		work_str_2[1] = '.';
0x1078	0x302E      	MOVLW      46
0x1079	0x00A1      	MOVWF      _work_str_2+1
;main.c,458 :: 		work_str_2[2] = work_str[4];
0x107A	0x002A      	MOVLB      10
0x107B	0x0866      	MOVF       _work_str+4, 0
0x107C	0x002B      	MOVLB      11
0x107D	0x00A2      	MOVWF      _work_str_2+2
;main.c,459 :: 		work_str_2[3] = work_str[5];
0x107E	0x002A      	MOVLB      10
0x107F	0x0867      	MOVF       _work_str+5, 0
0x1080	0x002B      	MOVLB      11
0x1081	0x00A3      	MOVWF      _work_str_2+3
;main.c,460 :: 		if(type==4 | type==5) led_wr_str (2, 16+4*12, work_str_2, 4);  // 128*64 OLED
0x1082	0x002A      	MOVLB      10
0x1083	0x086D      	MOVF       _type, 0
0x1084	0x3A04      	XORLW      4
0x1085	0x3001      	MOVLW      1
0x1086	0x1D03      	BTFSS      STATUS, 2
0x1087	0x3000      	MOVLW      0
0x1088	0x00F1      	MOVWF      R1
0x1089	0x086D      	MOVF       _type, 0
0x108A	0x3A05      	XORLW      5
0x108B	0x3001      	MOVLW      1
0x108C	0x1D03      	BTFSS      STATUS, 2
0x108D	0x3000      	MOVLW      0
0x108E	0x00F0      	MOVWF      R0
0x108F	0x0871      	MOVF       R1, 0
0x1090	0x04F0      	IORWF       R0, 1
0x1091	0x1903      	BTFSC      STATUS, 2
0x1092	0x28A2      	GOTO       L_lcd_swr326
0x1093	0x3002      	MOVLW      2
0x1094	0x002C      	MOVLB      12
0x1095	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1096	0x3040      	MOVLW      64
0x1097	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1098	0x30A0      	MOVLW      _work_str_2
0x1099	0x00A6      	MOVWF      FARG_led_wr_str_str
0x109A	0x3005      	MOVLW      hi_addr(_work_str_2)
0x109B	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x109C	0x3004      	MOVLW      4
0x109D	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x109E	0x3180      	MOVLP      0
0x109F	0x24B4      	CALL       _led_wr_str
0x10A0	0x3190      	MOVLP      16
0x10A1	0x28DE      	GOTO       L_lcd_swr327
L_lcd_swr326:
;main.c,461 :: 		else if(type!=0) led_wr_str (1, 4, work_str_2, 4);       // 1602  & 128*32
0x10A2	0x002A      	MOVLB      10
0x10A3	0x086D      	MOVF       _type, 0
0x10A4	0x3A00      	XORLW      0
0x10A5	0x1903      	BTFSC      STATUS, 2
0x10A6	0x28B6      	GOTO       L_lcd_swr328
0x10A7	0x3001      	MOVLW      1
0x10A8	0x002C      	MOVLB      12
0x10A9	0x00A4      	MOVWF      FARG_led_wr_str_col
0x10AA	0x3004      	MOVLW      4
0x10AB	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x10AC	0x30A0      	MOVLW      _work_str_2
0x10AD	0x00A6      	MOVWF      FARG_led_wr_str_str
0x10AE	0x3005      	MOVLW      hi_addr(_work_str_2)
0x10AF	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x10B0	0x3004      	MOVLW      4
0x10B1	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x10B2	0x3180      	MOVLP      0
0x10B3	0x24B4      	CALL       _led_wr_str
0x10B4	0x3190      	MOVLP      16
0x10B5	0x28DE      	GOTO       L_lcd_swr329
L_lcd_swr328:
;main.c,462 :: 		else  if(type==0) {    // real-time 2-colors led work
0x10B6	0x002A      	MOVLB      10
0x10B7	0x086D      	MOVF       _type, 0
0x10B8	0x3A00      	XORLW      0
0x10B9	0x1D03      	BTFSS      STATUS, 2
0x10BA	0x28DE      	GOTO       L_lcd_swr330
;main.c,463 :: 		if(swr<=150) { LATB.B6 = 0; LATB.B7 = 1; } // Green
0x10BB	0x3080      	MOVLW      128
0x10BC	0x00F0      	MOVWF      R0
0x10BD	0x3080      	MOVLW      128
0x10BE	0x002B      	MOVLB      11
0x10BF	0x0650      	XORWF      FARG_lcd_swr_swr+1, 0
0x10C0	0x0270      	SUBWF      R0, 0
0x10C1	0x1D03      	BTFSS      STATUS, 2
0x10C2	0x28C5      	GOTO       L__lcd_swr705
0x10C3	0x084F      	MOVF       FARG_lcd_swr_swr, 0
0x10C4	0x3C96      	SUBLW      150
L__lcd_swr705:
0x10C5	0x1C03      	BTFSS      STATUS, 0
0x10C6	0x28CB      	GOTO       L_lcd_swr331
0x10C7	0x0022      	MOVLB      2
0x10C8	0x130D      	BCF        LATB, 6
0x10C9	0x178D      	BSF        LATB, 7
0x10CA	0x28DE      	GOTO       L_lcd_swr332
L_lcd_swr331:
;main.c,464 :: 		else if(swr<=250) {PORTB.B6 = 0; PORTB.B7 = 0;} // Orange
0x10CB	0x3080      	MOVLW      128
0x10CC	0x00F0      	MOVWF      R0
0x10CD	0x3080      	MOVLW      128
0x10CE	0x002B      	MOVLB      11
0x10CF	0x0650      	XORWF      FARG_lcd_swr_swr+1, 0
0x10D0	0x0270      	SUBWF      R0, 0
0x10D1	0x1D03      	BTFSS      STATUS, 2
0x10D2	0x28D5      	GOTO       L__lcd_swr706
0x10D3	0x084F      	MOVF       FARG_lcd_swr_swr, 0
0x10D4	0x3CFA      	SUBLW      250
L__lcd_swr706:
0x10D5	0x1C03      	BTFSS      STATUS, 0
0x10D6	0x28DB      	GOTO       L_lcd_swr333
0x10D7	0x0020      	MOVLB      0
0x10D8	0x130D      	BCF        PORTB, 6
0x10D9	0x138D      	BCF        PORTB, 7
0x10DA	0x28DE      	GOTO       L_lcd_swr334
L_lcd_swr333:
0x10DB	0x0020      	MOVLB      0
;main.c,465 :: 		else { PORTB.B6 = 1; PORTB.B7 = 0; }  // Red
0x10DC	0x170D      	BSF        PORTB, 6
0x10DD	0x138D      	BCF        PORTB, 7
L_lcd_swr334:
L_lcd_swr332:
;main.c,466 :: 		}
L_lcd_swr330:
L_lcd_swr329:
L_lcd_swr327:
;main.c,467 :: 		}
L_lcd_swr325:
;main.c,468 :: 		}
L_lcd_swr318:
;main.c,469 :: 		asm CLRWDT;
0x10DE	0x0064      	CLRWDT
;main.c,470 :: 		return;
;main.c,471 :: 		}
L_end_lcd_swr:
0x10DF	0x0008      	RETURN
; end of _lcd_swr
_button_delay:
;main.c,474 :: 		void button_delay() {
;main.c,475 :: 		if((Button(&PORTB, 0, 25, 0)) | (Button(&PORTB, 1, 25, 0)) | (Button(&PORTB, 2, 25, 0))) {
0x10E0	0x300D      	MOVLW      PORTB
0x10E1	0x002B      	MOVLB      11
0x10E2	0x00EB      	MOVWF      FARG_Button_port
0x10E3	0x3000      	MOVLW      hi_addr(PORTB)
0x10E4	0x00EC      	MOVWF      FARG_Button_port+1
0x10E5	0x01ED      	CLRF       FARG_Button_pin
0x10E6	0x3019      	MOVLW      25
0x10E7	0x00EE      	MOVWF      FARG_Button_time_ms
0x10E8	0x01EF      	CLRF       FARG_Button_active_state
0x10E9	0x3188      	MOVLP      8
0x10EA	0x24C0      	CALL       _Button
0x10EB	0x3190      	MOVLP      16
0x10EC	0x0870      	MOVF       R0, 0
0x10ED	0x002B      	MOVLB      11
0x10EE	0x00CF      	MOVWF      FLOC__button_delay
0x10EF	0x300D      	MOVLW      PORTB
0x10F0	0x00EB      	MOVWF      FARG_Button_port
0x10F1	0x3000      	MOVLW      hi_addr(PORTB)
0x10F2	0x00EC      	MOVWF      FARG_Button_port+1
0x10F3	0x3001      	MOVLW      1
0x10F4	0x00ED      	MOVWF      FARG_Button_pin
0x10F5	0x3019      	MOVLW      25
0x10F6	0x00EE      	MOVWF      FARG_Button_time_ms
0x10F7	0x01EF      	CLRF       FARG_Button_active_state
0x10F8	0x3188      	MOVLP      8
0x10F9	0x24C0      	CALL       _Button
0x10FA	0x3190      	MOVLP      16
0x10FB	0x0870      	MOVF       R0, 0
0x10FC	0x002B      	MOVLB      11
0x10FD	0x04CF      	IORWF       FLOC__button_delay, 1
0x10FE	0x300D      	MOVLW      PORTB
0x10FF	0x00EB      	MOVWF      FARG_Button_port
0x1100	0x3000      	MOVLW      hi_addr(PORTB)
0x1101	0x00EC      	MOVWF      FARG_Button_port+1
0x1102	0x3002      	MOVLW      2
0x1103	0x00ED      	MOVWF      FARG_Button_pin
0x1104	0x3019      	MOVLW      25
0x1105	0x00EE      	MOVWF      FARG_Button_time_ms
0x1106	0x01EF      	CLRF       FARG_Button_active_state
0x1107	0x3188      	MOVLP      8
0x1108	0x24C0      	CALL       _Button
0x1109	0x3190      	MOVLP      16
0x110A	0x002B      	MOVLB      11
0x110B	0x084F      	MOVF       FLOC__button_delay, 0
0x110C	0x04F0      	IORWF       R0, 1
0x110D	0x1903      	BTFSC      STATUS, 2
0x110E	0x2912      	GOTO       L_button_delay335
;main.c,476 :: 		but = 1;
0x110F	0x3001      	MOVLW      1
0x1110	0x0028      	MOVLB      8
0x1111	0x00B5      	MOVWF      _but
;main.c,477 :: 		}
L_button_delay335:
;main.c,478 :: 		return;
;main.c,479 :: 		}
L_end_button_delay:
0x1112	0x0008      	RETURN
; end of _button_delay
_show_pwr:
;main.c,481 :: 		void show_pwr(int Power, int SWR) {
;main.c,484 :: 		a = 100;
0x1113	0x3000      	MOVLW      0
0x1114	0x002B      	MOVLB      11
0x1115	0x00D7      	MOVWF      show_pwr_a_L0
0x1116	0x3000      	MOVLW      0
0x1117	0x00D8      	MOVWF      show_pwr_a_L0+1
0x1118	0x3048      	MOVLW      72
0x1119	0x00D9      	MOVWF      show_pwr_a_L0+2
0x111A	0x3085      	MOVLW      133
0x111B	0x00DA      	MOVWF      show_pwr_a_L0+3
;main.c,485 :: 		asm CLRWDT;
0x111C	0x0064      	CLRWDT
;main.c,487 :: 		if(Test==0 & Loss_ind==1 & SWR>=100) {
0x111D	0x0020      	MOVLB      0
0x111E	0x0849      	MOVF       _Test, 0
0x111F	0x3A00      	XORLW      0
0x1120	0x3001      	MOVLW      1
0x1121	0x1D03      	BTFSS      STATUS, 2
0x1122	0x3000      	MOVLW      0
0x1123	0x00F1      	MOVWF      R1
0x1124	0x0024      	MOVLB      4
0x1125	0x086B      	MOVF       main_Loss_ind, 0
0x1126	0x3A01      	XORLW      1
0x1127	0x3001      	MOVLW      1
0x1128	0x1D03      	BTFSS      STATUS, 2
0x1129	0x3000      	MOVLW      0
0x112A	0x00F0      	MOVWF      R0
0x112B	0x0870      	MOVF       R0, 0
0x112C	0x05F1      	ANDWF      R1, 1
0x112D	0x3080      	MOVLW      128
0x112E	0x002B      	MOVLB      11
0x112F	0x0652      	XORWF      FARG_show_pwr_SWR+1, 0
0x1130	0x00F0      	MOVWF      R0
0x1131	0x3080      	MOVLW      128
0x1132	0x0270      	SUBWF      R0, 0
0x1133	0x1D03      	BTFSS      STATUS, 2
0x1134	0x2937      	GOTO       L__show_pwr709
0x1135	0x3064      	MOVLW      100
0x1136	0x0251      	SUBWF      FARG_show_pwr_SWR, 0
L__show_pwr709:
0x1137	0x3001      	MOVLW      1
0x1138	0x1C03      	BTFSS      STATUS, 0
0x1139	0x3000      	MOVLW      0
0x113A	0x00F0      	MOVWF      R0
0x113B	0x0871      	MOVF       R1, 0
0x113C	0x05F0      	ANDWF      R0, 1
0x113D	0x1903      	BTFSC      STATUS, 2
0x113E	0x29FD      	GOTO       L_show_pwr336
;main.c,488 :: 		if(Loss_mode==0) {   // prepare
0x113F	0x0020      	MOVLB      0
0x1140	0x0848      	MOVF       _Loss_mode, 0
0x1141	0x3A00      	XORLW      0
0x1142	0x1D03      	BTFSS      STATUS, 2
0x1143	0x29F9      	GOTO       L_show_pwr337
;main.c,489 :: 		if(type==4 |type==5){   // 128*64 OLED
0x1144	0x002A      	MOVLB      10
0x1145	0x086D      	MOVF       _type, 0
0x1146	0x3A04      	XORLW      4
0x1147	0x3001      	MOVLW      1
0x1148	0x1D03      	BTFSS      STATUS, 2
0x1149	0x3000      	MOVLW      0
0x114A	0x00F1      	MOVWF      R1
0x114B	0x086D      	MOVF       _type, 0
0x114C	0x3A05      	XORLW      5
0x114D	0x3001      	MOVLW      1
0x114E	0x1D03      	BTFSS      STATUS, 2
0x114F	0x3000      	MOVLW      0
0x1150	0x00F0      	MOVWF      R0
0x1151	0x0871      	MOVF       R1, 0
0x1152	0x04F0      	IORWF       R0, 1
0x1153	0x1903      	BTFSC      STATUS, 2
0x1154	0x2986      	GOTO       L_show_pwr338
;main.c,490 :: 		if(P_High==1) led_wr_str(4, 16, "ANT=  0W", 8);
0x1155	0x0028      	MOVLB      8
0x1156	0x0832      	MOVF       main_P_High, 0
0x1157	0x3A01      	XORLW      1
0x1158	0x1D03      	BTFSS      STATUS, 2
0x1159	0x2969      	GOTO       L_show_pwr339
0x115A	0x3004      	MOVLW      4
0x115B	0x002C      	MOVLB      12
0x115C	0x00A4      	MOVWF      FARG_led_wr_str_col
0x115D	0x3010      	MOVLW      16
0x115E	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x115F	0x303F      	MOVLW      ?lstr56_main
0x1160	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1161	0x3000      	MOVLW      hi_addr(?lstr56_main)
0x1162	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1163	0x3008      	MOVLW      8
0x1164	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1165	0x3180      	MOVLP      0
0x1166	0x24B4      	CALL       _led_wr_str
0x1167	0x3190      	MOVLP      16
0x1168	0x2977      	GOTO       L_show_pwr340
L_show_pwr339:
;main.c,491 :: 		else led_wr_str(4, 16, "ANT=0.0W", 8);
0x1169	0x3004      	MOVLW      4
0x116A	0x002C      	MOVLB      12
0x116B	0x00A4      	MOVWF      FARG_led_wr_str_col
0x116C	0x3010      	MOVLW      16
0x116D	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x116E	0x30C4      	MOVLW      ?lstr57_main
0x116F	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1170	0x3000      	MOVLW      hi_addr(?lstr57_main)
0x1171	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1172	0x3008      	MOVLW      8
0x1173	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1174	0x3180      	MOVLP      0
0x1175	0x24B4      	CALL       _led_wr_str
0x1176	0x3190      	MOVLP      16
L_show_pwr340:
;main.c,492 :: 		led_wr_str(6, 16, "EFF=  0%", 8);
0x1177	0x3006      	MOVLW      6
0x1178	0x002C      	MOVLB      12
0x1179	0x00A4      	MOVWF      FARG_led_wr_str_col
0x117A	0x3010      	MOVLW      16
0x117B	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x117C	0x3029      	MOVLW      ?lstr58_main
0x117D	0x00A6      	MOVWF      FARG_led_wr_str_str
0x117E	0x3001      	MOVLW      hi_addr(?lstr58_main)
0x117F	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1180	0x3008      	MOVLW      8
0x1181	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1182	0x3180      	MOVLP      0
0x1183	0x24B4      	CALL       _led_wr_str
0x1184	0x3190      	MOVLP      16
;main.c,493 :: 		}
0x1185	0x29F9      	GOTO       L_show_pwr341
L_show_pwr338:
;main.c,494 :: 		else if(type==2 | type==3) {   // 128*32 OLED
0x1186	0x002A      	MOVLB      10
0x1187	0x086D      	MOVF       _type, 0
0x1188	0x3A02      	XORLW      2
0x1189	0x3001      	MOVLW      1
0x118A	0x1D03      	BTFSS      STATUS, 2
0x118B	0x3000      	MOVLW      0
0x118C	0x00F1      	MOVWF      R1
0x118D	0x086D      	MOVF       _type, 0
0x118E	0x3A03      	XORLW      3
0x118F	0x3001      	MOVLW      1
0x1190	0x1D03      	BTFSS      STATUS, 2
0x1191	0x3000      	MOVLW      0
0x1192	0x00F0      	MOVWF      R0
0x1193	0x0871      	MOVF       R1, 0
0x1194	0x04F0      	IORWF       R0, 1
0x1195	0x1903      	BTFSC      STATUS, 2
0x1196	0x29C6      	GOTO       L_show_pwr342
;main.c,495 :: 		if(P_High==1) led_wr_str (0, 9, "ANT=  0W", 8);
0x1197	0x0028      	MOVLB      8
0x1198	0x0832      	MOVF       main_P_High, 0
0x1199	0x3A01      	XORLW      1
0x119A	0x1D03      	BTFSS      STATUS, 2
0x119B	0x29AA      	GOTO       L_show_pwr343
0x119C	0x002C      	MOVLB      12
0x119D	0x01A4      	CLRF       FARG_led_wr_str_col
0x119E	0x3009      	MOVLW      9
0x119F	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x11A0	0x3020      	MOVLW      ?lstr59_main
0x11A1	0x00A6      	MOVWF      FARG_led_wr_str_str
0x11A2	0x3001      	MOVLW      hi_addr(?lstr59_main)
0x11A3	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x11A4	0x3008      	MOVLW      8
0x11A5	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x11A6	0x3180      	MOVLP      0
0x11A7	0x24B4      	CALL       _led_wr_str
0x11A8	0x3190      	MOVLP      16
0x11A9	0x29B7      	GOTO       L_show_pwr344
L_show_pwr343:
;main.c,496 :: 		else led_wr_str (0, 9, "ANT=0.0W", 8);
0x11AA	0x002C      	MOVLB      12
0x11AB	0x01A4      	CLRF       FARG_led_wr_str_col
0x11AC	0x3009      	MOVLW      9
0x11AD	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x11AE	0x30E0      	MOVLW      ?lstr60_main
0x11AF	0x00A6      	MOVWF      FARG_led_wr_str_str
0x11B0	0x3000      	MOVLW      hi_addr(?lstr60_main)
0x11B1	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x11B2	0x3008      	MOVLW      8
0x11B3	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x11B4	0x3180      	MOVLP      0
0x11B5	0x24B4      	CALL       _led_wr_str
0x11B6	0x3190      	MOVLP      16
L_show_pwr344:
;main.c,497 :: 		led_wr_str (1, 9, "EFF=  0%", 8);
0x11B7	0x3001      	MOVLW      1
0x11B8	0x002C      	MOVLB      12
0x11B9	0x00A4      	MOVWF      FARG_led_wr_str_col
0x11BA	0x3009      	MOVLW      9
0x11BB	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x11BC	0x3032      	MOVLW      ?lstr61_main
0x11BD	0x00A6      	MOVWF      FARG_led_wr_str_str
0x11BE	0x3001      	MOVLW      hi_addr(?lstr61_main)
0x11BF	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x11C0	0x3008      	MOVLW      8
0x11C1	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x11C2	0x3180      	MOVLP      0
0x11C3	0x24B4      	CALL       _led_wr_str
0x11C4	0x3190      	MOVLP      16
;main.c,498 :: 		}
0x11C5	0x29F9      	GOTO       L_show_pwr345
L_show_pwr342:
;main.c,499 :: 		else if(type==1) {   // 1602 LCD
0x11C6	0x002A      	MOVLB      10
0x11C7	0x086D      	MOVF       _type, 0
0x11C8	0x3A01      	XORLW      1
0x11C9	0x1D03      	BTFSS      STATUS, 2
0x11CA	0x29F9      	GOTO       L_show_pwr346
;main.c,500 :: 		if(P_High==1) led_wr_str (0, 9, "AN=  0W", 7);
0x11CB	0x0028      	MOVLB      8
0x11CC	0x0832      	MOVF       main_P_High, 0
0x11CD	0x3A01      	XORLW      1
0x11CE	0x1D03      	BTFSS      STATUS, 2
0x11CF	0x29DE      	GOTO       L_show_pwr347
0x11D0	0x002C      	MOVLB      12
0x11D1	0x01A4      	CLRF       FARG_led_wr_str_col
0x11D2	0x3009      	MOVLW      9
0x11D3	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x11D4	0x304B      	MOVLW      ?lstr62_main
0x11D5	0x00A6      	MOVWF      FARG_led_wr_str_str
0x11D6	0x3001      	MOVLW      hi_addr(?lstr62_main)
0x11D7	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x11D8	0x3007      	MOVLW      7
0x11D9	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x11DA	0x3180      	MOVLP      0
0x11DB	0x24B4      	CALL       _led_wr_str
0x11DC	0x3190      	MOVLP      16
0x11DD	0x29EB      	GOTO       L_show_pwr348
L_show_pwr347:
;main.c,501 :: 		else led_wr_str (0, 9, "AN=0.0W", 7);
0x11DE	0x002C      	MOVLB      12
0x11DF	0x01A4      	CLRF       FARG_led_wr_str_col
0x11E0	0x3009      	MOVLW      9
0x11E1	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x11E2	0x3043      	MOVLW      ?lstr63_main
0x11E3	0x00A6      	MOVWF      FARG_led_wr_str_str
0x11E4	0x3001      	MOVLW      hi_addr(?lstr63_main)
0x11E5	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x11E6	0x3007      	MOVLW      7
0x11E7	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x11E8	0x3180      	MOVLP      0
0x11E9	0x24B4      	CALL       _led_wr_str
0x11EA	0x3190      	MOVLP      16
L_show_pwr348:
;main.c,502 :: 		led_wr_str (1, 9, "EFF= 0%", 7);
0x11EB	0x3001      	MOVLW      1
0x11EC	0x002C      	MOVLB      12
0x11ED	0x00A4      	MOVWF      FARG_led_wr_str_col
0x11EE	0x3009      	MOVLW      9
0x11EF	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x11F0	0x303B      	MOVLW      ?lstr64_main
0x11F1	0x00A6      	MOVWF      FARG_led_wr_str_str
0x11F2	0x3001      	MOVLW      hi_addr(?lstr64_main)
0x11F3	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x11F4	0x3007      	MOVLW      7
0x11F5	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x11F6	0x3180      	MOVLP      0
0x11F7	0x24B4      	CALL       _led_wr_str
0x11F8	0x3190      	MOVLP      16
;main.c,503 :: 		}
L_show_pwr346:
L_show_pwr345:
L_show_pwr341:
;main.c,504 :: 		}
L_show_pwr337:
;main.c,505 :: 		Loss_mode = 1;
0x11F9	0x3001      	MOVLW      1
0x11FA	0x0020      	MOVLB      0
0x11FB	0x00C8      	MOVWF      _Loss_mode
;main.c,506 :: 		}
0x11FC	0x2A07      	GOTO       L_show_pwr349
L_show_pwr336:
0x11FD	0x0020      	MOVLB      0
;main.c,508 :: 		if(Loss_mode==1) lcd_ind();
0x11FE	0x0848      	MOVF       _Loss_mode, 0
0x11FF	0x3A01      	XORLW      1
0x1200	0x1D03      	BTFSS      STATUS, 2
0x1201	0x2A05      	GOTO       L_show_pwr350
0x1202	0x3188      	MOVLP      8
0x1203	0x2000      	CALL       _lcd_ind
0x1204	0x3190      	MOVLP      16
L_show_pwr350:
;main.c,509 :: 		Loss_mode = 0;
0x1205	0x0020      	MOVLB      0
0x1206	0x01C8      	CLRF       _Loss_mode
;main.c,510 :: 		}
L_show_pwr349:
;main.c,511 :: 		asm CLRWDT;
0x1207	0x0064      	CLRWDT
;main.c,512 :: 		if(Power != Power_old) {
0x1208	0x002B      	MOVLB      11
0x1209	0x0850      	MOVF       FARG_show_pwr_Power+1, 0
0x120A	0x0021      	MOVLB      1
0x120B	0x065F      	XORWF      _Power_old+1, 0
0x120C	0x1D03      	BTFSS      STATUS, 2
0x120D	0x2A11      	GOTO       L__show_pwr710
0x120E	0x085E      	MOVF       _Power_old, 0
0x120F	0x002B      	MOVLB      11
0x1210	0x064F      	XORWF      FARG_show_pwr_Power, 0
L__show_pwr710:
0x1211	0x1903      	BTFSC      STATUS, 2
0x1212	0x2E3B      	GOTO       L_show_pwr351
;main.c,513 :: 		Power_old = Power;
0x1213	0x002B      	MOVLB      11
0x1214	0x084F      	MOVF       FARG_show_pwr_Power, 0
0x1215	0x0021      	MOVLB      1
0x1216	0x00DE      	MOVWF      _Power_old
0x1217	0x002B      	MOVLB      11
0x1218	0x0850      	MOVF       FARG_show_pwr_Power+1, 0
0x1219	0x0021      	MOVLB      1
0x121A	0x00DF      	MOVWF      _Power_old+1
;main.c,515 :: 		if(P_High==0) {
0x121B	0x0028      	MOVLB      8
0x121C	0x0832      	MOVF       main_P_High, 0
0x121D	0x3A00      	XORLW      0
0x121E	0x1D03      	BTFSS      STATUS, 2
0x121F	0x2A7C      	GOTO       L_show_pwr352
;main.c,516 :: 		if(Power >= 100) {   // > 10 W
0x1220	0x3080      	MOVLW      128
0x1221	0x002B      	MOVLB      11
0x1222	0x0650      	XORWF      FARG_show_pwr_Power+1, 0
0x1223	0x00F0      	MOVWF      R0
0x1224	0x3080      	MOVLW      128
0x1225	0x0270      	SUBWF      R0, 0
0x1226	0x1D03      	BTFSS      STATUS, 2
0x1227	0x2A2A      	GOTO       L__show_pwr711
0x1228	0x3064      	MOVLW      100
0x1229	0x024F      	SUBWF      FARG_show_pwr_Power, 0
L__show_pwr711:
0x122A	0x1C03      	BTFSS      STATUS, 0
0x122B	0x2A51      	GOTO       L_show_pwr353
;main.c,517 :: 		Power += 5;  // rounding to 1 W
0x122C	0x3005      	MOVLW      5
0x122D	0x074F      	ADDWF      FARG_show_pwr_Power, 0
0x122E	0x00F0      	MOVWF      R0
0x122F	0x3000      	MOVLW      0
0x1230	0x3D50      	ADDWFC     FARG_show_pwr_Power+1, 0
0x1231	0x00F1      	MOVWF      R1
0x1232	0x0870      	MOVF       R0, 0
0x1233	0x00CF      	MOVWF      FARG_show_pwr_Power
0x1234	0x0871      	MOVF       R1, 0
0x1235	0x00D0      	MOVWF      FARG_show_pwr_Power+1
;main.c,518 :: 		IntToStr(Power, work_str);
0x1236	0x0870      	MOVF       R0, 0
0x1237	0x002C      	MOVLB      12
0x1238	0x00A4      	MOVWF      FARG_IntToStr_input
0x1239	0x0871      	MOVF       R1, 0
0x123A	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x123B	0x3062      	MOVLW      _work_str
0x123C	0x00A6      	MOVWF      FARG_IntToStr_output
0x123D	0x3005      	MOVLW      hi_addr(_work_str)
0x123E	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x123F	0x3180      	MOVLP      0
0x1240	0x2587      	CALL       _IntToStr
0x1241	0x3190      	MOVLP      16
;main.c,519 :: 		work_str_2[0] = work_str[2];
0x1242	0x002A      	MOVLB      10
0x1243	0x0864      	MOVF       _work_str+2, 0
0x1244	0x002B      	MOVLB      11
0x1245	0x00A0      	MOVWF      _work_str_2
;main.c,520 :: 		work_str_2[1] = work_str[3];
0x1246	0x002A      	MOVLB      10
0x1247	0x0865      	MOVF       _work_str+3, 0
0x1248	0x002B      	MOVLB      11
0x1249	0x00A1      	MOVWF      _work_str_2+1
;main.c,521 :: 		work_str_2[2] = work_str[4];
0x124A	0x002A      	MOVLB      10
0x124B	0x0866      	MOVF       _work_str+4, 0
0x124C	0x002B      	MOVLB      11
0x124D	0x00A2      	MOVWF      _work_str_2+2
;main.c,522 :: 		work_str_2[3] = 'W';
0x124E	0x3057      	MOVLW      87
0x124F	0x00A3      	MOVWF      _work_str_2+3
;main.c,523 :: 		}
0x1250	0x2A7B      	GOTO       L_show_pwr354
L_show_pwr353:
;main.c,525 :: 		IntToStr(Power, work_str);
0x1251	0x084F      	MOVF       FARG_show_pwr_Power, 0
0x1252	0x002C      	MOVLB      12
0x1253	0x00A4      	MOVWF      FARG_IntToStr_input
0x1254	0x002B      	MOVLB      11
0x1255	0x0850      	MOVF       FARG_show_pwr_Power+1, 0
0x1256	0x002C      	MOVLB      12
0x1257	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x1258	0x3062      	MOVLW      _work_str
0x1259	0x00A6      	MOVWF      FARG_IntToStr_output
0x125A	0x3005      	MOVLW      hi_addr(_work_str)
0x125B	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x125C	0x3180      	MOVLP      0
0x125D	0x2587      	CALL       _IntToStr
0x125E	0x3190      	MOVLP      16
;main.c,526 :: 		if(work_str[4] != ' ') work_str_2[0] = work_str[4]; else work_str_2[0] = '0';
0x125F	0x002A      	MOVLB      10
0x1260	0x0866      	MOVF       _work_str+4, 0
0x1261	0x3A20      	XORLW      32
0x1262	0x1903      	BTFSC      STATUS, 2
0x1263	0x2A68      	GOTO       L_show_pwr355
0x1264	0x0866      	MOVF       _work_str+4, 0
0x1265	0x002B      	MOVLB      11
0x1266	0x00A0      	MOVWF      _work_str_2
0x1267	0x2A6B      	GOTO       L_show_pwr356
L_show_pwr355:
0x1268	0x002B      	MOVLB      11
0x1269	0x3030      	MOVLW      48
0x126A	0x00A0      	MOVWF      _work_str_2
L_show_pwr356:
;main.c,527 :: 		work_str_2[1] = '.';
0x126B	0x302E      	MOVLW      46
0x126C	0x00A1      	MOVWF      _work_str_2+1
;main.c,528 :: 		if(work_str[5] != ' ') work_str_2[2] = work_str[5]; else work_str_2[2] = '0';
0x126D	0x002A      	MOVLB      10
0x126E	0x0867      	MOVF       _work_str+5, 0
0x126F	0x3A20      	XORLW      32
0x1270	0x1903      	BTFSC      STATUS, 2
0x1271	0x2A76      	GOTO       L_show_pwr357
0x1272	0x0867      	MOVF       _work_str+5, 0
0x1273	0x002B      	MOVLB      11
0x1274	0x00A2      	MOVWF      _work_str_2+2
0x1275	0x2A79      	GOTO       L_show_pwr358
L_show_pwr357:
0x1276	0x002B      	MOVLB      11
0x1277	0x3030      	MOVLW      48
0x1278	0x00A2      	MOVWF      _work_str_2+2
L_show_pwr358:
;main.c,529 :: 		work_str_2[3] = 'W';
0x1279	0x3057      	MOVLW      87
0x127A	0x00A3      	MOVWF      _work_str_2+3
;main.c,530 :: 		}
L_show_pwr354:
;main.c,531 :: 		}
0x127B	0x2AC4      	GOTO       L_show_pwr359
L_show_pwr352:
0x127C	0x002B      	MOVLB      11
;main.c,533 :: 		if(Power<999){   // 0 - 1500 Watts
0x127D	0x3080      	MOVLW      128
0x127E	0x0650      	XORWF      FARG_show_pwr_Power+1, 0
0x127F	0x00F0      	MOVWF      R0
0x1280	0x3080      	MOVLW      128
0x1281	0x3A03      	XORLW      3
0x1282	0x0270      	SUBWF      R0, 0
0x1283	0x1D03      	BTFSS      STATUS, 2
0x1284	0x2A87      	GOTO       L__show_pwr712
0x1285	0x30E7      	MOVLW      231
0x1286	0x024F      	SUBWF      FARG_show_pwr_Power, 0
L__show_pwr712:
0x1287	0x1803      	BTFSC      STATUS, 0
0x1288	0x2AA6      	GOTO       L_show_pwr360
;main.c,534 :: 		IntToStr(Power, work_str);
0x1289	0x084F      	MOVF       FARG_show_pwr_Power, 0
0x128A	0x002C      	MOVLB      12
0x128B	0x00A4      	MOVWF      FARG_IntToStr_input
0x128C	0x002B      	MOVLB      11
0x128D	0x0850      	MOVF       FARG_show_pwr_Power+1, 0
0x128E	0x002C      	MOVLB      12
0x128F	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x1290	0x3062      	MOVLW      _work_str
0x1291	0x00A6      	MOVWF      FARG_IntToStr_output
0x1292	0x3005      	MOVLW      hi_addr(_work_str)
0x1293	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x1294	0x3180      	MOVLP      0
0x1295	0x2587      	CALL       _IntToStr
0x1296	0x3190      	MOVLP      16
;main.c,535 :: 		work_str_2[0] = work_str[3];
0x1297	0x002A      	MOVLB      10
0x1298	0x0865      	MOVF       _work_str+3, 0
0x1299	0x002B      	MOVLB      11
0x129A	0x00A0      	MOVWF      _work_str_2
;main.c,536 :: 		work_str_2[1] = work_str[4];
0x129B	0x002A      	MOVLB      10
0x129C	0x0866      	MOVF       _work_str+4, 0
0x129D	0x002B      	MOVLB      11
0x129E	0x00A1      	MOVWF      _work_str_2+1
;main.c,537 :: 		work_str_2[2] = work_str[5];
0x129F	0x002A      	MOVLB      10
0x12A0	0x0867      	MOVF       _work_str+5, 0
0x12A1	0x002B      	MOVLB      11
0x12A2	0x00A2      	MOVWF      _work_str_2+2
;main.c,538 :: 		work_str_2[3] = 'W';
0x12A3	0x3057      	MOVLW      87
0x12A4	0x00A3      	MOVWF      _work_str_2+3
;main.c,539 :: 		}
0x12A5	0x2AC4      	GOTO       L_show_pwr361
L_show_pwr360:
;main.c,541 :: 		IntToStr(Power, work_str);
0x12A6	0x084F      	MOVF       FARG_show_pwr_Power, 0
0x12A7	0x002C      	MOVLB      12
0x12A8	0x00A4      	MOVWF      FARG_IntToStr_input
0x12A9	0x002B      	MOVLB      11
0x12AA	0x0850      	MOVF       FARG_show_pwr_Power+1, 0
0x12AB	0x002C      	MOVLB      12
0x12AC	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x12AD	0x3062      	MOVLW      _work_str
0x12AE	0x00A6      	MOVWF      FARG_IntToStr_output
0x12AF	0x3005      	MOVLW      hi_addr(_work_str)
0x12B0	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x12B1	0x3180      	MOVLP      0
0x12B2	0x2587      	CALL       _IntToStr
0x12B3	0x3190      	MOVLP      16
;main.c,542 :: 		work_str_2[0] = work_str[2];
0x12B4	0x002A      	MOVLB      10
0x12B5	0x0864      	MOVF       _work_str+2, 0
0x12B6	0x002B      	MOVLB      11
0x12B7	0x00A0      	MOVWF      _work_str_2
;main.c,543 :: 		work_str_2[1] = work_str[3];
0x12B8	0x002A      	MOVLB      10
0x12B9	0x0865      	MOVF       _work_str+3, 0
0x12BA	0x002B      	MOVLB      11
0x12BB	0x00A1      	MOVWF      _work_str_2+1
;main.c,544 :: 		work_str_2[2] = work_str[4];
0x12BC	0x002A      	MOVLB      10
0x12BD	0x0866      	MOVF       _work_str+4, 0
0x12BE	0x002B      	MOVLB      11
0x12BF	0x00A2      	MOVWF      _work_str_2+2
;main.c,545 :: 		work_str_2[3] = work_str[5];
0x12C0	0x002A      	MOVLB      10
0x12C1	0x0867      	MOVF       _work_str+5, 0
0x12C2	0x002B      	MOVLB      11
0x12C3	0x00A3      	MOVWF      _work_str_2+3
;main.c,546 :: 		}
L_show_pwr361:
;main.c,547 :: 		}
L_show_pwr359:
;main.c,548 :: 		if(type==4 | type==5) led_wr_str (0, 16+4*12, work_str_2, 4);  // 128*64 OLED
0x12C4	0x002A      	MOVLB      10
0x12C5	0x086D      	MOVF       _type, 0
0x12C6	0x3A04      	XORLW      4
0x12C7	0x3001      	MOVLW      1
0x12C8	0x1D03      	BTFSS      STATUS, 2
0x12C9	0x3000      	MOVLW      0
0x12CA	0x00F1      	MOVWF      R1
0x12CB	0x086D      	MOVF       _type, 0
0x12CC	0x3A05      	XORLW      5
0x12CD	0x3001      	MOVLW      1
0x12CE	0x1D03      	BTFSS      STATUS, 2
0x12CF	0x3000      	MOVLW      0
0x12D0	0x00F0      	MOVWF      R0
0x12D1	0x0871      	MOVF       R1, 0
0x12D2	0x04F0      	IORWF       R0, 1
0x12D3	0x1903      	BTFSC      STATUS, 2
0x12D4	0x2AE3      	GOTO       L_show_pwr362
0x12D5	0x002C      	MOVLB      12
0x12D6	0x01A4      	CLRF       FARG_led_wr_str_col
0x12D7	0x3040      	MOVLW      64
0x12D8	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x12D9	0x30A0      	MOVLW      _work_str_2
0x12DA	0x00A6      	MOVWF      FARG_led_wr_str_str
0x12DB	0x3005      	MOVLW      hi_addr(_work_str_2)
0x12DC	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x12DD	0x3004      	MOVLW      4
0x12DE	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x12DF	0x3180      	MOVLP      0
0x12E0	0x24B4      	CALL       _led_wr_str
0x12E1	0x3190      	MOVLP      16
0x12E2	0x2AF5      	GOTO       L_show_pwr363
L_show_pwr362:
;main.c,549 :: 		else if(type!=0) led_wr_str (0, 4, work_str_2, 4);  // 1602  & 128*32
0x12E3	0x002A      	MOVLB      10
0x12E4	0x086D      	MOVF       _type, 0
0x12E5	0x3A00      	XORLW      0
0x12E6	0x1903      	BTFSC      STATUS, 2
0x12E7	0x2AF5      	GOTO       L_show_pwr364
0x12E8	0x002C      	MOVLB      12
0x12E9	0x01A4      	CLRF       FARG_led_wr_str_col
0x12EA	0x3004      	MOVLW      4
0x12EB	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x12EC	0x30A0      	MOVLW      _work_str_2
0x12ED	0x00A6      	MOVWF      FARG_led_wr_str_str
0x12EE	0x3005      	MOVLW      hi_addr(_work_str_2)
0x12EF	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x12F0	0x3004      	MOVLW      4
0x12F1	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x12F2	0x3180      	MOVLP      0
0x12F3	0x24B4      	CALL       _led_wr_str
0x12F4	0x3190      	MOVLP      16
L_show_pwr364:
L_show_pwr363:
;main.c,551 :: 		asm CLRWDT;
0x12F5	0x0064      	CLRWDT
;main.c,553 :: 		if(Loss_mode==1)  {
0x12F6	0x0020      	MOVLB      0
0x12F7	0x0848      	MOVF       _Loss_mode, 0
0x12F8	0x3A01      	XORLW      1
0x12F9	0x1D03      	BTFSS      STATUS, 2
0x12FA	0x2E3B      	GOTO       L_show_pwr365
;main.c,554 :: 		if(ind==0 & cap==0) swr_a = SWR;
0x12FB	0x0028      	MOVLB      8
0x12FC	0x0831      	MOVF       main_ind, 0
0x12FD	0x3A00      	XORLW      0
0x12FE	0x3001      	MOVLW      1
0x12FF	0x1D03      	BTFSS      STATUS, 2
0x1300	0x3000      	MOVLW      0
0x1301	0x00F1      	MOVWF      R1
0x1302	0x0027      	MOVLB      7
0x1303	0x085B      	MOVF       main_cap, 0
0x1304	0x3A00      	XORLW      0
0x1305	0x3001      	MOVLW      1
0x1306	0x1D03      	BTFSS      STATUS, 2
0x1307	0x3000      	MOVLW      0
0x1308	0x00F0      	MOVWF      R0
0x1309	0x0871      	MOVF       R1, 0
0x130A	0x05F0      	ANDWF      R0, 1
0x130B	0x1903      	BTFSC      STATUS, 2
0x130C	0x2B15      	GOTO       L_show_pwr366
0x130D	0x002B      	MOVLB      11
0x130E	0x0851      	MOVF       FARG_show_pwr_SWR, 0
0x130F	0x0029      	MOVLB      9
0x1310	0x00EA      	MOVWF      _swr_a
0x1311	0x002B      	MOVLB      11
0x1312	0x0852      	MOVF       FARG_show_pwr_SWR+1, 0
0x1313	0x0029      	MOVLB      9
0x1314	0x00EB      	MOVWF      _swr_a+1
L_show_pwr366:
0x1315	0x0029      	MOVLB      9
;main.c,555 :: 		a = 1.0 / ((swr_a/100.0 + 100.0/swr_a) * Fid_loss/10.0 * 0.115 + 1.0); // Fider loss
0x1316	0x086A      	MOVF       _swr_a, 0
0x1317	0x00F0      	MOVWF      R0
0x1318	0x086B      	MOVF       _swr_a+1, 0
0x1319	0x00F1      	MOVWF      R1
0x131A	0x3188      	MOVLP      8
0x131B	0x26E1      	CALL       _Int2Double
0x131C	0x3190      	MOVLP      16
0x131D	0x0870      	MOVF       R0, 0
0x131E	0x002B      	MOVLB      11
0x131F	0x00E3      	MOVWF      FLOC__show_pwr+4
0x1320	0x0871      	MOVF       R1, 0
0x1321	0x00E4      	MOVWF      FLOC__show_pwr+5
0x1322	0x0872      	MOVF       R2, 0
0x1323	0x00E5      	MOVWF      FLOC__show_pwr+6
0x1324	0x0873      	MOVF       R3, 0
0x1325	0x00E6      	MOVWF      FLOC__show_pwr+7
0x1326	0x3000      	MOVLW      0
0x1327	0x00F4      	MOVWF      R4
0x1328	0x3000      	MOVLW      0
0x1329	0x00F5      	MOVWF      R5
0x132A	0x3048      	MOVLW      72
0x132B	0x00F6      	MOVWF      R6
0x132C	0x3085      	MOVLW      133
0x132D	0x00F7      	MOVWF      R7
0x132E	0x0863      	MOVF       FLOC__show_pwr+4, 0
0x132F	0x00F0      	MOVWF      R0
0x1330	0x0864      	MOVF       FLOC__show_pwr+5, 0
0x1331	0x00F1      	MOVWF      R1
0x1332	0x0865      	MOVF       FLOC__show_pwr+6, 0
0x1333	0x00F2      	MOVWF      R2
0x1334	0x0866      	MOVF       FLOC__show_pwr+7, 0
0x1335	0x00F3      	MOVWF      R3
0x1336	0x3188      	MOVLP      8
0x1337	0x22FF      	CALL       _Div_32x32_FP
0x1338	0x3190      	MOVLP      16
0x1339	0x0870      	MOVF       R0, 0
0x133A	0x002B      	MOVLB      11
0x133B	0x00DF      	MOVWF      FLOC__show_pwr
0x133C	0x0871      	MOVF       R1, 0
0x133D	0x00E0      	MOVWF      FLOC__show_pwr+1
0x133E	0x0872      	MOVF       R2, 0
0x133F	0x00E1      	MOVWF      FLOC__show_pwr+2
0x1340	0x0873      	MOVF       R3, 0
0x1341	0x00E2      	MOVWF      FLOC__show_pwr+3
0x1342	0x0863      	MOVF       FLOC__show_pwr+4, 0
0x1343	0x00F4      	MOVWF      R4
0x1344	0x0864      	MOVF       FLOC__show_pwr+5, 0
0x1345	0x00F5      	MOVWF      R5
0x1346	0x0865      	MOVF       FLOC__show_pwr+6, 0
0x1347	0x00F6      	MOVWF      R6
0x1348	0x0866      	MOVF       FLOC__show_pwr+7, 0
0x1349	0x00F7      	MOVWF      R7
0x134A	0x3000      	MOVLW      0
0x134B	0x00F0      	MOVWF      R0
0x134C	0x3000      	MOVLW      0
0x134D	0x00F1      	MOVWF      R1
0x134E	0x3048      	MOVLW      72
0x134F	0x00F2      	MOVWF      R2
0x1350	0x3085      	MOVLW      133
0x1351	0x00F3      	MOVWF      R3
0x1352	0x3188      	MOVLP      8
0x1353	0x22FF      	CALL       _Div_32x32_FP
0x1354	0x3190      	MOVLP      16
0x1355	0x002B      	MOVLB      11
0x1356	0x085F      	MOVF       FLOC__show_pwr, 0
0x1357	0x00F4      	MOVWF      R4
0x1358	0x0860      	MOVF       FLOC__show_pwr+1, 0
0x1359	0x00F5      	MOVWF      R5
0x135A	0x0861      	MOVF       FLOC__show_pwr+2, 0
0x135B	0x00F6      	MOVWF      R6
0x135C	0x0862      	MOVF       FLOC__show_pwr+3, 0
0x135D	0x00F7      	MOVWF      R7
0x135E	0x3180      	MOVLP      0
0x135F	0x26AD      	CALL       _Add_32x32_FP
0x1360	0x3190      	MOVLP      16
0x1361	0x0870      	MOVF       R0, 0
0x1362	0x002B      	MOVLB      11
0x1363	0x00DF      	MOVWF      FLOC__show_pwr
0x1364	0x0871      	MOVF       R1, 0
0x1365	0x00E0      	MOVWF      FLOC__show_pwr+1
0x1366	0x0872      	MOVF       R2, 0
0x1367	0x00E1      	MOVWF      FLOC__show_pwr+2
0x1368	0x0873      	MOVF       R3, 0
0x1369	0x00E2      	MOVWF      FLOC__show_pwr+3
0x136A	0x0028      	MOVLB      8
0x136B	0x086F      	MOVF       _Fid_loss, 0
0x136C	0x00F0      	MOVWF      R0
0x136D	0x3180      	MOVLP      0
0x136E	0x27BE      	CALL       _Byte2Double
0x136F	0x3190      	MOVLP      16
0x1370	0x002B      	MOVLB      11
0x1371	0x085F      	MOVF       FLOC__show_pwr, 0
0x1372	0x00F4      	MOVWF      R4
0x1373	0x0860      	MOVF       FLOC__show_pwr+1, 0
0x1374	0x00F5      	MOVWF      R5
0x1375	0x0861      	MOVF       FLOC__show_pwr+2, 0
0x1376	0x00F6      	MOVWF      R6
0x1377	0x0862      	MOVF       FLOC__show_pwr+3, 0
0x1378	0x00F7      	MOVWF      R7
0x1379	0x3188      	MOVLP      8
0x137A	0x2598      	CALL       _Mul_32x32_FP
0x137B	0x3190      	MOVLP      16
0x137C	0x3000      	MOVLW      0
0x137D	0x00F4      	MOVWF      R4
0x137E	0x3000      	MOVLW      0
0x137F	0x00F5      	MOVWF      R5
0x1380	0x3020      	MOVLW      32
0x1381	0x00F6      	MOVWF      R6
0x1382	0x3082      	MOVLW      130
0x1383	0x00F7      	MOVWF      R7
0x1384	0x3188      	MOVLP      8
0x1385	0x22FF      	CALL       _Div_32x32_FP
0x1386	0x3190      	MOVLP      16
0x1387	0x301F      	MOVLW      31
0x1388	0x00F4      	MOVWF      R4
0x1389	0x3085      	MOVLW      133
0x138A	0x00F5      	MOVWF      R5
0x138B	0x306B      	MOVLW      107
0x138C	0x00F6      	MOVWF      R6
0x138D	0x307B      	MOVLW      123
0x138E	0x00F7      	MOVWF      R7
0x138F	0x3188      	MOVLP      8
0x1390	0x2598      	CALL       _Mul_32x32_FP
0x1391	0x3190      	MOVLP      16
0x1392	0x3000      	MOVLW      0
0x1393	0x00F4      	MOVWF      R4
0x1394	0x3000      	MOVLW      0
0x1395	0x00F5      	MOVWF      R5
0x1396	0x3000      	MOVLW      0
0x1397	0x00F6      	MOVWF      R6
0x1398	0x307F      	MOVLW      127
0x1399	0x00F7      	MOVWF      R7
0x139A	0x3180      	MOVLP      0
0x139B	0x26AD      	CALL       _Add_32x32_FP
0x139C	0x3190      	MOVLP      16
0x139D	0x0870      	MOVF       R0, 0
0x139E	0x00F4      	MOVWF      R4
0x139F	0x0871      	MOVF       R1, 0
0x13A0	0x00F5      	MOVWF      R5
0x13A1	0x0872      	MOVF       R2, 0
0x13A2	0x00F6      	MOVWF      R6
0x13A3	0x0873      	MOVF       R3, 0
0x13A4	0x00F7      	MOVWF      R7
0x13A5	0x3000      	MOVLW      0
0x13A6	0x00F0      	MOVWF      R0
0x13A7	0x3000      	MOVLW      0
0x13A8	0x00F1      	MOVWF      R1
0x13A9	0x3000      	MOVLW      0
0x13AA	0x00F2      	MOVWF      R2
0x13AB	0x307F      	MOVLW      127
0x13AC	0x00F3      	MOVWF      R3
0x13AD	0x3188      	MOVLP      8
0x13AE	0x22FF      	CALL       _Div_32x32_FP
0x13AF	0x3190      	MOVLP      16
0x13B0	0x0870      	MOVF       R0, 0
0x13B1	0x002B      	MOVLB      11
0x13B2	0x00E7      	MOVWF      FLOC__show_pwr+8
0x13B3	0x0871      	MOVF       R1, 0
0x13B4	0x00E8      	MOVWF      FLOC__show_pwr+9
0x13B5	0x0872      	MOVF       R2, 0
0x13B6	0x00E9      	MOVWF      FLOC__show_pwr+10
0x13B7	0x0873      	MOVF       R3, 0
0x13B8	0x00EA      	MOVWF      FLOC__show_pwr+11
0x13B9	0x0867      	MOVF       FLOC__show_pwr+8, 0
0x13BA	0x00D7      	MOVWF      show_pwr_a_L0
0x13BB	0x0868      	MOVF       FLOC__show_pwr+9, 0
0x13BC	0x00D8      	MOVWF      show_pwr_a_L0+1
0x13BD	0x0869      	MOVF       FLOC__show_pwr+10, 0
0x13BE	0x00D9      	MOVWF      show_pwr_a_L0+2
0x13BF	0x086A      	MOVF       FLOC__show_pwr+11, 0
0x13C0	0x00DA      	MOVWF      show_pwr_a_L0+3
;main.c,556 :: 		b = 4.0 / (2.0 + SWR/100.0 + 100.0/SWR);    // SWR loss
0x13C1	0x0851      	MOVF       FARG_show_pwr_SWR, 0
0x13C2	0x00F0      	MOVWF      R0
0x13C3	0x0852      	MOVF       FARG_show_pwr_SWR+1, 0
0x13C4	0x00F1      	MOVWF      R1
0x13C5	0x3188      	MOVLP      8
0x13C6	0x26E1      	CALL       _Int2Double
0x13C7	0x3190      	MOVLP      16
0x13C8	0x0870      	MOVF       R0, 0
0x13C9	0x002B      	MOVLB      11
0x13CA	0x00E3      	MOVWF      FLOC__show_pwr+4
0x13CB	0x0871      	MOVF       R1, 0
0x13CC	0x00E4      	MOVWF      FLOC__show_pwr+5
0x13CD	0x0872      	MOVF       R2, 0
0x13CE	0x00E5      	MOVWF      FLOC__show_pwr+6
0x13CF	0x0873      	MOVF       R3, 0
0x13D0	0x00E6      	MOVWF      FLOC__show_pwr+7
0x13D1	0x3000      	MOVLW      0
0x13D2	0x00F4      	MOVWF      R4
0x13D3	0x3000      	MOVLW      0
0x13D4	0x00F5      	MOVWF      R5
0x13D5	0x3048      	MOVLW      72
0x13D6	0x00F6      	MOVWF      R6
0x13D7	0x3085      	MOVLW      133
0x13D8	0x00F7      	MOVWF      R7
0x13D9	0x0863      	MOVF       FLOC__show_pwr+4, 0
0x13DA	0x00F0      	MOVWF      R0
0x13DB	0x0864      	MOVF       FLOC__show_pwr+5, 0
0x13DC	0x00F1      	MOVWF      R1
0x13DD	0x0865      	MOVF       FLOC__show_pwr+6, 0
0x13DE	0x00F2      	MOVWF      R2
0x13DF	0x0866      	MOVF       FLOC__show_pwr+7, 0
0x13E0	0x00F3      	MOVWF      R3
0x13E1	0x3188      	MOVLP      8
0x13E2	0x22FF      	CALL       _Div_32x32_FP
0x13E3	0x3190      	MOVLP      16
0x13E4	0x3000      	MOVLW      0
0x13E5	0x00F4      	MOVWF      R4
0x13E6	0x3000      	MOVLW      0
0x13E7	0x00F5      	MOVWF      R5
0x13E8	0x3000      	MOVLW      0
0x13E9	0x00F6      	MOVWF      R6
0x13EA	0x3080      	MOVLW      128
0x13EB	0x00F7      	MOVWF      R7
0x13EC	0x3180      	MOVLP      0
0x13ED	0x26AD      	CALL       _Add_32x32_FP
0x13EE	0x3190      	MOVLP      16
0x13EF	0x0870      	MOVF       R0, 0
0x13F0	0x002B      	MOVLB      11
0x13F1	0x00DF      	MOVWF      FLOC__show_pwr
0x13F2	0x0871      	MOVF       R1, 0
0x13F3	0x00E0      	MOVWF      FLOC__show_pwr+1
0x13F4	0x0872      	MOVF       R2, 0
0x13F5	0x00E1      	MOVWF      FLOC__show_pwr+2
0x13F6	0x0873      	MOVF       R3, 0
0x13F7	0x00E2      	MOVWF      FLOC__show_pwr+3
0x13F8	0x0863      	MOVF       FLOC__show_pwr+4, 0
0x13F9	0x00F4      	MOVWF      R4
0x13FA	0x0864      	MOVF       FLOC__show_pwr+5, 0
0x13FB	0x00F5      	MOVWF      R5
0x13FC	0x0865      	MOVF       FLOC__show_pwr+6, 0
0x13FD	0x00F6      	MOVWF      R6
0x13FE	0x0866      	MOVF       FLOC__show_pwr+7, 0
0x13FF	0x00F7      	MOVWF      R7
0x1400	0x3000      	MOVLW      0
0x1401	0x00F0      	MOVWF      R0
0x1402	0x3000      	MOVLW      0
0x1403	0x00F1      	MOVWF      R1
0x1404	0x3048      	MOVLW      72
0x1405	0x00F2      	MOVWF      R2
0x1406	0x3085      	MOVLW      133
0x1407	0x00F3      	MOVWF      R3
0x1408	0x3188      	MOVLP      8
0x1409	0x22FF      	CALL       _Div_32x32_FP
0x140A	0x3190      	MOVLP      16
0x140B	0x002B      	MOVLB      11
0x140C	0x085F      	MOVF       FLOC__show_pwr, 0
0x140D	0x00F4      	MOVWF      R4
0x140E	0x0860      	MOVF       FLOC__show_pwr+1, 0
0x140F	0x00F5      	MOVWF      R5
0x1410	0x0861      	MOVF       FLOC__show_pwr+2, 0
0x1411	0x00F6      	MOVWF      R6
0x1412	0x0862      	MOVF       FLOC__show_pwr+3, 0
0x1413	0x00F7      	MOVWF      R7
0x1414	0x3180      	MOVLP      0
0x1415	0x26AD      	CALL       _Add_32x32_FP
0x1416	0x3190      	MOVLP      16
0x1417	0x0870      	MOVF       R0, 0
0x1418	0x00F4      	MOVWF      R4
0x1419	0x0871      	MOVF       R1, 0
0x141A	0x00F5      	MOVWF      R5
0x141B	0x0872      	MOVF       R2, 0
0x141C	0x00F6      	MOVWF      R6
0x141D	0x0873      	MOVF       R3, 0
0x141E	0x00F7      	MOVWF      R7
0x141F	0x3000      	MOVLW      0
0x1420	0x00F0      	MOVWF      R0
0x1421	0x3000      	MOVLW      0
0x1422	0x00F1      	MOVWF      R1
0x1423	0x3000      	MOVLW      0
0x1424	0x00F2      	MOVWF      R2
0x1425	0x3081      	MOVLW      129
0x1426	0x00F3      	MOVWF      R3
0x1427	0x3188      	MOVLP      8
0x1428	0x22FF      	CALL       _Div_32x32_FP
0x1429	0x3190      	MOVLP      16
0x142A	0x0870      	MOVF       R0, 0
0x142B	0x002B      	MOVLB      11
0x142C	0x00DB      	MOVWF      show_pwr_b_L0
0x142D	0x0871      	MOVF       R1, 0
0x142E	0x00DC      	MOVWF      show_pwr_b_L0+1
0x142F	0x0872      	MOVF       R2, 0
0x1430	0x00DD      	MOVWF      show_pwr_b_L0+2
0x1431	0x0873      	MOVF       R3, 0
0x1432	0x00DE      	MOVWF      show_pwr_b_L0+3
;main.c,557 :: 		if(a>=1.0) a = 1.0;
0x1433	0x3000      	MOVLW      0
0x1434	0x00F4      	MOVWF      R4
0x1435	0x3000      	MOVLW      0
0x1436	0x00F5      	MOVWF      R5
0x1437	0x3000      	MOVLW      0
0x1438	0x00F6      	MOVWF      R6
0x1439	0x307F      	MOVLW      127
0x143A	0x00F7      	MOVWF      R7
0x143B	0x0867      	MOVF       FLOC__show_pwr+8, 0
0x143C	0x00F0      	MOVWF      R0
0x143D	0x0868      	MOVF       FLOC__show_pwr+9, 0
0x143E	0x00F1      	MOVWF      R1
0x143F	0x0869      	MOVF       FLOC__show_pwr+10, 0
0x1440	0x00F2      	MOVWF      R2
0x1441	0x086A      	MOVF       FLOC__show_pwr+11, 0
0x1442	0x00F3      	MOVWF      R3
0x1443	0x3188      	MOVLP      8
0x1444	0x23BB      	CALL       _Compare_Double
0x1445	0x3190      	MOVLP      16
0x1446	0x3001      	MOVLW      1
0x1447	0x1C03      	BTFSS      STATUS, 0
0x1448	0x3000      	MOVLW      0
0x1449	0x00F0      	MOVWF      R0
0x144A	0x0870      	MOVF       R0, 0
0x144B	0x1903      	BTFSC      STATUS, 2
0x144C	0x2C56      	GOTO       L_show_pwr367
0x144D	0x3000      	MOVLW      0
0x144E	0x002B      	MOVLB      11
0x144F	0x00D7      	MOVWF      show_pwr_a_L0
0x1450	0x3000      	MOVLW      0
0x1451	0x00D8      	MOVWF      show_pwr_a_L0+1
0x1452	0x3000      	MOVLW      0
0x1453	0x00D9      	MOVWF      show_pwr_a_L0+2
0x1454	0x307F      	MOVLW      127
0x1455	0x00DA      	MOVWF      show_pwr_a_L0+3
L_show_pwr367:
0x1456	0x002B      	MOVLB      11
;main.c,558 :: 		if(b>=1.0) b = 1.0;
0x1457	0x3000      	MOVLW      0
0x1458	0x00F4      	MOVWF      R4
0x1459	0x3000      	MOVLW      0
0x145A	0x00F5      	MOVWF      R5
0x145B	0x3000      	MOVLW      0
0x145C	0x00F6      	MOVWF      R6
0x145D	0x307F      	MOVLW      127
0x145E	0x00F7      	MOVWF      R7
0x145F	0x085B      	MOVF       show_pwr_b_L0, 0
0x1460	0x00F0      	MOVWF      R0
0x1461	0x085C      	MOVF       show_pwr_b_L0+1, 0
0x1462	0x00F1      	MOVWF      R1
0x1463	0x085D      	MOVF       show_pwr_b_L0+2, 0
0x1464	0x00F2      	MOVWF      R2
0x1465	0x085E      	MOVF       show_pwr_b_L0+3, 0
0x1466	0x00F3      	MOVWF      R3
0x1467	0x3188      	MOVLP      8
0x1468	0x23BB      	CALL       _Compare_Double
0x1469	0x3190      	MOVLP      16
0x146A	0x3001      	MOVLW      1
0x146B	0x1C03      	BTFSS      STATUS, 0
0x146C	0x3000      	MOVLW      0
0x146D	0x00F0      	MOVWF      R0
0x146E	0x0870      	MOVF       R0, 0
0x146F	0x1903      	BTFSC      STATUS, 2
0x1470	0x2C7A      	GOTO       L_show_pwr368
0x1471	0x3000      	MOVLW      0
0x1472	0x002B      	MOVLB      11
0x1473	0x00DB      	MOVWF      show_pwr_b_L0
0x1474	0x3000      	MOVLW      0
0x1475	0x00DC      	MOVWF      show_pwr_b_L0+1
0x1476	0x3000      	MOVLW      0
0x1477	0x00DD      	MOVWF      show_pwr_b_L0+2
0x1478	0x307F      	MOVLW      127
0x1479	0x00DE      	MOVWF      show_pwr_b_L0+3
L_show_pwr368:
0x147A	0x002B      	MOVLB      11
;main.c,559 :: 		p_ant = Power * a * b;
0x147B	0x084F      	MOVF       FARG_show_pwr_Power, 0
0x147C	0x00F0      	MOVWF      R0
0x147D	0x0850      	MOVF       FARG_show_pwr_Power+1, 0
0x147E	0x00F1      	MOVWF      R1
0x147F	0x3188      	MOVLP      8
0x1480	0x26E1      	CALL       _Int2Double
0x1481	0x3190      	MOVLP      16
0x1482	0x002B      	MOVLB      11
0x1483	0x0857      	MOVF       show_pwr_a_L0, 0
0x1484	0x00F4      	MOVWF      R4
0x1485	0x0858      	MOVF       show_pwr_a_L0+1, 0
0x1486	0x00F5      	MOVWF      R5
0x1487	0x0859      	MOVF       show_pwr_a_L0+2, 0
0x1488	0x00F6      	MOVWF      R6
0x1489	0x085A      	MOVF       show_pwr_a_L0+3, 0
0x148A	0x00F7      	MOVWF      R7
0x148B	0x3188      	MOVLP      8
0x148C	0x2598      	CALL       _Mul_32x32_FP
0x148D	0x3190      	MOVLP      16
0x148E	0x002B      	MOVLB      11
0x148F	0x085B      	MOVF       show_pwr_b_L0, 0
0x1490	0x00F4      	MOVWF      R4
0x1491	0x085C      	MOVF       show_pwr_b_L0+1, 0
0x1492	0x00F5      	MOVWF      R5
0x1493	0x085D      	MOVF       show_pwr_b_L0+2, 0
0x1494	0x00F6      	MOVWF      R6
0x1495	0x085E      	MOVF       show_pwr_b_L0+3, 0
0x1496	0x00F7      	MOVWF      R7
0x1497	0x3188      	MOVLP      8
0x1498	0x2598      	CALL       _Mul_32x32_FP
0x1499	0x3190      	MOVLP      16
0x149A	0x3180      	MOVLP      0
0x149B	0x2651      	CALL       _Double2Int
0x149C	0x3190      	MOVLP      16
0x149D	0x0870      	MOVF       R0, 0
0x149E	0x002B      	MOVLB      11
0x149F	0x00D3      	MOVWF      show_pwr_p_ant_L0
0x14A0	0x0871      	MOVF       R1, 0
0x14A1	0x00D4      	MOVWF      show_pwr_p_ant_L0+1
;main.c,560 :: 		eff = a * b * 100;
0x14A2	0x0857      	MOVF       show_pwr_a_L0, 0
0x14A3	0x00F0      	MOVWF      R0
0x14A4	0x0858      	MOVF       show_pwr_a_L0+1, 0
0x14A5	0x00F1      	MOVWF      R1
0x14A6	0x0859      	MOVF       show_pwr_a_L0+2, 0
0x14A7	0x00F2      	MOVWF      R2
0x14A8	0x085A      	MOVF       show_pwr_a_L0+3, 0
0x14A9	0x00F3      	MOVWF      R3
0x14AA	0x085B      	MOVF       show_pwr_b_L0, 0
0x14AB	0x00F4      	MOVWF      R4
0x14AC	0x085C      	MOVF       show_pwr_b_L0+1, 0
0x14AD	0x00F5      	MOVWF      R5
0x14AE	0x085D      	MOVF       show_pwr_b_L0+2, 0
0x14AF	0x00F6      	MOVWF      R6
0x14B0	0x085E      	MOVF       show_pwr_b_L0+3, 0
0x14B1	0x00F7      	MOVWF      R7
0x14B2	0x3188      	MOVLP      8
0x14B3	0x2598      	CALL       _Mul_32x32_FP
0x14B4	0x3190      	MOVLP      16
0x14B5	0x3000      	MOVLW      0
0x14B6	0x00F4      	MOVWF      R4
0x14B7	0x3000      	MOVLW      0
0x14B8	0x00F5      	MOVWF      R5
0x14B9	0x3048      	MOVLW      72
0x14BA	0x00F6      	MOVWF      R6
0x14BB	0x3085      	MOVLW      133
0x14BC	0x00F7      	MOVWF      R7
0x14BD	0x3188      	MOVLP      8
0x14BE	0x2598      	CALL       _Mul_32x32_FP
0x14BF	0x3190      	MOVLP      16
0x14C0	0x3180      	MOVLP      0
0x14C1	0x2651      	CALL       _Double2Int
0x14C2	0x3190      	MOVLP      16
0x14C3	0x0870      	MOVF       R0, 0
0x14C4	0x002B      	MOVLB      11
0x14C5	0x00D5      	MOVWF      show_pwr_eff_L0
0x14C6	0x0871      	MOVF       R1, 0
0x14C7	0x00D6      	MOVWF      show_pwr_eff_L0+1
;main.c,561 :: 		if(eff>=100) eff = 99;
0x14C8	0x3080      	MOVLW      128
0x14C9	0x0671      	XORWF      R1, 0
0x14CA	0x00F2      	MOVWF      R2
0x14CB	0x3080      	MOVLW      128
0x14CC	0x0272      	SUBWF      R2, 0
0x14CD	0x1D03      	BTFSS      STATUS, 2
0x14CE	0x2CD1      	GOTO       L__show_pwr713
0x14CF	0x3064      	MOVLW      100
0x14D0	0x0270      	SUBWF      R0, 0
L__show_pwr713:
0x14D1	0x1C03      	BTFSS      STATUS, 0
0x14D2	0x2CD7      	GOTO       L_show_pwr369
0x14D3	0x3063      	MOVLW      99
0x14D4	0x00D5      	MOVWF      show_pwr_eff_L0
0x14D5	0x3000      	MOVLW      0
0x14D6	0x00D6      	MOVWF      show_pwr_eff_L0+1
L_show_pwr369:
;main.c,563 :: 		if(P_High==0) {
0x14D7	0x0028      	MOVLB      8
0x14D8	0x0832      	MOVF       main_P_High, 0
0x14D9	0x3A00      	XORLW      0
0x14DA	0x1D03      	BTFSS      STATUS, 2
0x14DB	0x2D38      	GOTO       L_show_pwr370
;main.c,564 :: 		if(p_ant >= 100) {   // > 10 W
0x14DC	0x3080      	MOVLW      128
0x14DD	0x002B      	MOVLB      11
0x14DE	0x0654      	XORWF      show_pwr_p_ant_L0+1, 0
0x14DF	0x00F0      	MOVWF      R0
0x14E0	0x3080      	MOVLW      128
0x14E1	0x0270      	SUBWF      R0, 0
0x14E2	0x1D03      	BTFSS      STATUS, 2
0x14E3	0x2CE6      	GOTO       L__show_pwr714
0x14E4	0x3064      	MOVLW      100
0x14E5	0x0253      	SUBWF      show_pwr_p_ant_L0, 0
L__show_pwr714:
0x14E6	0x1C03      	BTFSS      STATUS, 0
0x14E7	0x2D0D      	GOTO       L_show_pwr371
;main.c,565 :: 		p_ant += 5;  // rounding to 1 W
0x14E8	0x3005      	MOVLW      5
0x14E9	0x0753      	ADDWF      show_pwr_p_ant_L0, 0
0x14EA	0x00F0      	MOVWF      R0
0x14EB	0x3000      	MOVLW      0
0x14EC	0x3D54      	ADDWFC     show_pwr_p_ant_L0+1, 0
0x14ED	0x00F1      	MOVWF      R1
0x14EE	0x0870      	MOVF       R0, 0
0x14EF	0x00D3      	MOVWF      show_pwr_p_ant_L0
0x14F0	0x0871      	MOVF       R1, 0
0x14F1	0x00D4      	MOVWF      show_pwr_p_ant_L0+1
;main.c,566 :: 		IntToStr(p_ant, work_str);
0x14F2	0x0870      	MOVF       R0, 0
0x14F3	0x002C      	MOVLB      12
0x14F4	0x00A4      	MOVWF      FARG_IntToStr_input
0x14F5	0x0871      	MOVF       R1, 0
0x14F6	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x14F7	0x3062      	MOVLW      _work_str
0x14F8	0x00A6      	MOVWF      FARG_IntToStr_output
0x14F9	0x3005      	MOVLW      hi_addr(_work_str)
0x14FA	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x14FB	0x3180      	MOVLP      0
0x14FC	0x2587      	CALL       _IntToStr
0x14FD	0x3190      	MOVLP      16
;main.c,567 :: 		work_str_2[0] = work_str[2];
0x14FE	0x002A      	MOVLB      10
0x14FF	0x0864      	MOVF       _work_str+2, 0
0x1500	0x002B      	MOVLB      11
0x1501	0x00A0      	MOVWF      _work_str_2
;main.c,568 :: 		work_str_2[1] = work_str[3];
0x1502	0x002A      	MOVLB      10
0x1503	0x0865      	MOVF       _work_str+3, 0
0x1504	0x002B      	MOVLB      11
0x1505	0x00A1      	MOVWF      _work_str_2+1
;main.c,569 :: 		work_str_2[2] = work_str[4];
0x1506	0x002A      	MOVLB      10
0x1507	0x0866      	MOVF       _work_str+4, 0
0x1508	0x002B      	MOVLB      11
0x1509	0x00A2      	MOVWF      _work_str_2+2
;main.c,570 :: 		work_str_2[3] = 'W';
0x150A	0x3057      	MOVLW      87
0x150B	0x00A3      	MOVWF      _work_str_2+3
;main.c,571 :: 		}
0x150C	0x2D37      	GOTO       L_show_pwr372
L_show_pwr371:
;main.c,573 :: 		IntToStr(p_ant, work_str);
0x150D	0x0853      	MOVF       show_pwr_p_ant_L0, 0
0x150E	0x002C      	MOVLB      12
0x150F	0x00A4      	MOVWF      FARG_IntToStr_input
0x1510	0x002B      	MOVLB      11
0x1511	0x0854      	MOVF       show_pwr_p_ant_L0+1, 0
0x1512	0x002C      	MOVLB      12
0x1513	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x1514	0x3062      	MOVLW      _work_str
0x1515	0x00A6      	MOVWF      FARG_IntToStr_output
0x1516	0x3005      	MOVLW      hi_addr(_work_str)
0x1517	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x1518	0x3180      	MOVLP      0
0x1519	0x2587      	CALL       _IntToStr
0x151A	0x3190      	MOVLP      16
;main.c,574 :: 		if(work_str[4] != ' ') work_str_2[0] = work_str[4]; else work_str_2[0] = '0';
0x151B	0x002A      	MOVLB      10
0x151C	0x0866      	MOVF       _work_str+4, 0
0x151D	0x3A20      	XORLW      32
0x151E	0x1903      	BTFSC      STATUS, 2
0x151F	0x2D24      	GOTO       L_show_pwr373
0x1520	0x0866      	MOVF       _work_str+4, 0
0x1521	0x002B      	MOVLB      11
0x1522	0x00A0      	MOVWF      _work_str_2
0x1523	0x2D27      	GOTO       L_show_pwr374
L_show_pwr373:
0x1524	0x002B      	MOVLB      11
0x1525	0x3030      	MOVLW      48
0x1526	0x00A0      	MOVWF      _work_str_2
L_show_pwr374:
;main.c,575 :: 		work_str_2[1] = '.';
0x1527	0x302E      	MOVLW      46
0x1528	0x00A1      	MOVWF      _work_str_2+1
;main.c,576 :: 		if(work_str[5] != ' ') work_str_2[2] = work_str[5]; else work_str_2[2] = '0';
0x1529	0x002A      	MOVLB      10
0x152A	0x0867      	MOVF       _work_str+5, 0
0x152B	0x3A20      	XORLW      32
0x152C	0x1903      	BTFSC      STATUS, 2
0x152D	0x2D32      	GOTO       L_show_pwr375
0x152E	0x0867      	MOVF       _work_str+5, 0
0x152F	0x002B      	MOVLB      11
0x1530	0x00A2      	MOVWF      _work_str_2+2
0x1531	0x2D35      	GOTO       L_show_pwr376
L_show_pwr375:
0x1532	0x002B      	MOVLB      11
0x1533	0x3030      	MOVLW      48
0x1534	0x00A2      	MOVWF      _work_str_2+2
L_show_pwr376:
;main.c,577 :: 		work_str_2[3] = 'W';
0x1535	0x3057      	MOVLW      87
0x1536	0x00A3      	MOVWF      _work_str_2+3
;main.c,578 :: 		}
L_show_pwr372:
;main.c,579 :: 		}
0x1537	0x2D80      	GOTO       L_show_pwr377
L_show_pwr370:
0x1538	0x002B      	MOVLB      11
;main.c,581 :: 		if(p_ant<999){   // 0 - 1500 Watts
0x1539	0x3080      	MOVLW      128
0x153A	0x0654      	XORWF      show_pwr_p_ant_L0+1, 0
0x153B	0x00F0      	MOVWF      R0
0x153C	0x3080      	MOVLW      128
0x153D	0x3A03      	XORLW      3
0x153E	0x0270      	SUBWF      R0, 0
0x153F	0x1D03      	BTFSS      STATUS, 2
0x1540	0x2D43      	GOTO       L__show_pwr715
0x1541	0x30E7      	MOVLW      231
0x1542	0x0253      	SUBWF      show_pwr_p_ant_L0, 0
L__show_pwr715:
0x1543	0x1803      	BTFSC      STATUS, 0
0x1544	0x2D62      	GOTO       L_show_pwr378
;main.c,582 :: 		IntToStr(p_ant, work_str);
0x1545	0x0853      	MOVF       show_pwr_p_ant_L0, 0
0x1546	0x002C      	MOVLB      12
0x1547	0x00A4      	MOVWF      FARG_IntToStr_input
0x1548	0x002B      	MOVLB      11
0x1549	0x0854      	MOVF       show_pwr_p_ant_L0+1, 0
0x154A	0x002C      	MOVLB      12
0x154B	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x154C	0x3062      	MOVLW      _work_str
0x154D	0x00A6      	MOVWF      FARG_IntToStr_output
0x154E	0x3005      	MOVLW      hi_addr(_work_str)
0x154F	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x1550	0x3180      	MOVLP      0
0x1551	0x2587      	CALL       _IntToStr
0x1552	0x3190      	MOVLP      16
;main.c,583 :: 		work_str_2[0] = work_str[3];
0x1553	0x002A      	MOVLB      10
0x1554	0x0865      	MOVF       _work_str+3, 0
0x1555	0x002B      	MOVLB      11
0x1556	0x00A0      	MOVWF      _work_str_2
;main.c,584 :: 		work_str_2[1] = work_str[4];
0x1557	0x002A      	MOVLB      10
0x1558	0x0866      	MOVF       _work_str+4, 0
0x1559	0x002B      	MOVLB      11
0x155A	0x00A1      	MOVWF      _work_str_2+1
;main.c,585 :: 		work_str_2[2] = work_str[5];
0x155B	0x002A      	MOVLB      10
0x155C	0x0867      	MOVF       _work_str+5, 0
0x155D	0x002B      	MOVLB      11
0x155E	0x00A2      	MOVWF      _work_str_2+2
;main.c,586 :: 		work_str_2[3] = 'W';
0x155F	0x3057      	MOVLW      87
0x1560	0x00A3      	MOVWF      _work_str_2+3
;main.c,587 :: 		}
0x1561	0x2D80      	GOTO       L_show_pwr379
L_show_pwr378:
;main.c,589 :: 		IntToStr(p_ant, work_str);
0x1562	0x0853      	MOVF       show_pwr_p_ant_L0, 0
0x1563	0x002C      	MOVLB      12
0x1564	0x00A4      	MOVWF      FARG_IntToStr_input
0x1565	0x002B      	MOVLB      11
0x1566	0x0854      	MOVF       show_pwr_p_ant_L0+1, 0
0x1567	0x002C      	MOVLB      12
0x1568	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x1569	0x3062      	MOVLW      _work_str
0x156A	0x00A6      	MOVWF      FARG_IntToStr_output
0x156B	0x3005      	MOVLW      hi_addr(_work_str)
0x156C	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x156D	0x3180      	MOVLP      0
0x156E	0x2587      	CALL       _IntToStr
0x156F	0x3190      	MOVLP      16
;main.c,590 :: 		work_str_2[0] = work_str[2];
0x1570	0x002A      	MOVLB      10
0x1571	0x0864      	MOVF       _work_str+2, 0
0x1572	0x002B      	MOVLB      11
0x1573	0x00A0      	MOVWF      _work_str_2
;main.c,591 :: 		work_str_2[1] = work_str[3];
0x1574	0x002A      	MOVLB      10
0x1575	0x0865      	MOVF       _work_str+3, 0
0x1576	0x002B      	MOVLB      11
0x1577	0x00A1      	MOVWF      _work_str_2+1
;main.c,592 :: 		work_str_2[2] = work_str[4];
0x1578	0x002A      	MOVLB      10
0x1579	0x0866      	MOVF       _work_str+4, 0
0x157A	0x002B      	MOVLB      11
0x157B	0x00A2      	MOVWF      _work_str_2+2
;main.c,593 :: 		work_str_2[3] = work_str[5];
0x157C	0x002A      	MOVLB      10
0x157D	0x0867      	MOVF       _work_str+5, 0
0x157E	0x002B      	MOVLB      11
0x157F	0x00A3      	MOVWF      _work_str_2+3
;main.c,594 :: 		}
L_show_pwr379:
;main.c,595 :: 		}
L_show_pwr377:
;main.c,596 :: 		if(type==4 | type==5) led_wr_str (4, 16+4*12, work_str_2, 4);  // 128*64 OLED
0x1580	0x002A      	MOVLB      10
0x1581	0x086D      	MOVF       _type, 0
0x1582	0x3A04      	XORLW      4
0x1583	0x3001      	MOVLW      1
0x1584	0x1D03      	BTFSS      STATUS, 2
0x1585	0x3000      	MOVLW      0
0x1586	0x00F1      	MOVWF      R1
0x1587	0x086D      	MOVF       _type, 0
0x1588	0x3A05      	XORLW      5
0x1589	0x3001      	MOVLW      1
0x158A	0x1D03      	BTFSS      STATUS, 2
0x158B	0x3000      	MOVLW      0
0x158C	0x00F0      	MOVWF      R0
0x158D	0x0871      	MOVF       R1, 0
0x158E	0x04F0      	IORWF       R0, 1
0x158F	0x1903      	BTFSC      STATUS, 2
0x1590	0x2DA0      	GOTO       L_show_pwr380
0x1591	0x3004      	MOVLW      4
0x1592	0x002C      	MOVLB      12
0x1593	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1594	0x3040      	MOVLW      64
0x1595	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1596	0x30A0      	MOVLW      _work_str_2
0x1597	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1598	0x3005      	MOVLW      hi_addr(_work_str_2)
0x1599	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x159A	0x3004      	MOVLW      4
0x159B	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x159C	0x3180      	MOVLP      0
0x159D	0x24B4      	CALL       _led_wr_str
0x159E	0x3190      	MOVLP      16
0x159F	0x2DD1      	GOTO       L_show_pwr381
L_show_pwr380:
;main.c,597 :: 		else if(type==2 | type==3) led_wr_str (0, 13, work_str_2, 4);  // 128*32
0x15A0	0x002A      	MOVLB      10
0x15A1	0x086D      	MOVF       _type, 0
0x15A2	0x3A02      	XORLW      2
0x15A3	0x3001      	MOVLW      1
0x15A4	0x1D03      	BTFSS      STATUS, 2
0x15A5	0x3000      	MOVLW      0
0x15A6	0x00F1      	MOVWF      R1
0x15A7	0x086D      	MOVF       _type, 0
0x15A8	0x3A03      	XORLW      3
0x15A9	0x3001      	MOVLW      1
0x15AA	0x1D03      	BTFSS      STATUS, 2
0x15AB	0x3000      	MOVLW      0
0x15AC	0x00F0      	MOVWF      R0
0x15AD	0x0871      	MOVF       R1, 0
0x15AE	0x04F0      	IORWF       R0, 1
0x15AF	0x1903      	BTFSC      STATUS, 2
0x15B0	0x2DBF      	GOTO       L_show_pwr382
0x15B1	0x002C      	MOVLB      12
0x15B2	0x01A4      	CLRF       FARG_led_wr_str_col
0x15B3	0x300D      	MOVLW      13
0x15B4	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x15B5	0x30A0      	MOVLW      _work_str_2
0x15B6	0x00A6      	MOVWF      FARG_led_wr_str_str
0x15B7	0x3005      	MOVLW      hi_addr(_work_str_2)
0x15B8	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x15B9	0x3004      	MOVLW      4
0x15BA	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x15BB	0x3180      	MOVLP      0
0x15BC	0x24B4      	CALL       _led_wr_str
0x15BD	0x3190      	MOVLP      16
0x15BE	0x2DD1      	GOTO       L_show_pwr383
L_show_pwr382:
;main.c,598 :: 		else if(type==1) led_wr_str (0, 12, work_str_2, 4);  // 1602
0x15BF	0x002A      	MOVLB      10
0x15C0	0x086D      	MOVF       _type, 0
0x15C1	0x3A01      	XORLW      1
0x15C2	0x1D03      	BTFSS      STATUS, 2
0x15C3	0x2DD1      	GOTO       L_show_pwr384
0x15C4	0x002C      	MOVLB      12
0x15C5	0x01A4      	CLRF       FARG_led_wr_str_col
0x15C6	0x300C      	MOVLW      12
0x15C7	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x15C8	0x30A0      	MOVLW      _work_str_2
0x15C9	0x00A6      	MOVWF      FARG_led_wr_str_str
0x15CA	0x3005      	MOVLW      hi_addr(_work_str_2)
0x15CB	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x15CC	0x3004      	MOVLW      4
0x15CD	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x15CE	0x3180      	MOVLP      0
0x15CF	0x24B4      	CALL       _led_wr_str
0x15D0	0x3190      	MOVLP      16
L_show_pwr384:
L_show_pwr383:
L_show_pwr381:
;main.c,600 :: 		IntToStr(eff, work_str);
0x15D1	0x002B      	MOVLB      11
0x15D2	0x0855      	MOVF       show_pwr_eff_L0, 0
0x15D3	0x002C      	MOVLB      12
0x15D4	0x00A4      	MOVWF      FARG_IntToStr_input
0x15D5	0x002B      	MOVLB      11
0x15D6	0x0856      	MOVF       show_pwr_eff_L0+1, 0
0x15D7	0x002C      	MOVLB      12
0x15D8	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x15D9	0x3062      	MOVLW      _work_str
0x15DA	0x00A6      	MOVWF      FARG_IntToStr_output
0x15DB	0x3005      	MOVLW      hi_addr(_work_str)
0x15DC	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x15DD	0x3180      	MOVLP      0
0x15DE	0x2587      	CALL       _IntToStr
0x15DF	0x3190      	MOVLP      16
;main.c,601 :: 		work_str_2[0] = work_str[4];
0x15E0	0x002A      	MOVLB      10
0x15E1	0x0866      	MOVF       _work_str+4, 0
0x15E2	0x002B      	MOVLB      11
0x15E3	0x00A0      	MOVWF      _work_str_2
;main.c,602 :: 		work_str_2[1] = work_str[5];
0x15E4	0x002A      	MOVLB      10
0x15E5	0x0867      	MOVF       _work_str+5, 0
0x15E6	0x002B      	MOVLB      11
0x15E7	0x00A1      	MOVWF      _work_str_2+1
;main.c,603 :: 		if(type==4 | type==5) led_wr_str(6, 16+5*12, work_str_2, 2);
0x15E8	0x002A      	MOVLB      10
0x15E9	0x086D      	MOVF       _type, 0
0x15EA	0x3A04      	XORLW      4
0x15EB	0x3001      	MOVLW      1
0x15EC	0x1D03      	BTFSS      STATUS, 2
0x15ED	0x3000      	MOVLW      0
0x15EE	0x00F1      	MOVWF      R1
0x15EF	0x086D      	MOVF       _type, 0
0x15F0	0x3A05      	XORLW      5
0x15F1	0x3001      	MOVLW      1
0x15F2	0x1D03      	BTFSS      STATUS, 2
0x15F3	0x3000      	MOVLW      0
0x15F4	0x00F0      	MOVWF      R0
0x15F5	0x0871      	MOVF       R1, 0
0x15F6	0x04F0      	IORWF       R0, 1
0x15F7	0x1903      	BTFSC      STATUS, 2
0x15F8	0x2E08      	GOTO       L_show_pwr385
0x15F9	0x3006      	MOVLW      6
0x15FA	0x002C      	MOVLB      12
0x15FB	0x00A4      	MOVWF      FARG_led_wr_str_col
0x15FC	0x304C      	MOVLW      76
0x15FD	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x15FE	0x30A0      	MOVLW      _work_str_2
0x15FF	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1600	0x3005      	MOVLW      hi_addr(_work_str_2)
0x1601	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1602	0x3002      	MOVLW      2
0x1603	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1604	0x3180      	MOVLP      0
0x1605	0x24B4      	CALL       _led_wr_str
0x1606	0x3190      	MOVLP      16
0x1607	0x2E3B      	GOTO       L_show_pwr386
L_show_pwr385:
;main.c,604 :: 		else if(type==2 | type==3) led_wr_str(1, 14, work_str_2, 2);
0x1608	0x002A      	MOVLB      10
0x1609	0x086D      	MOVF       _type, 0
0x160A	0x3A02      	XORLW      2
0x160B	0x3001      	MOVLW      1
0x160C	0x1D03      	BTFSS      STATUS, 2
0x160D	0x3000      	MOVLW      0
0x160E	0x00F1      	MOVWF      R1
0x160F	0x086D      	MOVF       _type, 0
0x1610	0x3A03      	XORLW      3
0x1611	0x3001      	MOVLW      1
0x1612	0x1D03      	BTFSS      STATUS, 2
0x1613	0x3000      	MOVLW      0
0x1614	0x00F0      	MOVWF      R0
0x1615	0x0871      	MOVF       R1, 0
0x1616	0x04F0      	IORWF       R0, 1
0x1617	0x1903      	BTFSC      STATUS, 2
0x1618	0x2E28      	GOTO       L_show_pwr387
0x1619	0x3001      	MOVLW      1
0x161A	0x002C      	MOVLB      12
0x161B	0x00A4      	MOVWF      FARG_led_wr_str_col
0x161C	0x300E      	MOVLW      14
0x161D	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x161E	0x30A0      	MOVLW      _work_str_2
0x161F	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1620	0x3005      	MOVLW      hi_addr(_work_str_2)
0x1621	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1622	0x3002      	MOVLW      2
0x1623	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1624	0x3180      	MOVLP      0
0x1625	0x24B4      	CALL       _led_wr_str
0x1626	0x3190      	MOVLP      16
0x1627	0x2E3B      	GOTO       L_show_pwr388
L_show_pwr387:
;main.c,605 :: 		else if(type==1) led_wr_str(1, 13, work_str_2, 2);
0x1628	0x002A      	MOVLB      10
0x1629	0x086D      	MOVF       _type, 0
0x162A	0x3A01      	XORLW      1
0x162B	0x1D03      	BTFSS      STATUS, 2
0x162C	0x2E3B      	GOTO       L_show_pwr389
0x162D	0x3001      	MOVLW      1
0x162E	0x002C      	MOVLB      12
0x162F	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1630	0x300D      	MOVLW      13
0x1631	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1632	0x30A0      	MOVLW      _work_str_2
0x1633	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1634	0x3005      	MOVLW      hi_addr(_work_str_2)
0x1635	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1636	0x3002      	MOVLW      2
0x1637	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1638	0x3180      	MOVLP      0
0x1639	0x24B4      	CALL       _led_wr_str
0x163A	0x3190      	MOVLP      16
L_show_pwr389:
L_show_pwr388:
L_show_pwr386:
;main.c,606 :: 		}
L_show_pwr365:
;main.c,607 :: 		}
L_show_pwr351:
;main.c,608 :: 		asm CLRWDT;
0x163B	0x0064      	CLRWDT
;main.c,609 :: 		return;
;main.c,610 :: 		}
L_end_show_pwr:
0x163C	0x0008      	RETURN
; end of _show_pwr
_get_pwr:
;main.h,99 :: 		void get_pwr() {
;main.h,102 :: 		asm CLRWDT;
0x163D	0x0064      	CLRWDT
;main.h,104 :: 		Forward = get_forward();
0x163E	0x3188      	MOVLP      8
0x163F	0x2506      	CALL       _get_forward
0x1640	0x3190      	MOVLP      16
0x1641	0x0870      	MOVF       R0, 0
0x1642	0x00CF      	MOVWF      get_pwr_Forward_L0
0x1643	0x0871      	MOVF       R1, 0
0x1644	0x00D0      	MOVWF      get_pwr_Forward_L0+1
0x1645	0x3000      	MOVLW      0
0x1646	0x1BD0      	BTFSC      get_pwr_Forward_L0+1, 7
0x1647	0x30FF      	MOVLW      255
0x1648	0x00D1      	MOVWF      get_pwr_Forward_L0+2
0x1649	0x00D2      	MOVWF      get_pwr_Forward_L0+3
;main.h,105 :: 		Reverse = get_reverse();
0x164A	0x3188      	MOVLP      8
0x164B	0x229E      	CALL       _get_reverse
0x164C	0x3190      	MOVLP      16
0x164D	0x0870      	MOVF       R0, 0
0x164E	0x00D3      	MOVWF      get_pwr_Reverse_L0
0x164F	0x0871      	MOVF       R1, 0
0x1650	0x00D4      	MOVWF      get_pwr_Reverse_L0+1
0x1651	0x3000      	MOVLW      0
0x1652	0x1BD4      	BTFSC      get_pwr_Reverse_L0+1, 7
0x1653	0x30FF      	MOVLW      255
0x1654	0x00D5      	MOVWF      get_pwr_Reverse_L0+2
0x1655	0x00D6      	MOVWF      get_pwr_Reverse_L0+3
;main.h,106 :: 		if(D_correction==1) p = correction(Forward * 3);
0x1656	0x0028      	MOVLB      8
0x1657	0x0834      	MOVF       main_D_correction, 0
0x1658	0x3A01      	XORLW      1
0x1659	0x1D03      	BTFSS      STATUS, 2
0x165A	0x2E7C      	GOTO       L_get_pwr43
0x165B	0x002B      	MOVLB      11
0x165C	0x084F      	MOVF       get_pwr_Forward_L0, 0
0x165D	0x00F0      	MOVWF      R0
0x165E	0x0850      	MOVF       get_pwr_Forward_L0+1, 0
0x165F	0x00F1      	MOVWF      R1
0x1660	0x3003      	MOVLW      3
0x1661	0x00F4      	MOVWF      R4
0x1662	0x3000      	MOVLW      0
0x1663	0x00F5      	MOVWF      R5
0x1664	0x3180      	MOVLP      0
0x1665	0x27CD      	CALL       _Mul_16x16_U
0x1666	0x3190      	MOVLP      16
0x1667	0x0870      	MOVF       R0, 0
0x1668	0x002B      	MOVLB      11
0x1669	0x00EB      	MOVWF      FARG_correction_input
0x166A	0x0871      	MOVF       R1, 0
0x166B	0x00EC      	MOVWF      FARG_correction_input+1
0x166C	0x3188      	MOVLP      8
0x166D	0x25FE      	CALL       _correction
0x166E	0x3190      	MOVLP      16
0x166F	0x3188      	MOVLP      8
0x1670	0x26E1      	CALL       _Int2Double
0x1671	0x3190      	MOVLP      16
0x1672	0x0870      	MOVF       R0, 0
0x1673	0x002B      	MOVLB      11
0x1674	0x00D7      	MOVWF      get_pwr_p_L0
0x1675	0x0871      	MOVF       R1, 0
0x1676	0x00D8      	MOVWF      get_pwr_p_L0+1
0x1677	0x0872      	MOVF       R2, 0
0x1678	0x00D9      	MOVWF      get_pwr_p_L0+2
0x1679	0x0873      	MOVF       R3, 0
0x167A	0x00DA      	MOVWF      get_pwr_p_L0+3
0x167B	0x2E99      	GOTO       L_get_pwr44
L_get_pwr43:
0x167C	0x002B      	MOVLB      11
;main.h,107 :: 		else p = Forward * 3;
0x167D	0x084F      	MOVF       get_pwr_Forward_L0, 0
0x167E	0x00F0      	MOVWF      R0
0x167F	0x0850      	MOVF       get_pwr_Forward_L0+1, 0
0x1680	0x00F1      	MOVWF      R1
0x1681	0x0851      	MOVF       get_pwr_Forward_L0+2, 0
0x1682	0x00F2      	MOVWF      R2
0x1683	0x0852      	MOVF       get_pwr_Forward_L0+3, 0
0x1684	0x00F3      	MOVWF      R3
0x1685	0x3003      	MOVLW      3
0x1686	0x00F4      	MOVWF      R4
0x1687	0x01F5      	CLRF       R5
0x1688	0x01F6      	CLRF       R6
0x1689	0x01F7      	CLRF       R7
0x168A	0x3180      	MOVLP      0
0x168B	0x233D      	CALL       _Mul_32x32_U
0x168C	0x3190      	MOVLP      16
0x168D	0x3188      	MOVLP      8
0x168E	0x2575      	CALL       _Longint2Double
0x168F	0x3190      	MOVLP      16
0x1690	0x0870      	MOVF       R0, 0
0x1691	0x002B      	MOVLB      11
0x1692	0x00D7      	MOVWF      get_pwr_p_L0
0x1693	0x0871      	MOVF       R1, 0
0x1694	0x00D8      	MOVWF      get_pwr_p_L0+1
0x1695	0x0872      	MOVF       R2, 0
0x1696	0x00D9      	MOVWF      get_pwr_p_L0+2
0x1697	0x0873      	MOVF       R3, 0
0x1698	0x00DA      	MOVWF      get_pwr_p_L0+3
L_get_pwr44:
;main.h,109 :: 		if(Reverse >= Forward)
0x1699	0x3080      	MOVLW      128
0x169A	0x0656      	XORWF      get_pwr_Reverse_L0+3, 0
0x169B	0x00F0      	MOVWF      R0
0x169C	0x3080      	MOVLW      128
0x169D	0x0652      	XORWF      get_pwr_Forward_L0+3, 0
0x169E	0x0270      	SUBWF      R0, 0
0x169F	0x1D03      	BTFSS      STATUS, 2
0x16A0	0x2EAB      	GOTO       L__get_pwr568
0x16A1	0x0851      	MOVF       get_pwr_Forward_L0+2, 0
0x16A2	0x0255      	SUBWF      get_pwr_Reverse_L0+2, 0
0x16A3	0x1D03      	BTFSS      STATUS, 2
0x16A4	0x2EAB      	GOTO       L__get_pwr568
0x16A5	0x0850      	MOVF       get_pwr_Forward_L0+1, 0
0x16A6	0x0254      	SUBWF      get_pwr_Reverse_L0+1, 0
0x16A7	0x1D03      	BTFSS      STATUS, 2
0x16A8	0x2EAB      	GOTO       L__get_pwr568
0x16A9	0x084F      	MOVF       get_pwr_Forward_L0, 0
0x16AA	0x0253      	SUBWF      get_pwr_Reverse_L0, 0
L__get_pwr568:
0x16AB	0x1C03      	BTFSS      STATUS, 0
0x16AC	0x2EB4      	GOTO       L_get_pwr45
;main.h,110 :: 		Forward = 999;
0x16AD	0x30E7      	MOVLW      231
0x16AE	0x00CF      	MOVWF      get_pwr_Forward_L0
0x16AF	0x3003      	MOVLW      3
0x16B0	0x00D0      	MOVWF      get_pwr_Forward_L0+1
0x16B1	0x01D1      	CLRF       get_pwr_Forward_L0+2
0x16B2	0x01D2      	CLRF       get_pwr_Forward_L0+3
0x16B3	0x2EFE      	GOTO       L_get_pwr46
L_get_pwr45:
;main.h,112 :: 		Forward = ((Forward + Reverse) * 100) / (Forward - Reverse);
0x16B4	0x0853      	MOVF       get_pwr_Reverse_L0, 0
0x16B5	0x074F      	ADDWF      get_pwr_Forward_L0, 0
0x16B6	0x00F0      	MOVWF      R0
0x16B7	0x0854      	MOVF       get_pwr_Reverse_L0+1, 0
0x16B8	0x3D50      	ADDWFC     get_pwr_Forward_L0+1, 0
0x16B9	0x00F1      	MOVWF      R1
0x16BA	0x0855      	MOVF       get_pwr_Reverse_L0+2, 0
0x16BB	0x3D51      	ADDWFC     get_pwr_Forward_L0+2, 0
0x16BC	0x00F2      	MOVWF      R2
0x16BD	0x0856      	MOVF       get_pwr_Reverse_L0+3, 0
0x16BE	0x3D52      	ADDWFC     get_pwr_Forward_L0+3, 0
0x16BF	0x00F3      	MOVWF      R3
0x16C0	0x3064      	MOVLW      100
0x16C1	0x00F4      	MOVWF      R4
0x16C2	0x01F5      	CLRF       R5
0x16C3	0x01F6      	CLRF       R6
0x16C4	0x01F7      	CLRF       R7
0x16C5	0x3180      	MOVLP      0
0x16C6	0x233D      	CALL       _Mul_32x32_U
0x16C7	0x3190      	MOVLP      16
0x16C8	0x002B      	MOVLB      11
0x16C9	0x084F      	MOVF       get_pwr_Forward_L0, 0
0x16CA	0x00F4      	MOVWF      R4
0x16CB	0x0850      	MOVF       get_pwr_Forward_L0+1, 0
0x16CC	0x00F5      	MOVWF      R5
0x16CD	0x0851      	MOVF       get_pwr_Forward_L0+2, 0
0x16CE	0x00F6      	MOVWF      R6
0x16CF	0x0852      	MOVF       get_pwr_Forward_L0+3, 0
0x16D0	0x00F7      	MOVWF      R7
0x16D1	0x0853      	MOVF       get_pwr_Reverse_L0, 0
0x16D2	0x02F4      	SUBWF      R4, 1
0x16D3	0x0854      	MOVF       get_pwr_Reverse_L0+1, 0
0x16D4	0x3BF5      	SUBWFB     R5, 1
0x16D5	0x0855      	MOVF       get_pwr_Reverse_L0+2, 0
0x16D6	0x3BF6      	SUBWFB     R6, 1
0x16D7	0x0856      	MOVF       get_pwr_Reverse_L0+3, 0
0x16D8	0x3BF7      	SUBWFB     R7, 1
0x16D9	0x3188      	MOVLP      8
0x16DA	0x240A      	CALL       _Div_32x32_S
0x16DB	0x3190      	MOVLP      16
0x16DC	0x0870      	MOVF       R0, 0
0x16DD	0x002B      	MOVLB      11
0x16DE	0x00CF      	MOVWF      get_pwr_Forward_L0
0x16DF	0x0871      	MOVF       R1, 0
0x16E0	0x00D0      	MOVWF      get_pwr_Forward_L0+1
0x16E1	0x0872      	MOVF       R2, 0
0x16E2	0x00D1      	MOVWF      get_pwr_Forward_L0+2
0x16E3	0x0873      	MOVF       R3, 0
0x16E4	0x00D2      	MOVWF      get_pwr_Forward_L0+3
;main.h,113 :: 		if(Forward>999) Forward = 999;
0x16E5	0x3080      	MOVLW      128
0x16E6	0x00F4      	MOVWF      R4
0x16E7	0x3080      	MOVLW      128
0x16E8	0x0673      	XORWF      R3, 0
0x16E9	0x0274      	SUBWF      R4, 0
0x16EA	0x1D03      	BTFSS      STATUS, 2
0x16EB	0x2EF6      	GOTO       L__get_pwr569
0x16EC	0x0872      	MOVF       R2, 0
0x16ED	0x3C00      	SUBLW      0
0x16EE	0x1D03      	BTFSS      STATUS, 2
0x16EF	0x2EF6      	GOTO       L__get_pwr569
0x16F0	0x0871      	MOVF       R1, 0
0x16F1	0x3C03      	SUBLW      3
0x16F2	0x1D03      	BTFSS      STATUS, 2
0x16F3	0x2EF6      	GOTO       L__get_pwr569
0x16F4	0x0870      	MOVF       R0, 0
0x16F5	0x3CE7      	SUBLW      231
L__get_pwr569:
0x16F6	0x1803      	BTFSC      STATUS, 0
0x16F7	0x2EFE      	GOTO       L_get_pwr47
0x16F8	0x30E7      	MOVLW      231
0x16F9	0x00CF      	MOVWF      get_pwr_Forward_L0
0x16FA	0x3003      	MOVLW      3
0x16FB	0x00D0      	MOVWF      get_pwr_Forward_L0+1
0x16FC	0x01D1      	CLRF       get_pwr_Forward_L0+2
0x16FD	0x01D2      	CLRF       get_pwr_Forward_L0+3
L_get_pwr47:
;main.h,114 :: 		}
L_get_pwr46:
;main.h,116 :: 		p = p * K_Mult / 1000.0;   // mV to Volts on Input
0x16FE	0x0028      	MOVLB      8
0x16FF	0x0833      	MOVF       main_K_Mult, 0
0x1700	0x00F0      	MOVWF      R0
0x1701	0x3180      	MOVLP      0
0x1702	0x27BE      	CALL       _Byte2Double
0x1703	0x3190      	MOVLP      16
0x1704	0x002B      	MOVLB      11
0x1705	0x0857      	MOVF       get_pwr_p_L0, 0
0x1706	0x00F4      	MOVWF      R4
0x1707	0x0858      	MOVF       get_pwr_p_L0+1, 0
0x1708	0x00F5      	MOVWF      R5
0x1709	0x0859      	MOVF       get_pwr_p_L0+2, 0
0x170A	0x00F6      	MOVWF      R6
0x170B	0x085A      	MOVF       get_pwr_p_L0+3, 0
0x170C	0x00F7      	MOVWF      R7
0x170D	0x3188      	MOVLP      8
0x170E	0x2598      	CALL       _Mul_32x32_FP
0x170F	0x3190      	MOVLP      16
0x1710	0x3000      	MOVLW      0
0x1711	0x00F4      	MOVWF      R4
0x1712	0x3000      	MOVLW      0
0x1713	0x00F5      	MOVWF      R5
0x1714	0x307A      	MOVLW      122
0x1715	0x00F6      	MOVWF      R6
0x1716	0x3088      	MOVLW      136
0x1717	0x00F7      	MOVWF      R7
0x1718	0x3188      	MOVLP      8
0x1719	0x22FF      	CALL       _Div_32x32_FP
0x171A	0x3190      	MOVLP      16
0x171B	0x0870      	MOVF       R0, 0
0x171C	0x002B      	MOVLB      11
0x171D	0x00D7      	MOVWF      get_pwr_p_L0
0x171E	0x0871      	MOVF       R1, 0
0x171F	0x00D8      	MOVWF      get_pwr_p_L0+1
0x1720	0x0872      	MOVF       R2, 0
0x1721	0x00D9      	MOVWF      get_pwr_p_L0+2
0x1722	0x0873      	MOVF       R3, 0
0x1723	0x00DA      	MOVWF      get_pwr_p_L0+3
;main.h,117 :: 		p = p / 1.414;
0x1724	0x30F4      	MOVLW      244
0x1725	0x00F4      	MOVWF      R4
0x1726	0x30FD      	MOVLW      253
0x1727	0x00F5      	MOVWF      R5
0x1728	0x3034      	MOVLW      52
0x1729	0x00F6      	MOVWF      R6
0x172A	0x307F      	MOVLW      127
0x172B	0x00F7      	MOVWF      R7
0x172C	0x3188      	MOVLP      8
0x172D	0x22FF      	CALL       _Div_32x32_FP
0x172E	0x3190      	MOVLP      16
0x172F	0x0870      	MOVF       R0, 0
0x1730	0x002B      	MOVLB      11
0x1731	0x00D7      	MOVWF      get_pwr_p_L0
0x1732	0x0871      	MOVF       R1, 0
0x1733	0x00D8      	MOVWF      get_pwr_p_L0+1
0x1734	0x0872      	MOVF       R2, 0
0x1735	0x00D9      	MOVWF      get_pwr_p_L0+2
0x1736	0x0873      	MOVF       R3, 0
0x1737	0x00DA      	MOVWF      get_pwr_p_L0+3
;main.h,118 :: 		if(P_High==1) p = p * p / 50;     // 0 - 1500 ( 1500 Watts)
0x1738	0x0028      	MOVLB      8
0x1739	0x0832      	MOVF       main_P_High, 0
0x173A	0x3A01      	XORLW      1
0x173B	0x1D03      	BTFSS      STATUS, 2
0x173C	0x2F66      	GOTO       L_get_pwr48
0x173D	0x002B      	MOVLB      11
0x173E	0x0857      	MOVF       get_pwr_p_L0, 0
0x173F	0x00F0      	MOVWF      R0
0x1740	0x0858      	MOVF       get_pwr_p_L0+1, 0
0x1741	0x00F1      	MOVWF      R1
0x1742	0x0859      	MOVF       get_pwr_p_L0+2, 0
0x1743	0x00F2      	MOVWF      R2
0x1744	0x085A      	MOVF       get_pwr_p_L0+3, 0
0x1745	0x00F3      	MOVWF      R3
0x1746	0x0857      	MOVF       get_pwr_p_L0, 0
0x1747	0x00F4      	MOVWF      R4
0x1748	0x0858      	MOVF       get_pwr_p_L0+1, 0
0x1749	0x00F5      	MOVWF      R5
0x174A	0x0859      	MOVF       get_pwr_p_L0+2, 0
0x174B	0x00F6      	MOVWF      R6
0x174C	0x085A      	MOVF       get_pwr_p_L0+3, 0
0x174D	0x00F7      	MOVWF      R7
0x174E	0x3188      	MOVLP      8
0x174F	0x2598      	CALL       _Mul_32x32_FP
0x1750	0x3190      	MOVLP      16
0x1751	0x3000      	MOVLW      0
0x1752	0x00F4      	MOVWF      R4
0x1753	0x3000      	MOVLW      0
0x1754	0x00F5      	MOVWF      R5
0x1755	0x3048      	MOVLW      72
0x1756	0x00F6      	MOVWF      R6
0x1757	0x3084      	MOVLW      132
0x1758	0x00F7      	MOVWF      R7
0x1759	0x3188      	MOVLP      8
0x175A	0x22FF      	CALL       _Div_32x32_FP
0x175B	0x3190      	MOVLP      16
0x175C	0x0870      	MOVF       R0, 0
0x175D	0x002B      	MOVLB      11
0x175E	0x00D7      	MOVWF      get_pwr_p_L0
0x175F	0x0871      	MOVF       R1, 0
0x1760	0x00D8      	MOVWF      get_pwr_p_L0+1
0x1761	0x0872      	MOVF       R2, 0
0x1762	0x00D9      	MOVWF      get_pwr_p_L0+2
0x1763	0x0873      	MOVF       R3, 0
0x1764	0x00DA      	MOVWF      get_pwr_p_L0+3
0x1765	0x2F8E      	GOTO       L_get_pwr49
L_get_pwr48:
0x1766	0x002B      	MOVLB      11
;main.h,119 :: 		else p = p * p / 5;               // 0 - 1510 (151.0 Watts)
0x1767	0x0857      	MOVF       get_pwr_p_L0, 0
0x1768	0x00F0      	MOVWF      R0
0x1769	0x0858      	MOVF       get_pwr_p_L0+1, 0
0x176A	0x00F1      	MOVWF      R1
0x176B	0x0859      	MOVF       get_pwr_p_L0+2, 0
0x176C	0x00F2      	MOVWF      R2
0x176D	0x085A      	MOVF       get_pwr_p_L0+3, 0
0x176E	0x00F3      	MOVWF      R3
0x176F	0x0857      	MOVF       get_pwr_p_L0, 0
0x1770	0x00F4      	MOVWF      R4
0x1771	0x0858      	MOVF       get_pwr_p_L0+1, 0
0x1772	0x00F5      	MOVWF      R5
0x1773	0x0859      	MOVF       get_pwr_p_L0+2, 0
0x1774	0x00F6      	MOVWF      R6
0x1775	0x085A      	MOVF       get_pwr_p_L0+3, 0
0x1776	0x00F7      	MOVWF      R7
0x1777	0x3188      	MOVLP      8
0x1778	0x2598      	CALL       _Mul_32x32_FP
0x1779	0x3190      	MOVLP      16
0x177A	0x3000      	MOVLW      0
0x177B	0x00F4      	MOVWF      R4
0x177C	0x3000      	MOVLW      0
0x177D	0x00F5      	MOVWF      R5
0x177E	0x3020      	MOVLW      32
0x177F	0x00F6      	MOVWF      R6
0x1780	0x3081      	MOVLW      129
0x1781	0x00F7      	MOVWF      R7
0x1782	0x3188      	MOVLP      8
0x1783	0x22FF      	CALL       _Div_32x32_FP
0x1784	0x3190      	MOVLP      16
0x1785	0x0870      	MOVF       R0, 0
0x1786	0x002B      	MOVLB      11
0x1787	0x00D7      	MOVWF      get_pwr_p_L0
0x1788	0x0871      	MOVF       R1, 0
0x1789	0x00D8      	MOVWF      get_pwr_p_L0+1
0x178A	0x0872      	MOVF       R2, 0
0x178B	0x00D9      	MOVWF      get_pwr_p_L0+2
0x178C	0x0873      	MOVF       R3, 0
0x178D	0x00DA      	MOVWF      get_pwr_p_L0+3
L_get_pwr49:
;main.h,120 :: 		p = p + 0.5;    // rounding
0x178E	0x0857      	MOVF       get_pwr_p_L0, 0
0x178F	0x00F0      	MOVWF      R0
0x1790	0x0858      	MOVF       get_pwr_p_L0+1, 0
0x1791	0x00F1      	MOVWF      R1
0x1792	0x0859      	MOVF       get_pwr_p_L0+2, 0
0x1793	0x00F2      	MOVWF      R2
0x1794	0x085A      	MOVF       get_pwr_p_L0+3, 0
0x1795	0x00F3      	MOVWF      R3
0x1796	0x3000      	MOVLW      0
0x1797	0x00F4      	MOVWF      R4
0x1798	0x3000      	MOVLW      0
0x1799	0x00F5      	MOVWF      R5
0x179A	0x3000      	MOVLW      0
0x179B	0x00F6      	MOVWF      R6
0x179C	0x307E      	MOVLW      126
0x179D	0x00F7      	MOVWF      R7
0x179E	0x3180      	MOVLP      0
0x179F	0x26AD      	CALL       _Add_32x32_FP
0x17A0	0x3190      	MOVLP      16
0x17A1	0x0870      	MOVF       R0, 0
0x17A2	0x002B      	MOVLB      11
0x17A3	0x00D7      	MOVWF      get_pwr_p_L0
0x17A4	0x0871      	MOVF       R1, 0
0x17A5	0x00D8      	MOVWF      get_pwr_p_L0+1
0x17A6	0x0872      	MOVF       R2, 0
0x17A7	0x00D9      	MOVWF      get_pwr_p_L0+2
0x17A8	0x0873      	MOVF       R3, 0
0x17A9	0x00DA      	MOVWF      get_pwr_p_L0+3
;main.h,122 :: 		PWR = p;
0x17AA	0x3180      	MOVLP      0
0x17AB	0x2651      	CALL       _Double2Int
0x17AC	0x3190      	MOVLP      16
0x17AD	0x0870      	MOVF       R0, 0
0x17AE	0x002A      	MOVLB      10
0x17AF	0x00DE      	MOVWF      _PWR
0x17B0	0x0871      	MOVF       R1, 0
0x17B1	0x00DF      	MOVWF      _PWR+1
;main.h,123 :: 		if(PWR<10) SWR = 1;
0x17B2	0x3080      	MOVLW      128
0x17B3	0x0671      	XORWF      R1, 0
0x17B4	0x00F2      	MOVWF      R2
0x17B5	0x3080      	MOVLW      128
0x17B6	0x0272      	SUBWF      R2, 0
0x17B7	0x1D03      	BTFSS      STATUS, 2
0x17B8	0x2FBB      	GOTO       L__get_pwr570
0x17B9	0x300A      	MOVLW      10
0x17BA	0x0270      	SUBWF      R0, 0
L__get_pwr570:
0x17BB	0x1803      	BTFSC      STATUS, 0
0x17BC	0x2FC2      	GOTO       L_get_pwr50
0x17BD	0x3001      	MOVLW      1
0x17BE	0x00DC      	MOVWF      _SWR
0x17BF	0x3000      	MOVLW      0
0x17C0	0x00DD      	MOVWF      _SWR+1
0x17C1	0x2FE4      	GOTO       L_get_pwr51
L_get_pwr50:
;main.h,124 :: 		else if(Forward<100) SWR = 999;
0x17C2	0x3080      	MOVLW      128
0x17C3	0x002B      	MOVLB      11
0x17C4	0x0652      	XORWF      get_pwr_Forward_L0+3, 0
0x17C5	0x00F0      	MOVWF      R0
0x17C6	0x3080      	MOVLW      128
0x17C7	0x0270      	SUBWF      R0, 0
0x17C8	0x1D03      	BTFSS      STATUS, 2
0x17C9	0x2FD4      	GOTO       L__get_pwr571
0x17CA	0x3000      	MOVLW      0
0x17CB	0x0251      	SUBWF      get_pwr_Forward_L0+2, 0
0x17CC	0x1D03      	BTFSS      STATUS, 2
0x17CD	0x2FD4      	GOTO       L__get_pwr571
0x17CE	0x3000      	MOVLW      0
0x17CF	0x0250      	SUBWF      get_pwr_Forward_L0+1, 0
0x17D0	0x1D03      	BTFSS      STATUS, 2
0x17D1	0x2FD4      	GOTO       L__get_pwr571
0x17D2	0x3064      	MOVLW      100
0x17D3	0x024F      	SUBWF      get_pwr_Forward_L0, 0
L__get_pwr571:
0x17D4	0x1803      	BTFSC      STATUS, 0
0x17D5	0x2FDC      	GOTO       L_get_pwr52
0x17D6	0x30E7      	MOVLW      231
0x17D7	0x002A      	MOVLB      10
0x17D8	0x00DC      	MOVWF      _SWR
0x17D9	0x3003      	MOVLW      3
0x17DA	0x00DD      	MOVWF      _SWR+1
0x17DB	0x2FE4      	GOTO       L_get_pwr53
L_get_pwr52:
;main.h,125 :: 		else SWR = Forward;
0x17DC	0x002B      	MOVLB      11
0x17DD	0x084F      	MOVF       get_pwr_Forward_L0, 0
0x17DE	0x002A      	MOVLB      10
0x17DF	0x00DC      	MOVWF      _SWR
0x17E0	0x002B      	MOVLB      11
0x17E1	0x0850      	MOVF       get_pwr_Forward_L0+1, 0
0x17E2	0x002A      	MOVLB      10
0x17E3	0x00DD      	MOVWF      _SWR+1
L_get_pwr53:
L_get_pwr51:
;main.h,126 :: 		return;
;main.h,127 :: 		}
L_end_get_pwr:
0x17E4	0x0008      	RETURN
; end of _get_pwr
_Div_8x8_U:
;__Lib_Math.c,188 :: 		
;__Lib_Math.c,195 :: 		
0x17E5	0x0020      	MOVLB      0
;__Lib_Math.c,196 :: 		
0x17E6	0x01F8      	CLRF       R8
;__Lib_Math.c,197 :: 		
0x17E7	0x3008      	MOVLW      8
;__Lib_Math.c,198 :: 		
0x17E8	0x00FC      	MOVWF      R12
;__Lib_Math.c,199 :: 		
0x17E9	0x0D70      	RLF        R0, 0
;__Lib_Math.c,200 :: 		
0x17EA	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,201 :: 		
0x17EB	0x0874      	MOVF       R4, 0
;__Lib_Math.c,202 :: 		
0x17EC	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,203 :: 		
0x17ED	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,204 :: 		
0x17EE	0x2FF1      	GOTO       $+3
;__Lib_Math.c,205 :: 		
0x17EF	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,206 :: 		
0x17F0	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,207 :: 		
0x17F1	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,208 :: 		
0x17F2	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,209 :: 		
0x17F3	0x2FE9      	GOTO       $-10
;__Lib_Math.c,211 :: 		
L_end_Div_8x8_U:
0x17F4	0x0008      	RETURN
; end of _Div_8x8_U
_EEPROM_Read:
;__Lib_EEPROM.c,1 :: 		
;__Lib_EEPROM.c,2 :: 		
0x17F5	0x002B      	MOVLB      11
0x17F6	0x0829      	MOVF       FARG_EEPROM_Read_Address, 0
0x17F7	0x0023      	MOVLB      3
0x17F8	0x0091      	MOVWF      EEADR
0x17F9	0x0192      	CLRF       EEADR+1
;__Lib_EEPROM.c,3 :: 		
0x17FA	0x1395      	BCF        EEPGD_bit, BitPos(EEPGD_bit+0)
;__Lib_EEPROM.c,4 :: 		
0x17FB	0x1315      	BCF        CFGS_bit, BitPos(CFGS_bit+0)
;__Lib_EEPROM.c,5 :: 		
0x17FC	0x1415      	BSF        RD_bit, BitPos(RD_bit+0)
;__Lib_EEPROM.c,6 :: 		
0x17FD	0x0813      	MOVF       EEDAT, 0
0x17FE	0x00F0      	MOVWF      R0
;__Lib_EEPROM.c,7 :: 		
L_end_EEPROM_Read:
0x17FF	0x0008      	RETURN
; end of _EEPROM_Read
_EEPROM_Write:
;__Lib_EEPROM.c,9 :: 		
;__Lib_EEPROM.c,12 :: 		
0x1800	0x002B      	MOVLB      11
0x1801	0x0847      	MOVF       FARG_EEPROM_Write_Address, 0
0x1802	0x0023      	MOVLB      3
0x1803	0x0091      	MOVWF      EEADR
0x1804	0x0192      	CLRF       EEADR+1
;__Lib_EEPROM.c,13 :: 		
0x1805	0x002B      	MOVLB      11
0x1806	0x0848      	MOVF       FARG_EEPROM_Write_data_, 0
0x1807	0x0023      	MOVLB      3
0x1808	0x0093      	MOVWF      EEDATL
;__Lib_EEPROM.c,14 :: 		
0x1809	0x1315      	BCF        CFGS_bit, BitPos(CFGS_bit+0)
;__Lib_EEPROM.c,15 :: 		
0x180A	0x1395      	BCF        EEPGD_bit, BitPos(EEPGD_bit+0)
;__Lib_EEPROM.c,16 :: 		
0x180B	0x1515      	BSF        WREN_bit, BitPos(WREN_bit+0)
;__Lib_EEPROM.c,18 :: 		
0x180C	0x080B      	MOVF       INTCON, 0
0x180D	0x00F0      	MOVWF      R0
;__Lib_EEPROM.c,19 :: 		
0x180E	0x138B      	BCF        GIE_bit, BitPos(GIE_bit+0)
;__Lib_EEPROM.c,20 :: 		
0x180F	0x3055      	MOVLW      85
0x1810	0x0096      	MOVWF      EECON2
;__Lib_EEPROM.c,21 :: 		
0x1811	0x30AA      	MOVLW      170
0x1812	0x0096      	MOVWF      EECON2
;__Lib_EEPROM.c,22 :: 		
0x1813	0x1495      	BSF        WR_bit, BitPos(WR_bit+0)
;__Lib_EEPROM.c,23 :: 		
0x1814	0x1BF0      	BTFSC      R0, 7
0x1815	0x2818      	GOTO       L__EEPROM_Write4
0x1816	0x138B      	BCF        INTCON, 7
0x1817	0x2819      	GOTO       L__EEPROM_Write5
L__EEPROM_Write4:
0x1818	0x178B      	BSF        INTCON, 7
L__EEPROM_Write5:
;__Lib_EEPROM.c,24 :: 		
0x1819	0x1115      	BCF        WREN_bit, BitPos(WREN_bit+0)
;__Lib_EEPROM.c,25 :: 		
L_EEPROM_Write0:
0x181A	0x1C95      	BTFSS      WR_bit, BitPos(WR_bit+0)
0x181B	0x281D      	GOTO       L_EEPROM_Write1
;__Lib_EEPROM.c,26 :: 		
0x181C	0x281A      	GOTO       L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM.c,28 :: 		
L_end_EEPROM_Write:
0x181D	0x0008      	RETURN
; end of _EEPROM_Write
_atu_reset:
;main.h,204 :: 		void atu_reset() {
;main.h,205 :: 		ind = 0;
0x181E	0x0028      	MOVLB      8
0x181F	0x01B1      	CLRF       main_ind
;main.h,206 :: 		cap = 0;
0x1820	0x0027      	MOVLB      7
0x1821	0x01DB      	CLRF       main_cap
;main.h,207 :: 		set_ind(ind);
0x1822	0x002B      	MOVLB      11
0x1823	0x01CF      	CLRF       FARG_set_ind_Ind
0x1824	0x3188      	MOVLP      8
0x1825	0x2700      	CALL       _set_ind
0x1826	0x3198      	MOVLP      24
;main.h,208 :: 		set_cap(cap);
0x1827	0x0027      	MOVLB      7
0x1828	0x085B      	MOVF       main_cap, 0
0x1829	0x002B      	MOVLB      11
0x182A	0x00CF      	MOVWF      FARG_set_cap_Cap
0x182B	0x3188      	MOVLP      8
0x182C	0x27A1      	CALL       _set_cap
0x182D	0x3198      	MOVLP      24
;main.h,209 :: 		Vdelay_ms(Rel_Del);
0x182E	0x002A      	MOVLB      10
0x182F	0x086E      	MOVF       main_Rel_Del, 0
0x1830	0x002B      	MOVLB      11
0x1831	0x00EB      	MOVWF      FARG_VDelay_ms_Time_ms
0x1832	0x002A      	MOVLB      10
0x1833	0x086F      	MOVF       main_Rel_Del+1, 0
0x1834	0x002B      	MOVLB      11
0x1835	0x00EC      	MOVWF      FARG_VDelay_ms_Time_ms+1
0x1836	0x3180      	MOVLP      0
0x1837	0x275D      	CALL       _VDelay_ms
0x1838	0x3198      	MOVLP      24
;main.h,210 :: 		}
L_end_atu_reset:
0x1839	0x0008      	RETURN
; end of _atu_reset
_lcd_pwr:
;main.c,612 :: 		void lcd_pwr() {
;main.c,613 :: 		int p = 0;
0x183A	0x002B      	MOVLB      11
0x183B	0x01CB      	CLRF       lcd_pwr_p_L0
0x183C	0x01CC      	CLRF       lcd_pwr_p_L0+1
;main.c,615 :: 		int delta = Auto_delta - 100;
0x183D	0x3064      	MOVLW      100
0x183E	0x002A      	MOVLB      10
0x183F	0x0250      	SUBWF      _Auto_delta, 0
0x1840	0x002B      	MOVLB      11
0x1841	0x00C8      	MOVWF      lcd_pwr_delta_L0
0x1842	0x3000      	MOVLW      0
0x1843	0x002A      	MOVLB      10
0x1844	0x3B51      	SUBWFB     _Auto_delta+1, 0
0x1845	0x002B      	MOVLB      11
0x1846	0x00C9      	MOVWF      lcd_pwr_delta_L0+1
;main.c,617 :: 		int SWR_fixed = 1;
0x1847	0x3001      	MOVLW      1
0x1848	0x00CD      	MOVWF      lcd_pwr_SWR_fixed_L0
0x1849	0x3000      	MOVLW      0
0x184A	0x00CE      	MOVWF      lcd_pwr_SWR_fixed_L0+1
;main.c,618 :: 		PWR = 0;
0x184B	0x002A      	MOVLB      10
0x184C	0x01DE      	CLRF       _PWR
0x184D	0x01DF      	CLRF       _PWR+1
;main.c,619 :: 		asm CLRWDT;
0x184E	0x0064      	CLRWDT
;main.c,621 :: 		cnt = 120;
0x184F	0x3078      	MOVLW      120
0x1850	0x002B      	MOVLB      11
0x1851	0x00CA      	MOVWF      lcd_pwr_cnt_L0
;main.c,622 :: 		for(peak_cnt = 0; peak_cnt < cnt; peak_cnt++){
0x1852	0x01C7      	CLRF       lcd_pwr_peak_cnt_L0
L_lcd_pwr390:
0x1853	0x084A      	MOVF       lcd_pwr_cnt_L0, 0
0x1854	0x0247      	SUBWF      lcd_pwr_peak_cnt_L0, 0
0x1855	0x1803      	BTFSC      STATUS, 0
0x1856	0x28B0      	GOTO       L_lcd_pwr391
;main.c,623 :: 		if(PORTB.B1==0 | PORTB.B2==0 | PORTB.B0==0) {button_delay(); if(but==1) {but = 0; return;} }
0x1857	0x0020      	MOVLB      0
0x1858	0x188D      	BTFSC      PORTB, 1
0x1859	0x285C      	GOTO       L__lcd_pwr717
0x185A	0x1476      	BSF        R6, 0
0x185B	0x285D      	GOTO       L__lcd_pwr718
L__lcd_pwr717:
0x185C	0x1076      	BCF        R6, 0
L__lcd_pwr718:
0x185D	0x190D      	BTFSC      PORTB, 2
0x185E	0x2861      	GOTO       L__lcd_pwr719
0x185F	0x1403      	BSF        STATUS, 0
0x1860	0x2862      	GOTO       L__lcd_pwr720
L__lcd_pwr719:
0x1861	0x1003      	BCF        STATUS, 0
L__lcd_pwr720:
0x1862	0x1876      	BTFSC      R6, 0
0x1863	0x2868      	GOTO       L__lcd_pwr721
0x1864	0x1803      	BTFSC      STATUS, 0
0x1865	0x2868      	GOTO       L__lcd_pwr721
0x1866	0x1076      	BCF        R6, 0
0x1867	0x2869      	GOTO       L__lcd_pwr722
L__lcd_pwr721:
0x1868	0x1476      	BSF        R6, 0
L__lcd_pwr722:
0x1869	0x0020      	MOVLB      0
0x186A	0x180D      	BTFSC      PORTB, 0
0x186B	0x286E      	GOTO       L__lcd_pwr723
0x186C	0x1403      	BSF        STATUS, 0
0x186D	0x286F      	GOTO       L__lcd_pwr724
L__lcd_pwr723:
0x186E	0x1003      	BCF        STATUS, 0
L__lcd_pwr724:
0x186F	0x1876      	BTFSC      R6, 0
0x1870	0x2875      	GOTO       L__lcd_pwr725
0x1871	0x1803      	BTFSC      STATUS, 0
0x1872	0x2875      	GOTO       L__lcd_pwr725
0x1873	0x1076      	BCF        R6, 0
0x1874	0x2876      	GOTO       L__lcd_pwr726
L__lcd_pwr725:
0x1875	0x1476      	BSF        R6, 0
L__lcd_pwr726:
0x1876	0x1C76      	BTFSS      R6, 0
0x1877	0x2882      	GOTO       L_lcd_pwr393
0x1878	0x3190      	MOVLP      16
0x1879	0x20E0      	CALL       _button_delay
0x187A	0x3198      	MOVLP      24
0x187B	0x0028      	MOVLB      8
0x187C	0x0835      	MOVF       _but, 0
0x187D	0x3A01      	XORLW      1
0x187E	0x1D03      	BTFSS      STATUS, 2
0x187F	0x2882      	GOTO       L_lcd_pwr394
0x1880	0x01B5      	CLRF       _but
0x1881	0x2B94      	GOTO       L_end_lcd_pwr
L_lcd_pwr394:
L_lcd_pwr393:
;main.c,624 :: 		get_pwr();
0x1882	0x3190      	MOVLP      16
0x1883	0x263D      	CALL       _get_pwr
0x1884	0x3198      	MOVLP      24
;main.c,625 :: 		if(PWR>p) {p = PWR; SWR_fixed = SWR;}
0x1885	0x3080      	MOVLW      128
0x1886	0x002B      	MOVLB      11
0x1887	0x064C      	XORWF      lcd_pwr_p_L0+1, 0
0x1888	0x00F0      	MOVWF      R0
0x1889	0x3080      	MOVLW      128
0x188A	0x002A      	MOVLB      10
0x188B	0x065F      	XORWF      _PWR+1, 0
0x188C	0x0270      	SUBWF      R0, 0
0x188D	0x1D03      	BTFSS      STATUS, 2
0x188E	0x2892      	GOTO       L__lcd_pwr727
0x188F	0x085E      	MOVF       _PWR, 0
0x1890	0x002B      	MOVLB      11
0x1891	0x024B      	SUBWF      lcd_pwr_p_L0, 0
L__lcd_pwr727:
0x1892	0x1803      	BTFSC      STATUS, 0
0x1893	0x28A4      	GOTO       L_lcd_pwr395
0x1894	0x002A      	MOVLB      10
0x1895	0x085E      	MOVF       _PWR, 0
0x1896	0x002B      	MOVLB      11
0x1897	0x00CB      	MOVWF      lcd_pwr_p_L0
0x1898	0x002A      	MOVLB      10
0x1899	0x085F      	MOVF       _PWR+1, 0
0x189A	0x002B      	MOVLB      11
0x189B	0x00CC      	MOVWF      lcd_pwr_p_L0+1
0x189C	0x002A      	MOVLB      10
0x189D	0x085C      	MOVF       _SWR, 0
0x189E	0x002B      	MOVLB      11
0x189F	0x00CD      	MOVWF      lcd_pwr_SWR_fixed_L0
0x18A0	0x002A      	MOVLB      10
0x18A1	0x085D      	MOVF       _SWR+1, 0
0x18A2	0x002B      	MOVLB      11
0x18A3	0x00CE      	MOVWF      lcd_pwr_SWR_fixed_L0+1
L_lcd_pwr395:
;main.c,626 :: 		Delay_ms(3);
0x18A4	0x3010      	MOVLW      16
0x18A5	0x00FC      	MOVWF      R12
0x18A6	0x3094      	MOVLW      148
0x18A7	0x00FD      	MOVWF      R13
L_lcd_pwr396:
0x18A8	0x002B      	MOVLB      11
0x18A9	0x0BFD      	DECFSZ     R13, 1
0x18AA	0x28A8      	GOTO       L_lcd_pwr396
0x18AB	0x0BFC      	DECFSZ     R12, 1
0x18AC	0x28A8      	GOTO       L_lcd_pwr396
0x18AD	0x0000      	NOP
;main.c,622 :: 		for(peak_cnt = 0; peak_cnt < cnt; peak_cnt++){
0x18AE	0x0AC7      	INCF       lcd_pwr_peak_cnt_L0, 1
;main.c,627 :: 		}
0x18AF	0x2853      	GOTO       L_lcd_pwr390
L_lcd_pwr391:
;main.c,628 :: 		asm CLRWDT;
0x18B0	0x0064      	CLRWDT
;main.c,629 :: 		Power = p;
0x18B1	0x084B      	MOVF       lcd_pwr_p_L0, 0
0x18B2	0x0028      	MOVLB      8
0x18B3	0x00AF      	MOVWF      _Power
0x18B4	0x002B      	MOVLB      11
0x18B5	0x084C      	MOVF       lcd_pwr_p_L0+1, 0
0x18B6	0x0028      	MOVLB      8
0x18B7	0x00B0      	MOVWF      _Power+1
;main.c,630 :: 		lcd_swr(SWR_fixed);
0x18B8	0x002B      	MOVLB      11
0x18B9	0x084D      	MOVF       lcd_pwr_SWR_fixed_L0, 0
0x18BA	0x00CF      	MOVWF      FARG_lcd_swr_swr
0x18BB	0x084E      	MOVF       lcd_pwr_SWR_fixed_L0+1, 0
0x18BC	0x00D0      	MOVWF      FARG_lcd_swr_swr+1
0x18BD	0x3190      	MOVLP      16
0x18BE	0x2000      	CALL       _lcd_swr
0x18BF	0x3198      	MOVLP      24
;main.c,631 :: 		if(SWR_fixed>=100) {
0x18C0	0x3080      	MOVLW      128
0x18C1	0x002B      	MOVLB      11
0x18C2	0x064E      	XORWF      lcd_pwr_SWR_fixed_L0+1, 0
0x18C3	0x00F0      	MOVWF      R0
0x18C4	0x3080      	MOVLW      128
0x18C5	0x0270      	SUBWF      R0, 0
0x18C6	0x1D03      	BTFSS      STATUS, 2
0x18C7	0x28CA      	GOTO       L__lcd_pwr728
0x18C8	0x3064      	MOVLW      100
0x18C9	0x024D      	SUBWF      lcd_pwr_SWR_fixed_L0, 0
L__lcd_pwr728:
0x18CA	0x1C03      	BTFSS      STATUS, 0
0x18CB	0x28E9      	GOTO       L_lcd_pwr397
;main.c,632 :: 		dysp_on();          // dysplay ON
0x18CC	0x3188      	MOVLP      8
0x18CD	0x2782      	CALL       _dysp_on
0x18CE	0x3198      	MOVLP      24
;main.c,633 :: 		dysp_cnt = Dysp_delay * dysp_cnt_mult;
0x18CF	0x0028      	MOVLB      8
0x18D0	0x082C      	MOVF       _Dysp_delay, 0
0x18D1	0x00F0      	MOVWF      R0
0x18D2	0x3180      	MOVLP      0
0x18D3	0x27BE      	CALL       _Byte2Double
0x18D4	0x3198      	MOVLP      24
0x18D5	0x0027      	MOVLB      7
0x18D6	0x0862      	MOVF       _dysp_cnt_mult, 0
0x18D7	0x00F4      	MOVWF      R4
0x18D8	0x0863      	MOVF       _dysp_cnt_mult+1, 0
0x18D9	0x00F5      	MOVWF      R5
0x18DA	0x0864      	MOVF       _dysp_cnt_mult+2, 0
0x18DB	0x00F6      	MOVWF      R6
0x18DC	0x0865      	MOVF       _dysp_cnt_mult+3, 0
0x18DD	0x00F7      	MOVWF      R7
0x18DE	0x3188      	MOVLP      8
0x18DF	0x2598      	CALL       _Mul_32x32_FP
0x18E0	0x3198      	MOVLP      24
0x18E1	0x3180      	MOVLP      0
0x18E2	0x2651      	CALL       _Double2Int
0x18E3	0x3198      	MOVLP      24
0x18E4	0x0870      	MOVF       R0, 0
0x18E5	0x0028      	MOVLB      8
0x18E6	0x00AD      	MOVWF      _dysp_cnt
0x18E7	0x0871      	MOVF       R1, 0
0x18E8	0x00AE      	MOVWF      _dysp_cnt+1
;main.c,634 :: 		}
L_lcd_pwr397:
;main.c,636 :: 		if(Auto & SWR_fixed>=Auto_delta & ((SWR_fixed>SWR_fixed_old & (SWR_fixed-SWR_fixed_old)>delta) | (SWR_fixed<SWR_fixed_old & (SWR_fixed_old-SWR_fixed)>delta) | SWR_fixed_old==999))
0x18E9	0x3080      	MOVLW      128
0x18EA	0x002B      	MOVLB      11
0x18EB	0x064E      	XORWF      lcd_pwr_SWR_fixed_L0+1, 0
0x18EC	0x00F0      	MOVWF      R0
0x18ED	0x3080      	MOVLW      128
0x18EE	0x002A      	MOVLB      10
0x18EF	0x0651      	XORWF      _Auto_delta+1, 0
0x18F0	0x0270      	SUBWF      R0, 0
0x18F1	0x1D03      	BTFSS      STATUS, 2
0x18F2	0x28F6      	GOTO       L__lcd_pwr729
0x18F3	0x0850      	MOVF       _Auto_delta, 0
0x18F4	0x002B      	MOVLB      11
0x18F5	0x024D      	SUBWF      lcd_pwr_SWR_fixed_L0, 0
L__lcd_pwr729:
0x18F6	0x3001      	MOVLW      1
0x18F7	0x1C03      	BTFSS      STATUS, 0
0x18F8	0x3000      	MOVLW      0
0x18F9	0x00F0      	MOVWF      R0
0x18FA	0x0870      	MOVF       R0, 0
0x18FB	0x0027      	MOVLB      7
0x18FC	0x0561      	ANDWF      _Auto, 0
0x18FD	0x00F5      	MOVWF      R5
0x18FE	0x3080      	MOVLW      128
0x18FF	0x0660      	XORWF      _SWR_fixed_old+1, 0
0x1900	0x00F3      	MOVWF      R3
0x1901	0x3080      	MOVLW      128
0x1902	0x002B      	MOVLB      11
0x1903	0x064E      	XORWF      lcd_pwr_SWR_fixed_L0+1, 0
0x1904	0x0273      	SUBWF      R3, 0
0x1905	0x1D03      	BTFSS      STATUS, 2
0x1906	0x290A      	GOTO       L__lcd_pwr730
0x1907	0x084D      	MOVF       lcd_pwr_SWR_fixed_L0, 0
0x1908	0x0027      	MOVLB      7
0x1909	0x025F      	SUBWF      _SWR_fixed_old, 0
L__lcd_pwr730:
0x190A	0x0027      	MOVLB      7
0x190B	0x3001      	MOVLW      1
0x190C	0x1803      	BTFSC      STATUS, 0
0x190D	0x3000      	MOVLW      0
0x190E	0x00F3      	MOVWF      R3
0x190F	0x085F      	MOVF       _SWR_fixed_old, 0
0x1910	0x002B      	MOVLB      11
0x1911	0x024D      	SUBWF      lcd_pwr_SWR_fixed_L0, 0
0x1912	0x00F1      	MOVWF      R1
0x1913	0x0027      	MOVLB      7
0x1914	0x0860      	MOVF       _SWR_fixed_old+1, 0
0x1915	0x002B      	MOVLB      11
0x1916	0x3B4E      	SUBWFB     lcd_pwr_SWR_fixed_L0+1, 0
0x1917	0x00F2      	MOVWF      R2
0x1918	0x3080      	MOVLW      128
0x1919	0x0649      	XORWF      lcd_pwr_delta_L0+1, 0
0x191A	0x00F0      	MOVWF      R0
0x191B	0x3080      	MOVLW      128
0x191C	0x0672      	XORWF      R2, 0
0x191D	0x0270      	SUBWF      R0, 0
0x191E	0x1D03      	BTFSS      STATUS, 2
0x191F	0x2922      	GOTO       L__lcd_pwr731
0x1920	0x0871      	MOVF       R1, 0
0x1921	0x0248      	SUBWF      lcd_pwr_delta_L0, 0
L__lcd_pwr731:
0x1922	0x3001      	MOVLW      1
0x1923	0x1803      	BTFSC      STATUS, 0
0x1924	0x3000      	MOVLW      0
0x1925	0x00F0      	MOVWF      R0
0x1926	0x0870      	MOVF       R0, 0
0x1927	0x0573      	ANDWF      R3, 0
0x1928	0x00F4      	MOVWF      R4
0x1929	0x3080      	MOVLW      128
0x192A	0x064E      	XORWF      lcd_pwr_SWR_fixed_L0+1, 0
0x192B	0x00F3      	MOVWF      R3
0x192C	0x3080      	MOVLW      128
0x192D	0x0027      	MOVLB      7
0x192E	0x0660      	XORWF      _SWR_fixed_old+1, 0
0x192F	0x0273      	SUBWF      R3, 0
0x1930	0x1D03      	BTFSS      STATUS, 2
0x1931	0x2935      	GOTO       L__lcd_pwr732
0x1932	0x085F      	MOVF       _SWR_fixed_old, 0
0x1933	0x002B      	MOVLB      11
0x1934	0x024D      	SUBWF      lcd_pwr_SWR_fixed_L0, 0
L__lcd_pwr732:
0x1935	0x002B      	MOVLB      11
0x1936	0x3001      	MOVLW      1
0x1937	0x1803      	BTFSC      STATUS, 0
0x1938	0x3000      	MOVLW      0
0x1939	0x00F3      	MOVWF      R3
0x193A	0x084D      	MOVF       lcd_pwr_SWR_fixed_L0, 0
0x193B	0x0027      	MOVLB      7
0x193C	0x025F      	SUBWF      _SWR_fixed_old, 0
0x193D	0x00F1      	MOVWF      R1
0x193E	0x002B      	MOVLB      11
0x193F	0x084E      	MOVF       lcd_pwr_SWR_fixed_L0+1, 0
0x1940	0x0027      	MOVLB      7
0x1941	0x3B60      	SUBWFB     _SWR_fixed_old+1, 0
0x1942	0x00F2      	MOVWF      R2
0x1943	0x3080      	MOVLW      128
0x1944	0x002B      	MOVLB      11
0x1945	0x0649      	XORWF      lcd_pwr_delta_L0+1, 0
0x1946	0x00F0      	MOVWF      R0
0x1947	0x3080      	MOVLW      128
0x1948	0x0672      	XORWF      R2, 0
0x1949	0x0270      	SUBWF      R0, 0
0x194A	0x1D03      	BTFSS      STATUS, 2
0x194B	0x294E      	GOTO       L__lcd_pwr733
0x194C	0x0871      	MOVF       R1, 0
0x194D	0x0248      	SUBWF      lcd_pwr_delta_L0, 0
L__lcd_pwr733:
0x194E	0x3001      	MOVLW      1
0x194F	0x1803      	BTFSC      STATUS, 0
0x1950	0x3000      	MOVLW      0
0x1951	0x00F0      	MOVWF      R0
0x1952	0x0873      	MOVF       R3, 0
0x1953	0x05F0      	ANDWF      R0, 1
0x1954	0x0870      	MOVF       R0, 0
0x1955	0x0474      	IORWF       R4, 0
0x1956	0x00F1      	MOVWF      R1
0x1957	0x0027      	MOVLB      7
0x1958	0x0860      	MOVF       _SWR_fixed_old+1, 0
0x1959	0x3A03      	XORLW      3
0x195A	0x1D03      	BTFSS      STATUS, 2
0x195B	0x295E      	GOTO       L__lcd_pwr734
0x195C	0x30E7      	MOVLW      231
0x195D	0x065F      	XORWF      _SWR_fixed_old, 0
L__lcd_pwr734:
0x195E	0x3001      	MOVLW      1
0x195F	0x1D03      	BTFSS      STATUS, 2
0x1960	0x3000      	MOVLW      0
0x1961	0x00F0      	MOVWF      R0
0x1962	0x0871      	MOVF       R1, 0
0x1963	0x04F0      	IORWF       R0, 1
0x1964	0x0875      	MOVF       R5, 0
0x1965	0x05F0      	ANDWF      R0, 1
0x1966	0x1903      	BTFSC      STATUS, 2
0x1967	0x296A      	GOTO       L_lcd_pwr398
;main.c,637 :: 		Soft_tune = 1;
0x1968	0x3001      	MOVLW      1
0x1969	0x00EF      	MOVWF      _Soft_tune
L_lcd_pwr398:
;main.c,639 :: 		if(PORTB.B1==0 | PORTB.B2==0 | PORTB.B0==0) {button_delay(); if(but==1) {but = 0; return;} }   // Fast return if button pressed
0x196A	0x0020      	MOVLB      0
0x196B	0x188D      	BTFSC      PORTB, 1
0x196C	0x296F      	GOTO       L__lcd_pwr735
0x196D	0x1476      	BSF        R6, 0
0x196E	0x2970      	GOTO       L__lcd_pwr736
L__lcd_pwr735:
0x196F	0x1076      	BCF        R6, 0
L__lcd_pwr736:
0x1970	0x190D      	BTFSC      PORTB, 2
0x1971	0x2974      	GOTO       L__lcd_pwr737
0x1972	0x1403      	BSF        STATUS, 0
0x1973	0x2975      	GOTO       L__lcd_pwr738
L__lcd_pwr737:
0x1974	0x1003      	BCF        STATUS, 0
L__lcd_pwr738:
0x1975	0x1876      	BTFSC      R6, 0
0x1976	0x297B      	GOTO       L__lcd_pwr739
0x1977	0x1803      	BTFSC      STATUS, 0
0x1978	0x297B      	GOTO       L__lcd_pwr739
0x1979	0x1076      	BCF        R6, 0
0x197A	0x297C      	GOTO       L__lcd_pwr740
L__lcd_pwr739:
0x197B	0x1476      	BSF        R6, 0
L__lcd_pwr740:
0x197C	0x0020      	MOVLB      0
0x197D	0x180D      	BTFSC      PORTB, 0
0x197E	0x2981      	GOTO       L__lcd_pwr741
0x197F	0x1403      	BSF        STATUS, 0
0x1980	0x2982      	GOTO       L__lcd_pwr742
L__lcd_pwr741:
0x1981	0x1003      	BCF        STATUS, 0
L__lcd_pwr742:
0x1982	0x1876      	BTFSC      R6, 0
0x1983	0x2988      	GOTO       L__lcd_pwr743
0x1984	0x1803      	BTFSC      STATUS, 0
0x1985	0x2988      	GOTO       L__lcd_pwr743
0x1986	0x1076      	BCF        R6, 0
0x1987	0x2989      	GOTO       L__lcd_pwr744
L__lcd_pwr743:
0x1988	0x1476      	BSF        R6, 0
L__lcd_pwr744:
0x1989	0x1C76      	BTFSS      R6, 0
0x198A	0x2995      	GOTO       L_lcd_pwr399
0x198B	0x3190      	MOVLP      16
0x198C	0x20E0      	CALL       _button_delay
0x198D	0x3198      	MOVLP      24
0x198E	0x0028      	MOVLB      8
0x198F	0x0835      	MOVF       _but, 0
0x1990	0x3A01      	XORLW      1
0x1991	0x1D03      	BTFSS      STATUS, 2
0x1992	0x2995      	GOTO       L_lcd_pwr400
0x1993	0x01B5      	CLRF       _but
0x1994	0x2B94      	GOTO       L_end_lcd_pwr
L_lcd_pwr400:
L_lcd_pwr399:
0x1995	0x0028      	MOVLB      8
;main.c,640 :: 		show_pwr(Power, SWR_fixed);
0x1996	0x082F      	MOVF       _Power, 0
0x1997	0x002B      	MOVLB      11
0x1998	0x00CF      	MOVWF      FARG_show_pwr_Power
0x1999	0x0028      	MOVLB      8
0x199A	0x0830      	MOVF       _Power+1, 0
0x199B	0x002B      	MOVLB      11
0x199C	0x00D0      	MOVWF      FARG_show_pwr_Power+1
0x199D	0x084D      	MOVF       lcd_pwr_SWR_fixed_L0, 0
0x199E	0x00D1      	MOVWF      FARG_show_pwr_SWR
0x199F	0x084E      	MOVF       lcd_pwr_SWR_fixed_L0+1, 0
0x19A0	0x00D2      	MOVWF      FARG_show_pwr_SWR+1
0x19A1	0x3190      	MOVLP      16
0x19A2	0x2113      	CALL       _show_pwr
0x19A3	0x3198      	MOVLP      24
;main.c,642 :: 		if(PORTB.B1==0 | PORTB.B2==0 | PORTB.B0==0) {button_delay(); if(but==1) {but = 0; return;} }
0x19A4	0x0020      	MOVLB      0
0x19A5	0x188D      	BTFSC      PORTB, 1
0x19A6	0x29A9      	GOTO       L__lcd_pwr745
0x19A7	0x1476      	BSF        R6, 0
0x19A8	0x29AA      	GOTO       L__lcd_pwr746
L__lcd_pwr745:
0x19A9	0x1076      	BCF        R6, 0
L__lcd_pwr746:
0x19AA	0x190D      	BTFSC      PORTB, 2
0x19AB	0x29AE      	GOTO       L__lcd_pwr747
0x19AC	0x1403      	BSF        STATUS, 0
0x19AD	0x29AF      	GOTO       L__lcd_pwr748
L__lcd_pwr747:
0x19AE	0x1003      	BCF        STATUS, 0
L__lcd_pwr748:
0x19AF	0x1876      	BTFSC      R6, 0
0x19B0	0x29B5      	GOTO       L__lcd_pwr749
0x19B1	0x1803      	BTFSC      STATUS, 0
0x19B2	0x29B5      	GOTO       L__lcd_pwr749
0x19B3	0x1076      	BCF        R6, 0
0x19B4	0x29B6      	GOTO       L__lcd_pwr750
L__lcd_pwr749:
0x19B5	0x1476      	BSF        R6, 0
L__lcd_pwr750:
0x19B6	0x0020      	MOVLB      0
0x19B7	0x180D      	BTFSC      PORTB, 0
0x19B8	0x29BB      	GOTO       L__lcd_pwr751
0x19B9	0x1403      	BSF        STATUS, 0
0x19BA	0x29BC      	GOTO       L__lcd_pwr752
L__lcd_pwr751:
0x19BB	0x1003      	BCF        STATUS, 0
L__lcd_pwr752:
0x19BC	0x1876      	BTFSC      R6, 0
0x19BD	0x29C2      	GOTO       L__lcd_pwr753
0x19BE	0x1803      	BTFSC      STATUS, 0
0x19BF	0x29C2      	GOTO       L__lcd_pwr753
0x19C0	0x1076      	BCF        R6, 0
0x19C1	0x29C3      	GOTO       L__lcd_pwr754
L__lcd_pwr753:
0x19C2	0x1476      	BSF        R6, 0
L__lcd_pwr754:
0x19C3	0x1C76      	BTFSS      R6, 0
0x19C4	0x29CF      	GOTO       L_lcd_pwr401
0x19C5	0x3190      	MOVLP      16
0x19C6	0x20E0      	CALL       _button_delay
0x19C7	0x3198      	MOVLP      24
0x19C8	0x0028      	MOVLB      8
0x19C9	0x0835      	MOVF       _but, 0
0x19CA	0x3A01      	XORLW      1
0x19CB	0x1D03      	BTFSS      STATUS, 2
0x19CC	0x29CF      	GOTO       L_lcd_pwr402
0x19CD	0x01B5      	CLRF       _but
0x19CE	0x2B94      	GOTO       L_end_lcd_pwr
L_lcd_pwr402:
L_lcd_pwr401:
0x19CF	0x0028      	MOVLB      8
;main.c,643 :: 		asm CLRWDT;
0x19D0	0x0064      	CLRWDT
;main.c,644 :: 		if(Overload==1) {
0x19D1	0x0829      	MOVF       main_Overload, 0
0x19D2	0x3A01      	XORLW      1
0x19D3	0x1D03      	BTFSS      STATUS, 2
0x19D4	0x2B94      	GOTO       L_lcd_pwr403
;main.c,645 :: 		if(type==4 | type==5) {                  // 128*64 OLED
0x19D5	0x002A      	MOVLB      10
0x19D6	0x086D      	MOVF       _type, 0
0x19D7	0x3A04      	XORLW      4
0x19D8	0x3001      	MOVLW      1
0x19D9	0x1D03      	BTFSS      STATUS, 2
0x19DA	0x3000      	MOVLW      0
0x19DB	0x00F1      	MOVWF      R1
0x19DC	0x086D      	MOVF       _type, 0
0x19DD	0x3A05      	XORLW      5
0x19DE	0x3001      	MOVLW      1
0x19DF	0x1D03      	BTFSS      STATUS, 2
0x19E0	0x3000      	MOVLW      0
0x19E1	0x00F0      	MOVWF      R0
0x19E2	0x0871      	MOVF       R1, 0
0x19E3	0x04F0      	IORWF       R0, 1
0x19E4	0x1903      	BTFSC      STATUS, 2
0x19E5	0x2AB8      	GOTO       L_lcd_pwr404
;main.c,646 :: 		led_wr_str (2, 16, "        ", 8);
0x19E6	0x3002      	MOVLW      2
0x19E7	0x002C      	MOVLB      12
0x19E8	0x00A4      	MOVWF      FARG_led_wr_str_col
0x19E9	0x3010      	MOVLW      16
0x19EA	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x19EB	0x3020      	MOVLW      ?lstr65_main
0x19EC	0x00A6      	MOVWF      FARG_led_wr_str_str
0x19ED	0x3004      	MOVLW      hi_addr(?lstr65_main)
0x19EE	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x19EF	0x3008      	MOVLW      8
0x19F0	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x19F1	0x3180      	MOVLP      0
0x19F2	0x24B4      	CALL       _led_wr_str
0x19F3	0x3198      	MOVLP      24
;main.c,647 :: 		delay_ms(100);
0x19F4	0x3003      	MOVLW      3
0x19F5	0x00FB      	MOVWF      R11
0x19F6	0x3008      	MOVLW      8
0x19F7	0x00FC      	MOVWF      R12
0x19F8	0x3077      	MOVLW      119
0x19F9	0x00FD      	MOVWF      R13
L_lcd_pwr405:
0x19FA	0x0BFD      	DECFSZ     R13, 1
0x19FB	0x29FA      	GOTO       L_lcd_pwr405
0x19FC	0x0BFC      	DECFSZ     R12, 1
0x19FD	0x29FA      	GOTO       L_lcd_pwr405
0x19FE	0x0BFB      	DECFSZ     R11, 1
0x19FF	0x29FA      	GOTO       L_lcd_pwr405
;main.c,648 :: 		led_wr_str (2, 16, "OVERLOAD", 8);
0x1A00	0x3002      	MOVLW      2
0x1A01	0x002C      	MOVLB      12
0x1A02	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1A03	0x3010      	MOVLW      16
0x1A04	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1A05	0x30E6      	MOVLW      ?lstr66_main
0x1A06	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1A07	0x3003      	MOVLW      hi_addr(?lstr66_main)
0x1A08	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1A09	0x3008      	MOVLW      8
0x1A0A	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1A0B	0x3180      	MOVLP      0
0x1A0C	0x24B4      	CALL       _led_wr_str
0x1A0D	0x3198      	MOVLP      24
;main.c,649 :: 		delay_ms(500);
0x1A0E	0x300B      	MOVLW      11
0x1A0F	0x00FB      	MOVWF      R11
0x1A10	0x3026      	MOVLW      38
0x1A11	0x00FC      	MOVWF      R12
0x1A12	0x305D      	MOVLW      93
0x1A13	0x00FD      	MOVWF      R13
L_lcd_pwr406:
0x1A14	0x0BFD      	DECFSZ     R13, 1
0x1A15	0x2A14      	GOTO       L_lcd_pwr406
0x1A16	0x0BFC      	DECFSZ     R12, 1
0x1A17	0x2A14      	GOTO       L_lcd_pwr406
0x1A18	0x0BFB      	DECFSZ     R11, 1
0x1A19	0x2A14      	GOTO       L_lcd_pwr406
0x1A1A	0x0000      	NOP
0x1A1B	0x0000      	NOP
;main.c,650 :: 		asm CLRWDT;
0x1A1C	0x0064      	CLRWDT
;main.c,651 :: 		led_wr_str (2, 16, "        ", 8);
0x1A1D	0x3002      	MOVLW      2
0x1A1E	0x002C      	MOVLB      12
0x1A1F	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1A20	0x3010      	MOVLW      16
0x1A21	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1A22	0x30C4      	MOVLW      ?lstr67_main
0x1A23	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1A24	0x3004      	MOVLW      hi_addr(?lstr67_main)
0x1A25	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1A26	0x3008      	MOVLW      8
0x1A27	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1A28	0x3180      	MOVLP      0
0x1A29	0x24B4      	CALL       _led_wr_str
0x1A2A	0x3198      	MOVLP      24
;main.c,652 :: 		delay_ms(300);
0x1A2B	0x3007      	MOVLW      7
0x1A2C	0x00FB      	MOVWF      R11
0x1A2D	0x3017      	MOVLW      23
0x1A2E	0x00FC      	MOVWF      R12
0x1A2F	0x306A      	MOVLW      106
0x1A30	0x00FD      	MOVWF      R13
L_lcd_pwr407:
0x1A31	0x0BFD      	DECFSZ     R13, 1
0x1A32	0x2A31      	GOTO       L_lcd_pwr407
0x1A33	0x0BFC      	DECFSZ     R12, 1
0x1A34	0x2A31      	GOTO       L_lcd_pwr407
0x1A35	0x0BFB      	DECFSZ     R11, 1
0x1A36	0x2A31      	GOTO       L_lcd_pwr407
0x1A37	0x0000      	NOP
;main.c,653 :: 		asm CLRWDT;
0x1A38	0x0064      	CLRWDT
;main.c,654 :: 		led_wr_str (2, 16, "OVERLOAD", 8);
0x1A39	0x3002      	MOVLW      2
0x1A3A	0x002C      	MOVLB      12
0x1A3B	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1A3C	0x3010      	MOVLW      16
0x1A3D	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1A3E	0x3029      	MOVLW      ?lstr68_main
0x1A3F	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1A40	0x3005      	MOVLW      hi_addr(?lstr68_main)
0x1A41	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1A42	0x3008      	MOVLW      8
0x1A43	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1A44	0x3180      	MOVLP      0
0x1A45	0x24B4      	CALL       _led_wr_str
0x1A46	0x3198      	MOVLP      24
;main.c,655 :: 		delay_ms(500);
0x1A47	0x300B      	MOVLW      11
0x1A48	0x00FB      	MOVWF      R11
0x1A49	0x3026      	MOVLW      38
0x1A4A	0x00FC      	MOVWF      R12
0x1A4B	0x305D      	MOVLW      93
0x1A4C	0x00FD      	MOVWF      R13
L_lcd_pwr408:
0x1A4D	0x0BFD      	DECFSZ     R13, 1
0x1A4E	0x2A4D      	GOTO       L_lcd_pwr408
0x1A4F	0x0BFC      	DECFSZ     R12, 1
0x1A50	0x2A4D      	GOTO       L_lcd_pwr408
0x1A51	0x0BFB      	DECFSZ     R11, 1
0x1A52	0x2A4D      	GOTO       L_lcd_pwr408
0x1A53	0x0000      	NOP
0x1A54	0x0000      	NOP
;main.c,656 :: 		asm CLRWDT;
0x1A55	0x0064      	CLRWDT
;main.c,657 :: 		led_wr_str (2, 16, "        ", 8);
0x1A56	0x3002      	MOVLW      2
0x1A57	0x002C      	MOVLB      12
0x1A58	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1A59	0x3010      	MOVLW      16
0x1A5A	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1A5B	0x3020      	MOVLW      ?lstr69_main
0x1A5C	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1A5D	0x3005      	MOVLW      hi_addr(?lstr69_main)
0x1A5E	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1A5F	0x3008      	MOVLW      8
0x1A60	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1A61	0x3180      	MOVLP      0
0x1A62	0x24B4      	CALL       _led_wr_str
0x1A63	0x3198      	MOVLP      24
;main.c,658 :: 		delay_ms(300);
0x1A64	0x3007      	MOVLW      7
0x1A65	0x00FB      	MOVWF      R11
0x1A66	0x3017      	MOVLW      23
0x1A67	0x00FC      	MOVWF      R12
0x1A68	0x306A      	MOVLW      106
0x1A69	0x00FD      	MOVWF      R13
L_lcd_pwr409:
0x1A6A	0x0BFD      	DECFSZ     R13, 1
0x1A6B	0x2A6A      	GOTO       L_lcd_pwr409
0x1A6C	0x0BFC      	DECFSZ     R12, 1
0x1A6D	0x2A6A      	GOTO       L_lcd_pwr409
0x1A6E	0x0BFB      	DECFSZ     R11, 1
0x1A6F	0x2A6A      	GOTO       L_lcd_pwr409
0x1A70	0x0000      	NOP
;main.c,659 :: 		asm CLRWDT;
0x1A71	0x0064      	CLRWDT
;main.c,660 :: 		led_wr_str (2, 16, "OVERLOAD", 8);
0x1A72	0x3002      	MOVLW      2
0x1A73	0x002C      	MOVLB      12
0x1A74	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1A75	0x3010      	MOVLW      16
0x1A76	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1A77	0x30BB      	MOVLW      ?lstr70_main
0x1A78	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1A79	0x3004      	MOVLW      hi_addr(?lstr70_main)
0x1A7A	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1A7B	0x3008      	MOVLW      8
0x1A7C	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1A7D	0x3180      	MOVLP      0
0x1A7E	0x24B4      	CALL       _led_wr_str
0x1A7F	0x3198      	MOVLP      24
;main.c,661 :: 		delay_ms(500);
0x1A80	0x300B      	MOVLW      11
0x1A81	0x00FB      	MOVWF      R11
0x1A82	0x3026      	MOVLW      38
0x1A83	0x00FC      	MOVWF      R12
0x1A84	0x305D      	MOVLW      93
0x1A85	0x00FD      	MOVWF      R13
L_lcd_pwr410:
0x1A86	0x0BFD      	DECFSZ     R13, 1
0x1A87	0x2A86      	GOTO       L_lcd_pwr410
0x1A88	0x0BFC      	DECFSZ     R12, 1
0x1A89	0x2A86      	GOTO       L_lcd_pwr410
0x1A8A	0x0BFB      	DECFSZ     R11, 1
0x1A8B	0x2A86      	GOTO       L_lcd_pwr410
0x1A8C	0x0000      	NOP
0x1A8D	0x0000      	NOP
;main.c,662 :: 		asm CLRWDT;
0x1A8E	0x0064      	CLRWDT
;main.c,663 :: 		led_wr_str (2, 16, "        ", 8);
0x1A8F	0x3002      	MOVLW      2
0x1A90	0x002C      	MOVLB      12
0x1A91	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1A92	0x3010      	MOVLW      16
0x1A93	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1A94	0x305D      	MOVLW      ?lstr71_main
0x1A95	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1A96	0x3004      	MOVLW      hi_addr(?lstr71_main)
0x1A97	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1A98	0x3008      	MOVLW      8
0x1A99	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1A9A	0x3180      	MOVLP      0
0x1A9B	0x24B4      	CALL       _led_wr_str
0x1A9C	0x3198      	MOVLP      24
;main.c,664 :: 		delay_ms(100);
0x1A9D	0x3003      	MOVLW      3
0x1A9E	0x00FB      	MOVWF      R11
0x1A9F	0x3008      	MOVLW      8
0x1AA0	0x00FC      	MOVWF      R12
0x1AA1	0x3077      	MOVLW      119
0x1AA2	0x00FD      	MOVWF      R13
L_lcd_pwr411:
0x1AA3	0x0BFD      	DECFSZ     R13, 1
0x1AA4	0x2AA3      	GOTO       L_lcd_pwr411
0x1AA5	0x0BFC      	DECFSZ     R12, 1
0x1AA6	0x2AA3      	GOTO       L_lcd_pwr411
0x1AA7	0x0BFB      	DECFSZ     R11, 1
0x1AA8	0x2AA3      	GOTO       L_lcd_pwr411
;main.c,665 :: 		led_wr_str (2, 16, "SWR=    ", 8);
0x1AA9	0x3002      	MOVLW      2
0x1AAA	0x002C      	MOVLB      12
0x1AAB	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1AAC	0x3010      	MOVLW      16
0x1AAD	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1AAE	0x3054      	MOVLW      ?lstr72_main
0x1AAF	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1AB0	0x3004      	MOVLW      hi_addr(?lstr72_main)
0x1AB1	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1AB2	0x3008      	MOVLW      8
0x1AB3	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1AB4	0x3180      	MOVLP      0
0x1AB5	0x24B4      	CALL       _led_wr_str
0x1AB6	0x3198      	MOVLP      24
;main.c,666 :: 		}
0x1AB7	0x2B86      	GOTO       L_lcd_pwr412
L_lcd_pwr404:
;main.c,667 :: 		else if(type!=0)  {        // 1602  & 128*32// 1602
0x1AB8	0x002A      	MOVLB      10
0x1AB9	0x086D      	MOVF       _type, 0
0x1ABA	0x3A00      	XORLW      0
0x1ABB	0x1903      	BTFSC      STATUS, 2
0x1ABC	0x2B86      	GOTO       L_lcd_pwr413
;main.c,668 :: 		led_wr_str (1, 0, "        ", 8);
0x1ABD	0x3001      	MOVLW      1
0x1ABE	0x002C      	MOVLB      12
0x1ABF	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1AC0	0x01A5      	CLRF       FARG_led_wr_str_pos
0x1AC1	0x3066      	MOVLW      ?lstr73_main
0x1AC2	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1AC3	0x3004      	MOVLW      hi_addr(?lstr73_main)
0x1AC4	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1AC5	0x3008      	MOVLW      8
0x1AC6	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1AC7	0x3180      	MOVLP      0
0x1AC8	0x24B4      	CALL       _led_wr_str
0x1AC9	0x3198      	MOVLP      24
;main.c,669 :: 		delay_ms(100);
0x1ACA	0x3003      	MOVLW      3
0x1ACB	0x00FB      	MOVWF      R11
0x1ACC	0x3008      	MOVLW      8
0x1ACD	0x00FC      	MOVWF      R12
0x1ACE	0x3077      	MOVLW      119
0x1ACF	0x00FD      	MOVWF      R13
L_lcd_pwr414:
0x1AD0	0x0BFD      	DECFSZ     R13, 1
0x1AD1	0x2AD0      	GOTO       L_lcd_pwr414
0x1AD2	0x0BFC      	DECFSZ     R12, 1
0x1AD3	0x2AD0      	GOTO       L_lcd_pwr414
0x1AD4	0x0BFB      	DECFSZ     R11, 1
0x1AD5	0x2AD0      	GOTO       L_lcd_pwr414
;main.c,670 :: 		led_wr_str (1, 0, "OVERLOAD", 8);
0x1AD6	0x3001      	MOVLW      1
0x1AD7	0x002C      	MOVLB      12
0x1AD8	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1AD9	0x01A5      	CLRF       FARG_led_wr_str_pos
0x1ADA	0x30A9      	MOVLW      ?lstr74_main
0x1ADB	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1ADC	0x3004      	MOVLW      hi_addr(?lstr74_main)
0x1ADD	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1ADE	0x3008      	MOVLW      8
0x1ADF	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1AE0	0x3180      	MOVLP      0
0x1AE1	0x24B4      	CALL       _led_wr_str
0x1AE2	0x3198      	MOVLP      24
;main.c,671 :: 		delay_ms(500);
0x1AE3	0x300B      	MOVLW      11
0x1AE4	0x00FB      	MOVWF      R11
0x1AE5	0x3026      	MOVLW      38
0x1AE6	0x00FC      	MOVWF      R12
0x1AE7	0x305D      	MOVLW      93
0x1AE8	0x00FD      	MOVWF      R13
L_lcd_pwr415:
0x1AE9	0x0BFD      	DECFSZ     R13, 1
0x1AEA	0x2AE9      	GOTO       L_lcd_pwr415
0x1AEB	0x0BFC      	DECFSZ     R12, 1
0x1AEC	0x2AE9      	GOTO       L_lcd_pwr415
0x1AED	0x0BFB      	DECFSZ     R11, 1
0x1AEE	0x2AE9      	GOTO       L_lcd_pwr415
0x1AEF	0x0000      	NOP
0x1AF0	0x0000      	NOP
;main.c,672 :: 		asm CLRWDT;
0x1AF1	0x0064      	CLRWDT
;main.c,673 :: 		led_wr_str (1, 0, "        ", 8);
0x1AF2	0x3001      	MOVLW      1
0x1AF3	0x002C      	MOVLB      12
0x1AF4	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1AF5	0x01A5      	CLRF       FARG_led_wr_str_pos
0x1AF6	0x30A0      	MOVLW      ?lstr75_main
0x1AF7	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1AF8	0x3004      	MOVLW      hi_addr(?lstr75_main)
0x1AF9	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1AFA	0x3008      	MOVLW      8
0x1AFB	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1AFC	0x3180      	MOVLP      0
0x1AFD	0x24B4      	CALL       _led_wr_str
0x1AFE	0x3198      	MOVLP      24
;main.c,674 :: 		delay_ms(300);
0x1AFF	0x3007      	MOVLW      7
0x1B00	0x00FB      	MOVWF      R11
0x1B01	0x3017      	MOVLW      23
0x1B02	0x00FC      	MOVWF      R12
0x1B03	0x306A      	MOVLW      106
0x1B04	0x00FD      	MOVWF      R13
L_lcd_pwr416:
0x1B05	0x0BFD      	DECFSZ     R13, 1
0x1B06	0x2B05      	GOTO       L_lcd_pwr416
0x1B07	0x0BFC      	DECFSZ     R12, 1
0x1B08	0x2B05      	GOTO       L_lcd_pwr416
0x1B09	0x0BFB      	DECFSZ     R11, 1
0x1B0A	0x2B05      	GOTO       L_lcd_pwr416
0x1B0B	0x0000      	NOP
;main.c,675 :: 		asm CLRWDT;
0x1B0C	0x0064      	CLRWDT
;main.c,676 :: 		led_wr_str (1, 0, "OVERLOAD", 8);
0x1B0D	0x3001      	MOVLW      1
0x1B0E	0x002C      	MOVLB      12
0x1B0F	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1B10	0x01A5      	CLRF       FARG_led_wr_str_pos
0x1B11	0x30B2      	MOVLW      ?lstr76_main
0x1B12	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1B13	0x3004      	MOVLW      hi_addr(?lstr76_main)
0x1B14	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1B15	0x3008      	MOVLW      8
0x1B16	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1B17	0x3180      	MOVLP      0
0x1B18	0x24B4      	CALL       _led_wr_str
0x1B19	0x3198      	MOVLP      24
;main.c,677 :: 		delay_ms(500);
0x1B1A	0x300B      	MOVLW      11
0x1B1B	0x00FB      	MOVWF      R11
0x1B1C	0x3026      	MOVLW      38
0x1B1D	0x00FC      	MOVWF      R12
0x1B1E	0x305D      	MOVLW      93
0x1B1F	0x00FD      	MOVWF      R13
L_lcd_pwr417:
0x1B20	0x0BFD      	DECFSZ     R13, 1
0x1B21	0x2B20      	GOTO       L_lcd_pwr417
0x1B22	0x0BFC      	DECFSZ     R12, 1
0x1B23	0x2B20      	GOTO       L_lcd_pwr417
0x1B24	0x0BFB      	DECFSZ     R11, 1
0x1B25	0x2B20      	GOTO       L_lcd_pwr417
0x1B26	0x0000      	NOP
0x1B27	0x0000      	NOP
;main.c,678 :: 		asm CLRWDT;
0x1B28	0x0064      	CLRWDT
;main.c,679 :: 		led_wr_str (1, 0, "        ", 8);
0x1B29	0x3001      	MOVLW      1
0x1B2A	0x002C      	MOVLB      12
0x1B2B	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1B2C	0x01A5      	CLRF       FARG_led_wr_str_pos
0x1B2D	0x304B      	MOVLW      ?lstr77_main
0x1B2E	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1B2F	0x3004      	MOVLW      hi_addr(?lstr77_main)
0x1B30	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1B31	0x3008      	MOVLW      8
0x1B32	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1B33	0x3180      	MOVLP      0
0x1B34	0x24B4      	CALL       _led_wr_str
0x1B35	0x3198      	MOVLP      24
;main.c,680 :: 		delay_ms(300);
0x1B36	0x3007      	MOVLW      7
0x1B37	0x00FB      	MOVWF      R11
0x1B38	0x3017      	MOVLW      23
0x1B39	0x00FC      	MOVWF      R12
0x1B3A	0x306A      	MOVLW      106
0x1B3B	0x00FD      	MOVWF      R13
L_lcd_pwr418:
0x1B3C	0x0BFD      	DECFSZ     R13, 1
0x1B3D	0x2B3C      	GOTO       L_lcd_pwr418
0x1B3E	0x0BFC      	DECFSZ     R12, 1
0x1B3F	0x2B3C      	GOTO       L_lcd_pwr418
0x1B40	0x0BFB      	DECFSZ     R11, 1
0x1B41	0x2B3C      	GOTO       L_lcd_pwr418
0x1B42	0x0000      	NOP
;main.c,681 :: 		asm CLRWDT;
0x1B43	0x0064      	CLRWDT
;main.c,682 :: 		led_wr_str (1, 0, "OVERLOAD", 8);
0x1B44	0x3001      	MOVLW      1
0x1B45	0x002C      	MOVLB      12
0x1B46	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1B47	0x01A5      	CLRF       FARG_led_wr_str_pos
0x1B48	0x30E1      	MOVLW      ?lstr78_main
0x1B49	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1B4A	0x3004      	MOVLW      hi_addr(?lstr78_main)
0x1B4B	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1B4C	0x3008      	MOVLW      8
0x1B4D	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1B4E	0x3180      	MOVLP      0
0x1B4F	0x24B4      	CALL       _led_wr_str
0x1B50	0x3198      	MOVLP      24
;main.c,683 :: 		delay_ms(500);
0x1B51	0x300B      	MOVLW      11
0x1B52	0x00FB      	MOVWF      R11
0x1B53	0x3026      	MOVLW      38
0x1B54	0x00FC      	MOVWF      R12
0x1B55	0x305D      	MOVLW      93
0x1B56	0x00FD      	MOVWF      R13
L_lcd_pwr419:
0x1B57	0x0BFD      	DECFSZ     R13, 1
0x1B58	0x2B57      	GOTO       L_lcd_pwr419
0x1B59	0x0BFC      	DECFSZ     R12, 1
0x1B5A	0x2B57      	GOTO       L_lcd_pwr419
0x1B5B	0x0BFB      	DECFSZ     R11, 1
0x1B5C	0x2B57      	GOTO       L_lcd_pwr419
0x1B5D	0x0000      	NOP
0x1B5E	0x0000      	NOP
;main.c,684 :: 		asm CLRWDT;
0x1B5F	0x0064      	CLRWDT
;main.c,685 :: 		led_wr_str (1, 0, "        ", 8);
0x1B60	0x3001      	MOVLW      1
0x1B61	0x002C      	MOVLB      12
0x1B62	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1B63	0x01A5      	CLRF       FARG_led_wr_str_pos
0x1B64	0x30D8      	MOVLW      ?lstr79_main
0x1B65	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1B66	0x3004      	MOVLW      hi_addr(?lstr79_main)
0x1B67	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1B68	0x3008      	MOVLW      8
0x1B69	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1B6A	0x3180      	MOVLP      0
0x1B6B	0x24B4      	CALL       _led_wr_str
0x1B6C	0x3198      	MOVLP      24
;main.c,686 :: 		delay_ms(100);
0x1B6D	0x3003      	MOVLW      3
0x1B6E	0x00FB      	MOVWF      R11
0x1B6F	0x3008      	MOVLW      8
0x1B70	0x00FC      	MOVWF      R12
0x1B71	0x3077      	MOVLW      119
0x1B72	0x00FD      	MOVWF      R13
L_lcd_pwr420:
0x1B73	0x0BFD      	DECFSZ     R13, 1
0x1B74	0x2B73      	GOTO       L_lcd_pwr420
0x1B75	0x0BFC      	DECFSZ     R12, 1
0x1B76	0x2B73      	GOTO       L_lcd_pwr420
0x1B77	0x0BFB      	DECFSZ     R11, 1
0x1B78	0x2B73      	GOTO       L_lcd_pwr420
;main.c,687 :: 		led_wr_str (1, 0, "SWR=    ", 8);
0x1B79	0x3001      	MOVLW      1
0x1B7A	0x002C      	MOVLB      12
0x1B7B	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1B7C	0x01A5      	CLRF       FARG_led_wr_str_pos
0x1B7D	0x30CD      	MOVLW      ?lstr80_main
0x1B7E	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1B7F	0x3004      	MOVLW      hi_addr(?lstr80_main)
0x1B80	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1B81	0x3008      	MOVLW      8
0x1B82	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1B83	0x3180      	MOVLP      0
0x1B84	0x24B4      	CALL       _led_wr_str
0x1B85	0x3198      	MOVLP      24
;main.c,688 :: 		}
L_lcd_pwr413:
L_lcd_pwr412:
;main.c,689 :: 		asm CLRWDT;
0x1B86	0x0064      	CLRWDT
;main.c,690 :: 		SWR_old = 10000;
0x1B87	0x3010      	MOVLW      16
0x1B88	0x0029      	MOVLB      9
0x1B89	0x00D6      	MOVWF      _SWR_old
0x1B8A	0x3027      	MOVLW      39
0x1B8B	0x00D7      	MOVWF      _SWR_old+1
;main.c,691 :: 		lcd_swr(SWR_fixed);
0x1B8C	0x002B      	MOVLB      11
0x1B8D	0x084D      	MOVF       lcd_pwr_SWR_fixed_L0, 0
0x1B8E	0x00CF      	MOVWF      FARG_lcd_swr_swr
0x1B8F	0x084E      	MOVF       lcd_pwr_SWR_fixed_L0+1, 0
0x1B90	0x00D0      	MOVWF      FARG_lcd_swr_swr+1
0x1B91	0x3190      	MOVLP      16
0x1B92	0x2000      	CALL       _lcd_swr
0x1B93	0x3198      	MOVLP      24
;main.c,692 :: 		}
L_lcd_pwr403:
;main.c,693 :: 		return;
;main.c,694 :: 		}
L_end_lcd_pwr:
0x1B94	0x0008      	RETURN
; end of _lcd_pwr
_Div_16x16_S_L:
;__Lib_Math.c,415 :: 		
;__Lib_Math.c,421 :: 		
0x1B95	0x0D71      	RLF        R1, 0
;__Lib_Math.c,422 :: 		
0x1B96	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,423 :: 		
0x1B97	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,424 :: 		
0x1B98	0x0874      	MOVF       R4, 0
;__Lib_Math.c,425 :: 		
0x1B99	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,426 :: 		
0x1B9A	0x0875      	MOVF       R5, 0
;__Lib_Math.c,427 :: 		
0x1B9B	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,428 :: 		
0x1B9C	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,429 :: 		
0x1B9D	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,430 :: 		
0x1B9E	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,431 :: 		
0x1B9F	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,433 :: 		
0x1BA0	0x300F      	MOVLW      15
;__Lib_Math.c,434 :: 		
0x1BA1	0x00FC      	MOVWF      R12
;__Lib_Math.c,436 :: 		
0x1BA2	0x0D71      	RLF        R1, 0
;__Lib_Math.c,437 :: 		
0x1BA3	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,438 :: 		
0x1BA4	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,439 :: 		
0x1BA5	0x0874      	MOVF       R4, 0
;__Lib_Math.c,441 :: 		
0x1BA6	0x1C70      	BTFSS      R0, 0
;__Lib_Math.c,442 :: 		
0x1BA7	0x2BAE      	GOTO       $+7
;__Lib_Math.c,443 :: 		
0x1BA8	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,444 :: 		
0x1BA9	0x0875      	MOVF       R5, 0
;__Lib_Math.c,445 :: 		
0x1BAA	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,446 :: 		
0x1BAB	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,447 :: 		
0x1BAC	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,448 :: 		
0x1BAD	0x2BB3      	GOTO       $+6
;__Lib_Math.c,450 :: 		
0x1BAE	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,451 :: 		
0x1BAF	0x0875      	MOVF       R5, 0
;__Lib_Math.c,452 :: 		
0x1BB0	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,453 :: 		
0x1BB1	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,454 :: 		
0x1BB2	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,456 :: 		
0x1BB3	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,457 :: 		
0x1BB4	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,459 :: 		
0x1BB5	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,460 :: 		
0x1BB6	0x2BA2      	GOTO       $-20
;__Lib_Math.c,462 :: 		
0x1BB7	0x1870      	BTFSC      R0, 0
;__Lib_Math.c,463 :: 		
0x1BB8	0x2BBF      	GOTO       $+7
;__Lib_Math.c,464 :: 		
0x1BB9	0x0874      	MOVF       R4, 0
;__Lib_Math.c,465 :: 		
0x1BBA	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,466 :: 		
0x1BBB	0x0875      	MOVF       R5, 0
;__Lib_Math.c,467 :: 		
0x1BBC	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,468 :: 		
0x1BBD	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,469 :: 		
0x1BBE	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,470 :: 		
0x1BBF	0x0000      	NOP
;__Lib_Math.c,472 :: 		
L_end_Div_16x16_S_L:
0x1BC0	0x0008      	RETURN
; end of _Div_16x16_S_L
_show_reset:
;main.c,316 :: 		void show_reset() {
;main.c,317 :: 		atu_reset();
0x1BC1	0x201E      	CALL       _atu_reset
;main.c,318 :: 		SW = 1;
0x1BC2	0x3001      	MOVLW      1
0x1BC3	0x0028      	MOVLB      8
0x1BC4	0x00C7      	MOVWF      main_SW
;main.c,319 :: 		set_sw(SW);
0x1BC5	0x3001      	MOVLW      1
0x1BC6	0x002B      	MOVLB      11
0x1BC7	0x00C7      	MOVWF      FARG_set_sw_SW
0x1BC8	0x3188      	MOVLP      8
0x1BC9	0x27E5      	CALL       _set_sw
0x1BCA	0x3198      	MOVLP      24
;main.c,320 :: 		EEPROM_Write(255, 0);
0x1BCB	0x30FF      	MOVLW      255
0x1BCC	0x002B      	MOVLB      11
0x1BCD	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x1BCE	0x01C8      	CLRF       FARG_EEPROM_Write_data_
0x1BCF	0x2000      	CALL       _EEPROM_Write
;main.c,321 :: 		EEPROM_Write(254, 0);
0x1BD0	0x30FE      	MOVLW      254
0x1BD1	0x002B      	MOVLB      11
0x1BD2	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x1BD3	0x01C8      	CLRF       FARG_EEPROM_Write_data_
0x1BD4	0x2000      	CALL       _EEPROM_Write
;main.c,322 :: 		EEPROM_Write(253, 1);
0x1BD5	0x30FD      	MOVLW      253
0x1BD6	0x002B      	MOVLB      11
0x1BD7	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x1BD8	0x3001      	MOVLW      1
0x1BD9	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x1BDA	0x2000      	CALL       _EEPROM_Write
;main.c,323 :: 		EEPROM_Write(252, 0);
0x1BDB	0x30FC      	MOVLW      252
0x1BDC	0x002B      	MOVLB      11
0x1BDD	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x1BDE	0x01C8      	CLRF       FARG_EEPROM_Write_data_
0x1BDF	0x2000      	CALL       _EEPROM_Write
;main.c,324 :: 		EEPROM_Write(251, 0);
0x1BE0	0x30FB      	MOVLW      251
0x1BE1	0x002B      	MOVLB      11
0x1BE2	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x1BE3	0x01C8      	CLRF       FARG_EEPROM_Write_data_
0x1BE4	0x2000      	CALL       _EEPROM_Write
;main.c,325 :: 		lcd_ind();
0x1BE5	0x3188      	MOVLP      8
0x1BE6	0x2000      	CALL       _lcd_ind
0x1BE7	0x3198      	MOVLP      24
;main.c,326 :: 		Loss_mode = 0;
0x1BE8	0x0020      	MOVLB      0
0x1BE9	0x01C8      	CLRF       _Loss_mode
;main.c,327 :: 		p_Tx = 0;
0x1BEA	0x0022      	MOVLB      2
0x1BEB	0x138C      	BCF        LATA7_bit, BitPos(LATA7_bit+0)
;main.c,328 :: 		n_Tx = 1;
0x1BEC	0x170C      	BSF        LATA6_bit, BitPos(LATA6_bit+0)
;main.c,329 :: 		SWR = 0;
0x1BED	0x002A      	MOVLB      10
0x1BEE	0x01DC      	CLRF       _SWR
0x1BEF	0x01DD      	CLRF       _SWR+1
;main.c,330 :: 		PWR = 0;
0x1BF0	0x01DE      	CLRF       _PWR
0x1BF1	0x01DF      	CLRF       _PWR+1
;main.c,331 :: 		SWR_fixed_old = 0;
0x1BF2	0x0027      	MOVLB      7
0x1BF3	0x01DF      	CLRF       _SWR_fixed_old
0x1BF4	0x01E0      	CLRF       _SWR_fixed_old+1
;main.c,332 :: 		if(type==4 | type==5) {    // 128*64 OLED
0x1BF5	0x002A      	MOVLB      10
0x1BF6	0x086D      	MOVF       _type, 0
0x1BF7	0x3A04      	XORLW      4
0x1BF8	0x3001      	MOVLW      1
0x1BF9	0x1D03      	BTFSS      STATUS, 2
0x1BFA	0x3000      	MOVLW      0
0x1BFB	0x00F1      	MOVWF      R1
0x1BFC	0x086D      	MOVF       _type, 0
0x1BFD	0x3A05      	XORLW      5
0x1BFE	0x3001      	MOVLW      1
0x1BFF	0x1D03      	BTFSS      STATUS, 2
0x1C00	0x3000      	MOVLW      0
0x1C01	0x00F0      	MOVWF      R0
0x1C02	0x0871      	MOVF       R1, 0
0x1C03	0x04F0      	IORWF       R0, 1
0x1C04	0x1903      	BTFSC      STATUS, 2
0x1C05	0x2C33      	GOTO       L_show_reset284
;main.c,333 :: 		led_wr_str (2, 16, "RESET   ", 8);
0x1C06	0x3002      	MOVLW      2
0x1C07	0x002C      	MOVLB      12
0x1C08	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1C09	0x3010      	MOVLW      16
0x1C0A	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1C0B	0x30DF      	MOVLW      ?lstr33_main
0x1C0C	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1C0D	0x3002      	MOVLW      hi_addr(?lstr33_main)
0x1C0E	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1C0F	0x3008      	MOVLW      8
0x1C10	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1C11	0x3180      	MOVLP      0
0x1C12	0x24B4      	CALL       _led_wr_str
0x1C13	0x3198      	MOVLP      24
;main.c,334 :: 		asm CLRWDT;
0x1C14	0x0064      	CLRWDT
;main.c,335 :: 		delay_ms(600);
0x1C15	0x300D      	MOVLW      13
0x1C16	0x00FB      	MOVWF      R11
0x1C17	0x302D      	MOVLW      45
0x1C18	0x00FC      	MOVWF      R12
0x1C19	0x30D7      	MOVLW      215
0x1C1A	0x00FD      	MOVWF      R13
L_show_reset285:
0x1C1B	0x0BFD      	DECFSZ     R13, 1
0x1C1C	0x2C1B      	GOTO       L_show_reset285
0x1C1D	0x0BFC      	DECFSZ     R12, 1
0x1C1E	0x2C1B      	GOTO       L_show_reset285
0x1C1F	0x0BFB      	DECFSZ     R11, 1
0x1C20	0x2C1B      	GOTO       L_show_reset285
0x1C21	0x0000      	NOP
0x1C22	0x0000      	NOP
;main.c,336 :: 		led_wr_str (2, 16, "SWR=0.00", 8);
0x1C23	0x3002      	MOVLW      2
0x1C24	0x002C      	MOVLB      12
0x1C25	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1C26	0x3010      	MOVLW      16
0x1C27	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x1C28	0x3041      	MOVLW      ?lstr34_main
0x1C29	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1C2A	0x3003      	MOVLW      hi_addr(?lstr34_main)
0x1C2B	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1C2C	0x3008      	MOVLW      8
0x1C2D	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1C2E	0x3180      	MOVLP      0
0x1C2F	0x24B4      	CALL       _led_wr_str
0x1C30	0x3198      	MOVLP      24
;main.c,337 :: 		asm CLRWDT;
0x1C31	0x0064      	CLRWDT
;main.c,338 :: 		}
0x1C32	0x2C66      	GOTO       L_show_reset286
L_show_reset284:
;main.c,339 :: 		else if(type!=0) {// 1602 LCD & 128*32 OLED
0x1C33	0x002A      	MOVLB      10
0x1C34	0x086D      	MOVF       _type, 0
0x1C35	0x3A00      	XORLW      0
0x1C36	0x1903      	BTFSC      STATUS, 2
0x1C37	0x2C63      	GOTO       L_show_reset287
;main.c,340 :: 		led_wr_str (1, 0, "RESET   ", 8);
0x1C38	0x3001      	MOVLW      1
0x1C39	0x002C      	MOVLB      12
0x1C3A	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1C3B	0x01A5      	CLRF       FARG_led_wr_str_pos
0x1C3C	0x3053      	MOVLW      ?lstr35_main
0x1C3D	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1C3E	0x3003      	MOVLW      hi_addr(?lstr35_main)
0x1C3F	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1C40	0x3008      	MOVLW      8
0x1C41	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1C42	0x3180      	MOVLP      0
0x1C43	0x24B4      	CALL       _led_wr_str
0x1C44	0x3198      	MOVLP      24
;main.c,341 :: 		asm CLRWDT;
0x1C45	0x0064      	CLRWDT
;main.c,342 :: 		delay_ms(600);
0x1C46	0x300D      	MOVLW      13
0x1C47	0x00FB      	MOVWF      R11
0x1C48	0x302D      	MOVLW      45
0x1C49	0x00FC      	MOVWF      R12
0x1C4A	0x30D7      	MOVLW      215
0x1C4B	0x00FD      	MOVWF      R13
L_show_reset288:
0x1C4C	0x0BFD      	DECFSZ     R13, 1
0x1C4D	0x2C4C      	GOTO       L_show_reset288
0x1C4E	0x0BFC      	DECFSZ     R12, 1
0x1C4F	0x2C4C      	GOTO       L_show_reset288
0x1C50	0x0BFB      	DECFSZ     R11, 1
0x1C51	0x2C4C      	GOTO       L_show_reset288
0x1C52	0x0000      	NOP
0x1C53	0x0000      	NOP
;main.c,343 :: 		led_wr_str (1, 0, "SWR=0.00", 8);
0x1C54	0x3001      	MOVLW      1
0x1C55	0x002C      	MOVLB      12
0x1C56	0x00A4      	MOVWF      FARG_led_wr_str_col
0x1C57	0x01A5      	CLRF       FARG_led_wr_str_pos
0x1C58	0x304A      	MOVLW      ?lstr36_main
0x1C59	0x00A6      	MOVWF      FARG_led_wr_str_str
0x1C5A	0x3003      	MOVLW      hi_addr(?lstr36_main)
0x1C5B	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x1C5C	0x3008      	MOVLW      8
0x1C5D	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x1C5E	0x3180      	MOVLP      0
0x1C5F	0x24B4      	CALL       _led_wr_str
0x1C60	0x3198      	MOVLP      24
;main.c,344 :: 		asm CLRWDT;
0x1C61	0x0064      	CLRWDT
;main.c,345 :: 		}
0x1C62	0x2C66      	GOTO       L_show_reset289
L_show_reset287:
;main.c,347 :: 		LATB.B6 = 1;
0x1C63	0x0022      	MOVLB      2
0x1C64	0x170D      	BSF        LATB, 6
;main.c,348 :: 		LATB.B7 = 1;
0x1C65	0x178D      	BSF        LATB, 7
;main.c,349 :: 		}
L_show_reset289:
L_show_reset286:
;main.c,350 :: 		SWR_old = 10000;
0x1C66	0x3010      	MOVLW      16
0x1C67	0x0029      	MOVLB      9
0x1C68	0x00D6      	MOVWF      _SWR_old
0x1C69	0x3027      	MOVLW      39
0x1C6A	0x00D7      	MOVWF      _SWR_old+1
;main.c,351 :: 		Power_old = 10000;
0x1C6B	0x3010      	MOVLW      16
0x1C6C	0x0021      	MOVLB      1
0x1C6D	0x00DE      	MOVWF      _Power_old
0x1C6E	0x3027      	MOVLW      39
0x1C6F	0x00DF      	MOVWF      _Power_old+1
;main.c,352 :: 		lcd_pwr();
0x1C70	0x203A      	CALL       _lcd_pwr
;main.c,353 :: 		return;
;main.c,354 :: 		}
L_end_show_reset:
0x1C71	0x0008      	RETURN
; end of _show_reset
_get_swr:
;main.h,129 :: 		void get_swr() {
;main.h,130 :: 		get_pwr();
0x1C72	0x3190      	MOVLP      16
0x1C73	0x263D      	CALL       _get_pwr
0x1C74	0x3198      	MOVLP      24
;main.h,131 :: 		if(p_cnt!=100) {
0x1C75	0x0025      	MOVLB      5
0x1C76	0x086F      	MOVF       _p_cnt, 0
0x1C77	0x3A64      	XORLW      100
0x1C78	0x1903      	BTFSC      STATUS, 2
0x1C79	0x2C8D      	GOTO       L_get_swr54
;main.h,132 :: 		p_cnt += 1;
0x1C7A	0x0AEF      	INCF       _p_cnt, 1
;main.h,133 :: 		if(PWR>P_max) P_max = PWR;
0x1C7B	0x3080      	MOVLW      128
0x1C7C	0x002A      	MOVLB      10
0x1C7D	0x063D      	XORWF      _P_max+1, 0
0x1C7E	0x00F0      	MOVWF      R0
0x1C7F	0x3080      	MOVLW      128
0x1C80	0x065F      	XORWF      _PWR+1, 0
0x1C81	0x0270      	SUBWF      R0, 0
0x1C82	0x1D03      	BTFSS      STATUS, 2
0x1C83	0x2C86      	GOTO       L__get_swr573
0x1C84	0x085E      	MOVF       _PWR, 0
0x1C85	0x023C      	SUBWF      _P_max, 0
L__get_swr573:
0x1C86	0x1803      	BTFSC      STATUS, 0
0x1C87	0x2C8C      	GOTO       L_get_swr55
0x1C88	0x085E      	MOVF       _PWR, 0
0x1C89	0x00BC      	MOVWF      _P_max
0x1C8A	0x085F      	MOVF       _PWR+1, 0
0x1C8B	0x00BD      	MOVWF      _P_max+1
L_get_swr55:
;main.h,134 :: 		}
0x1C8C	0x2CA5      	GOTO       L_get_swr56
L_get_swr54:
;main.h,136 :: 		p_cnt = 0;
0x1C8D	0x0025      	MOVLB      5
0x1C8E	0x01EF      	CLRF       _p_cnt
;main.h,137 :: 		show_pwr(P_max, SWR);
0x1C8F	0x002A      	MOVLB      10
0x1C90	0x083C      	MOVF       _P_max, 0
0x1C91	0x002B      	MOVLB      11
0x1C92	0x00CF      	MOVWF      FARG_show_pwr_Power
0x1C93	0x002A      	MOVLB      10
0x1C94	0x083D      	MOVF       _P_max+1, 0
0x1C95	0x002B      	MOVLB      11
0x1C96	0x00D0      	MOVWF      FARG_show_pwr_Power+1
0x1C97	0x002A      	MOVLB      10
0x1C98	0x085C      	MOVF       _SWR, 0
0x1C99	0x002B      	MOVLB      11
0x1C9A	0x00D1      	MOVWF      FARG_show_pwr_SWR
0x1C9B	0x002A      	MOVLB      10
0x1C9C	0x085D      	MOVF       _SWR+1, 0
0x1C9D	0x002B      	MOVLB      11
0x1C9E	0x00D2      	MOVWF      FARG_show_pwr_SWR+1
0x1C9F	0x3190      	MOVLP      16
0x1CA0	0x2113      	CALL       _show_pwr
0x1CA1	0x3198      	MOVLP      24
;main.h,138 :: 		P_max = 0;
0x1CA2	0x002A      	MOVLB      10
0x1CA3	0x01BC      	CLRF       _P_max
0x1CA4	0x01BD      	CLRF       _P_max+1
;main.h,139 :: 		}
L_get_swr56:
;main.h,140 :: 		while(PWR<min_for_start | (PWR> max_for_start & max_for_start>0)) {  // waiting for good power
L_get_swr57:
0x1CA5	0x002A      	MOVLB      10
0x1CA6	0x3080      	MOVLW      128
0x1CA7	0x065F      	XORWF      _PWR+1, 0
0x1CA8	0x00F2      	MOVWF      R2
0x1CA9	0x3080      	MOVLW      128
0x1CAA	0x063F      	XORWF      main_min_for_start+1, 0
0x1CAB	0x0272      	SUBWF      R2, 0
0x1CAC	0x1D03      	BTFSS      STATUS, 2
0x1CAD	0x2CB0      	GOTO       L__get_swr574
0x1CAE	0x083E      	MOVF       main_min_for_start, 0
0x1CAF	0x025E      	SUBWF      _PWR, 0
L__get_swr574:
0x1CB0	0x3001      	MOVLW      1
0x1CB1	0x1803      	BTFSC      STATUS, 0
0x1CB2	0x3000      	MOVLW      0
0x1CB3	0x00F2      	MOVWF      R2
0x1CB4	0x3080      	MOVLW      128
0x1CB5	0x0029      	MOVLB      9
0x1CB6	0x066D      	XORWF      main_max_for_start+1, 0
0x1CB7	0x00F1      	MOVWF      R1
0x1CB8	0x3080      	MOVLW      128
0x1CB9	0x002A      	MOVLB      10
0x1CBA	0x065F      	XORWF      _PWR+1, 0
0x1CBB	0x0271      	SUBWF      R1, 0
0x1CBC	0x1D03      	BTFSS      STATUS, 2
0x1CBD	0x2CC1      	GOTO       L__get_swr575
0x1CBE	0x085E      	MOVF       _PWR, 0
0x1CBF	0x0029      	MOVLB      9
0x1CC0	0x026C      	SUBWF      main_max_for_start, 0
L__get_swr575:
0x1CC1	0x0029      	MOVLB      9
0x1CC2	0x3001      	MOVLW      1
0x1CC3	0x1803      	BTFSC      STATUS, 0
0x1CC4	0x3000      	MOVLW      0
0x1CC5	0x00F1      	MOVWF      R1
0x1CC6	0x3080      	MOVLW      128
0x1CC7	0x00F0      	MOVWF      R0
0x1CC8	0x3080      	MOVLW      128
0x1CC9	0x066D      	XORWF      main_max_for_start+1, 0
0x1CCA	0x0270      	SUBWF      R0, 0
0x1CCB	0x1D03      	BTFSS      STATUS, 2
0x1CCC	0x2CCF      	GOTO       L__get_swr576
0x1CCD	0x086C      	MOVF       main_max_for_start, 0
0x1CCE	0x3C00      	SUBLW      0
L__get_swr576:
0x1CCF	0x3001      	MOVLW      1
0x1CD0	0x1803      	BTFSC      STATUS, 0
0x1CD1	0x3000      	MOVLW      0
0x1CD2	0x00F0      	MOVWF      R0
0x1CD3	0x0871      	MOVF       R1, 0
0x1CD4	0x05F0      	ANDWF      R0, 1
0x1CD5	0x0872      	MOVF       R2, 0
0x1CD6	0x04F0      	IORWF       R0, 1
0x1CD7	0x1903      	BTFSC      STATUS, 2
0x1CD8	0x2D3E      	GOTO       L_get_swr58
;main.h,141 :: 		asm CLRWDT;
0x1CD9	0x0064      	CLRWDT
;main.h,142 :: 		get_pwr();
0x1CDA	0x3190      	MOVLP      16
0x1CDB	0x263D      	CALL       _get_pwr
0x1CDC	0x3198      	MOVLP      24
;main.h,143 :: 		if(p_cnt!=100) {
0x1CDD	0x0025      	MOVLB      5
0x1CDE	0x086F      	MOVF       _p_cnt, 0
0x1CDF	0x3A64      	XORLW      100
0x1CE0	0x1903      	BTFSC      STATUS, 2
0x1CE1	0x2CF5      	GOTO       L_get_swr59
;main.h,144 :: 		p_cnt += 1;
0x1CE2	0x0AEF      	INCF       _p_cnt, 1
;main.h,145 :: 		if(PWR>P_max) P_max = PWR;
0x1CE3	0x3080      	MOVLW      128
0x1CE4	0x002A      	MOVLB      10
0x1CE5	0x063D      	XORWF      _P_max+1, 0
0x1CE6	0x00F0      	MOVWF      R0
0x1CE7	0x3080      	MOVLW      128
0x1CE8	0x065F      	XORWF      _PWR+1, 0
0x1CE9	0x0270      	SUBWF      R0, 0
0x1CEA	0x1D03      	BTFSS      STATUS, 2
0x1CEB	0x2CEE      	GOTO       L__get_swr577
0x1CEC	0x085E      	MOVF       _PWR, 0
0x1CED	0x023C      	SUBWF      _P_max, 0
L__get_swr577:
0x1CEE	0x1803      	BTFSC      STATUS, 0
0x1CEF	0x2CF4      	GOTO       L_get_swr60
0x1CF0	0x085E      	MOVF       _PWR, 0
0x1CF1	0x00BC      	MOVWF      _P_max
0x1CF2	0x085F      	MOVF       _PWR+1, 0
0x1CF3	0x00BD      	MOVWF      _P_max+1
L_get_swr60:
;main.h,146 :: 		}
0x1CF4	0x2D0D      	GOTO       L_get_swr61
L_get_swr59:
;main.h,148 :: 		p_cnt = 0;
0x1CF5	0x0025      	MOVLB      5
0x1CF6	0x01EF      	CLRF       _p_cnt
;main.h,149 :: 		show_pwr(P_max, SWR);
0x1CF7	0x002A      	MOVLB      10
0x1CF8	0x083C      	MOVF       _P_max, 0
0x1CF9	0x002B      	MOVLB      11
0x1CFA	0x00CF      	MOVWF      FARG_show_pwr_Power
0x1CFB	0x002A      	MOVLB      10
0x1CFC	0x083D      	MOVF       _P_max+1, 0
0x1CFD	0x002B      	MOVLB      11
0x1CFE	0x00D0      	MOVWF      FARG_show_pwr_Power+1
0x1CFF	0x002A      	MOVLB      10
0x1D00	0x085C      	MOVF       _SWR, 0
0x1D01	0x002B      	MOVLB      11
0x1D02	0x00D1      	MOVWF      FARG_show_pwr_SWR
0x1D03	0x002A      	MOVLB      10
0x1D04	0x085D      	MOVF       _SWR+1, 0
0x1D05	0x002B      	MOVLB      11
0x1D06	0x00D2      	MOVWF      FARG_show_pwr_SWR+1
0x1D07	0x3190      	MOVLP      16
0x1D08	0x2113      	CALL       _show_pwr
0x1D09	0x3198      	MOVLP      24
;main.h,150 :: 		P_max = 0;
0x1D0A	0x002A      	MOVLB      10
0x1D0B	0x01BC      	CLRF       _P_max
0x1D0C	0x01BD      	CLRF       _P_max+1
;main.h,151 :: 		}
L_get_swr61:
;main.h,153 :: 		if(Button(&PORTB, 0, 5, 1)) rready = 1;
0x1D0D	0x300D      	MOVLW      PORTB
0x1D0E	0x002B      	MOVLB      11
0x1D0F	0x00EB      	MOVWF      FARG_Button_port
0x1D10	0x3000      	MOVLW      hi_addr(PORTB)
0x1D11	0x00EC      	MOVWF      FARG_Button_port+1
0x1D12	0x01ED      	CLRF       FARG_Button_pin
0x1D13	0x3005      	MOVLW      5
0x1D14	0x00EE      	MOVWF      FARG_Button_time_ms
0x1D15	0x3001      	MOVLW      1
0x1D16	0x00EF      	MOVWF      FARG_Button_active_state
0x1D17	0x3188      	MOVLP      8
0x1D18	0x24C0      	CALL       _Button
0x1D19	0x3198      	MOVLP      24
0x1D1A	0x0870      	MOVF       R0, 0
0x1D1B	0x1903      	BTFSC      STATUS, 2
0x1D1C	0x2D20      	GOTO       L_get_swr62
0x1D1D	0x3001      	MOVLW      1
0x1D1E	0x0026      	MOVLB      6
0x1D1F	0x00DE      	MOVWF      _rready
L_get_swr62:
0x1D20	0x0026      	MOVLB      6
;main.h,154 :: 		if(rready==1 & Button(&PORTB, 0, 5, 0)) { //  press button  Tune
0x1D21	0x085E      	MOVF       _rready, 0
0x1D22	0x3A01      	XORLW      1
0x1D23	0x3001      	MOVLW      1
0x1D24	0x1D03      	BTFSS      STATUS, 2
0x1D25	0x3000      	MOVLW      0
0x1D26	0x002B      	MOVLB      11
0x1D27	0x00C6      	MOVWF      FLOC__get_swr
0x1D28	0x300D      	MOVLW      PORTB
0x1D29	0x00EB      	MOVWF      FARG_Button_port
0x1D2A	0x3000      	MOVLW      hi_addr(PORTB)
0x1D2B	0x00EC      	MOVWF      FARG_Button_port+1
0x1D2C	0x01ED      	CLRF       FARG_Button_pin
0x1D2D	0x3005      	MOVLW      5
0x1D2E	0x00EE      	MOVWF      FARG_Button_time_ms
0x1D2F	0x01EF      	CLRF       FARG_Button_active_state
0x1D30	0x3188      	MOVLP      8
0x1D31	0x24C0      	CALL       _Button
0x1D32	0x3198      	MOVLP      24
0x1D33	0x002B      	MOVLB      11
0x1D34	0x0846      	MOVF       FLOC__get_swr, 0
0x1D35	0x05F0      	ANDWF      R0, 1
0x1D36	0x1903      	BTFSC      STATUS, 2
0x1D37	0x2D3D      	GOTO       L_get_swr63
;main.h,155 :: 		show_reset();
0x1D38	0x23C1      	CALL       _show_reset
;main.h,156 :: 		SWR = 0;
0x1D39	0x002A      	MOVLB      10
0x1D3A	0x01DC      	CLRF       _SWR
0x1D3B	0x01DD      	CLRF       _SWR+1
;main.h,157 :: 		return;
0x1D3C	0x2D3E      	GOTO       L_end_get_swr
;main.h,158 :: 		}
L_get_swr63:
;main.h,159 :: 		} //  good power
0x1D3D	0x2CA5      	GOTO       L_get_swr57
L_get_swr58:
;main.h,160 :: 		return;
;main.h,161 :: 		}
L_end_get_swr:
0x1D3E	0x0008      	RETURN
; end of _get_swr
_Div_16x16_S:
;__Lib_Math.c,474 :: 		
;__Lib_Math.c,482 :: 		
0x1D3F	0x0874      	MOVF       R4, 0
0x1D40	0x3A00      	XORLW      0
0x1D41	0x1D03      	BTFSS      STATUS, 2
0x1D42	0x2D4C      	GOTO       L_Div_16x16_S0
;__Lib_Math.c,483 :: 		
0x1D43	0x0875      	MOVF       R5, 0
0x1D44	0x3A00      	XORLW      0
0x1D45	0x1D03      	BTFSS      STATUS, 2
0x1D46	0x2D4C      	GOTO       L_Div_16x16_S1
;__Lib_Math.c,484 :: 		
0x1D47	0x30FF      	MOVLW      255
0x1D48	0x00F0      	MOVWF      R0
;__Lib_Math.c,485 :: 		
0x1D49	0x307F      	MOVLW      127
0x1D4A	0x00F1      	MOVWF      R1
;__Lib_Math.c,486 :: 		
0x1D4B	0x2DA4      	GOTO       L_end_Div_16x16_S
;__Lib_Math.c,487 :: 		
L_Div_16x16_S1:
L_Div_16x16_S0:
;__Lib_Math.c,490 :: 		
0x1D4C	0x0020      	MOVLB      0
;__Lib_Math.c,491 :: 		
0x1D4D	0x01FD      	CLRF       R13
;__Lib_Math.c,492 :: 		
0x1D4E	0x01F9      	CLRF       R9
;__Lib_Math.c,493 :: 		
0x1D4F	0x01F8      	CLRF       R8
;__Lib_Math.c,494 :: 		
0x1D50	0x0871      	MOVF       R1, 0
;__Lib_Math.c,495 :: 		
0x1D51	0x0470      	IORWF       R0, 0
;__Lib_Math.c,496 :: 		
0x1D52	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,497 :: 		
0x1D53	0x3400      	RETLW      0
;__Lib_Math.c,499 :: 		
0x1D54	0x0871      	MOVF       R1, 0
;__Lib_Math.c,500 :: 		
0x1D55	0x0675      	XORWF      R5, 0
;__Lib_Math.c,501 :: 		
0x1D56	0x00FA      	MOVWF      R10
;__Lib_Math.c,502 :: 		
0x1D57	0x1BFA      	BTFSC      R10, 7
;__Lib_Math.c,503 :: 		
0x1D58	0x09FD      	COMF       R13, 1
;__Lib_Math.c,505 :: 		
0x1D59	0x01FB      	CLRF       R11
;__Lib_Math.c,507 :: 		
0x1D5A	0x1FF5      	BTFSS      R5, 7
;__Lib_Math.c,508 :: 		
0x1D5B	0x2D61      	GOTO       $+6
;__Lib_Math.c,510 :: 		
0x1D5C	0x09F4      	COMF       R4, 1
;__Lib_Math.c,511 :: 		
0x1D5D	0x09F5      	COMF       R5, 1
;__Lib_Math.c,512 :: 		
0x1D5E	0x0AF4      	INCF       R4, 1
;__Lib_Math.c,513 :: 		
0x1D5F	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,514 :: 		
0x1D60	0x0AF5      	INCF       R5, 1
;__Lib_Math.c,516 :: 		
0x1D61	0x1FF1      	BTFSS      R1, 7
;__Lib_Math.c,517 :: 		
0x1D62	0x2D68      	GOTO       $+6
;__Lib_Math.c,519 :: 		
0x1D63	0x09F0      	COMF       R0, 1
;__Lib_Math.c,520 :: 		
0x1D64	0x09F1      	COMF       R1, 1
;__Lib_Math.c,521 :: 		
0x1D65	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,522 :: 		
0x1D66	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,523 :: 		
0x1D67	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,525 :: 		
0x1D68	0x0871      	MOVF       R1, 0
;__Lib_Math.c,526 :: 		
0x1D69	0x0475      	IORWF       R5, 0
;__Lib_Math.c,527 :: 		
0x1D6A	0x00FA      	MOVWF      R10
;__Lib_Math.c,528 :: 		
0x1D6B	0x1BFA      	BTFSC      R10, 7
;__Lib_Math.c,529 :: 		
0x1D6C	0x2D7D      	GOTO       $+17
;__Lib_Math.c,531 :: 		
0x1D6D	0x2395      	CALL       _Div_16x16_S_L
;__Lib_Math.c,533 :: 		
0x1D6E	0x187B      	BTFSC      R11, 0
;__Lib_Math.c,534 :: 		
0x1D6F	0x2D90      	GOTO       $+33
;__Lib_Math.c,536 :: 		
0x1D70	0x1FFD      	BTFSS      R13, 7
;__Lib_Math.c,537 :: 		
0x1D71	0x3400      	RETLW      0
;__Lib_Math.c,539 :: 		
0x1D72	0x09F0      	COMF       R0, 1
;__Lib_Math.c,540 :: 		
0x1D73	0x09F1      	COMF       R1, 1
;__Lib_Math.c,541 :: 		
0x1D74	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,542 :: 		
0x1D75	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,543 :: 		
0x1D76	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,545 :: 		
0x1D77	0x09F8      	COMF       R8, 1
;__Lib_Math.c,546 :: 		
0x1D78	0x09F9      	COMF       R9, 1
;__Lib_Math.c,547 :: 		
0x1D79	0x0AF8      	INCF       R8, 1
;__Lib_Math.c,548 :: 		
0x1D7A	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,549 :: 		
0x1D7B	0x0AF9      	INCF       R9, 1
;__Lib_Math.c,551 :: 		
0x1D7C	0x3400      	RETLW      0
;__Lib_Math.c,553 :: 		
0x1D7D	0x1FF5      	BTFSS      R5, 7
;__Lib_Math.c,554 :: 		
0x1D7E	0x2D8C      	GOTO       $+14
;__Lib_Math.c,555 :: 		
0x1D7F	0x1BF1      	BTFSC      R1, 7
;__Lib_Math.c,556 :: 		
0x1D80	0x2D88      	GOTO       $+8
;__Lib_Math.c,557 :: 		
0x1D81	0x0871      	MOVF       R1, 0
;__Lib_Math.c,558 :: 		
0x1D82	0x00F9      	MOVWF      R9
;__Lib_Math.c,559 :: 		
0x1D83	0x0870      	MOVF       R0, 0
;__Lib_Math.c,560 :: 		
0x1D84	0x00F8      	MOVWF      R8
;__Lib_Math.c,561 :: 		
0x1D85	0x01F1      	CLRF       R1
;__Lib_Math.c,562 :: 		
0x1D86	0x01F0      	CLRF       R0
;__Lib_Math.c,563 :: 		
0x1D87	0x2D70      	GOTO       $-23
;__Lib_Math.c,564 :: 		
0x1D88	0x01F1      	CLRF       R1
;__Lib_Math.c,565 :: 		
0x1D89	0x01F0      	CLRF       R0
;__Lib_Math.c,566 :: 		
0x1D8A	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,567 :: 		
0x1D8B	0x3400      	RETLW      0
;__Lib_Math.c,569 :: 		
0x1D8C	0x09F1      	COMF       R1, 1
;__Lib_Math.c,570 :: 		
0x1D8D	0x09F0      	COMF       R0, 1
;__Lib_Math.c,571 :: 		
0x1D8E	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,572 :: 		
0x1D8F	0x2D6D      	GOTO       $-34
;__Lib_Math.c,574 :: 		
0x1D90	0x0AF8      	INCF       R8, 1
;__Lib_Math.c,575 :: 		
0x1D91	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,576 :: 		
0x1D92	0x0AF9      	INCF       R9, 1
;__Lib_Math.c,577 :: 		
0x1D93	0x0874      	MOVF       R4, 0
;__Lib_Math.c,578 :: 		
0x1D94	0x0278      	SUBWF      R8, 0
;__Lib_Math.c,579 :: 		
0x1D95	0x1D03      	BTFSS      STATUS, 2
;__Lib_Math.c,580 :: 		
0x1D96	0x2D70      	GOTO       $-38
;__Lib_Math.c,581 :: 		
0x1D97	0x0875      	MOVF       R5, 0
;__Lib_Math.c,582 :: 		
0x1D98	0x0279      	SUBWF      R9, 0
;__Lib_Math.c,583 :: 		
0x1D99	0x1D03      	BTFSS      STATUS, 2
;__Lib_Math.c,584 :: 		
0x1D9A	0x2D70      	GOTO       $-42
;__Lib_Math.c,585 :: 		
0x1D9B	0x01F9      	CLRF       R9
;__Lib_Math.c,586 :: 		
0x1D9C	0x01F8      	CLRF       R8
;__Lib_Math.c,587 :: 		
0x1D9D	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,588 :: 		
0x1D9E	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,589 :: 		
0x1D9F	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,590 :: 		
0x1DA0	0x1FF1      	BTFSS      R1, 7
;__Lib_Math.c,591 :: 		
0x1DA1	0x2D70      	GOTO       $-49
;__Lib_Math.c,592 :: 		
0x1DA2	0x0000      	NOP
;__Lib_Math.c,593 :: 		
0x1DA3	0x34FF      	RETLW      255
;__Lib_Math.c,595 :: 		
L_end_Div_16x16_S:
0x1DA4	0x0008      	RETURN
; end of _Div_16x16_S
_coarse_cap:
;main.h,213 :: 		void coarse_cap() {
;main.h,214 :: 		char step = 3;
0x1DA5	0x3003      	MOVLW      3
0x1DA6	0x002B      	MOVLB      11
0x1DA7	0x00C5      	MOVWF      coarse_cap_step_L0
;main.h,218 :: 		cap = 0;
0x1DA8	0x0027      	MOVLB      7
0x1DA9	0x01DB      	CLRF       main_cap
;main.h,219 :: 		set_cap(cap);
0x1DAA	0x002B      	MOVLB      11
0x1DAB	0x01CF      	CLRF       FARG_set_cap_Cap
0x1DAC	0x3188      	MOVLP      8
0x1DAD	0x27A1      	CALL       _set_cap
0x1DAE	0x3198      	MOVLP      24
;main.h,220 :: 		step_cap = step;
0x1DAF	0x002B      	MOVLB      11
0x1DB0	0x0845      	MOVF       coarse_cap_step_L0, 0
0x1DB1	0x0028      	MOVLB      8
0x1DB2	0x00CA      	MOVWF      main_step_cap
;main.h,221 :: 		get_swr(); if(SWR==0) return;
0x1DB3	0x2472      	CALL       _get_swr
0x1DB4	0x3000      	MOVLW      0
0x1DB5	0x002A      	MOVLB      10
0x1DB6	0x065D      	XORWF      _SWR+1, 0
0x1DB7	0x1D03      	BTFSS      STATUS, 2
0x1DB8	0x2DBB      	GOTO       L__coarse_cap627
0x1DB9	0x3000      	MOVLW      0
0x1DBA	0x065C      	XORWF      _SWR, 0
L__coarse_cap627:
0x1DBB	0x1D03      	BTFSS      STATUS, 2
0x1DBC	0x2DBE      	GOTO       L_coarse_cap66
0x1DBD	0x2E6A      	GOTO       L_end_coarse_cap
L_coarse_cap66:
;main.h,222 :: 		min_swr = SWR + SWR/20;
0x1DBE	0x3014      	MOVLW      20
0x1DBF	0x00F4      	MOVWF      R4
0x1DC0	0x3000      	MOVLW      0
0x1DC1	0x00F5      	MOVWF      R5
0x1DC2	0x085C      	MOVF       _SWR, 0
0x1DC3	0x00F0      	MOVWF      R0
0x1DC4	0x085D      	MOVF       _SWR+1, 0
0x1DC5	0x00F1      	MOVWF      R1
0x1DC6	0x253F      	CALL       _Div_16x16_S
0x1DC7	0x0870      	MOVF       R0, 0
0x1DC8	0x002A      	MOVLB      10
0x1DC9	0x075C      	ADDWF      _SWR, 0
0x1DCA	0x002B      	MOVLB      11
0x1DCB	0x00C3      	MOVWF      coarse_cap_min_swr_L0
0x1DCC	0x0871      	MOVF       R1, 0
0x1DCD	0x002A      	MOVLB      10
0x1DCE	0x3D5D      	ADDWFC     _SWR+1, 0
0x1DCF	0x002B      	MOVLB      11
0x1DD0	0x00C4      	MOVWF      coarse_cap_min_swr_L0+1
;main.h,223 :: 		for(count=step; count<=31;) {
0x1DD1	0x0845      	MOVF       coarse_cap_step_L0, 0
0x1DD2	0x00C2      	MOVWF      coarse_cap_count_L0
L_coarse_cap67:
0x1DD3	0x002B      	MOVLB      11
0x1DD4	0x0842      	MOVF       coarse_cap_count_L0, 0
0x1DD5	0x3C1F      	SUBLW      31
0x1DD6	0x1C03      	BTFSS      STATUS, 0
0x1DD7	0x2E63      	GOTO       L_coarse_cap68
;main.h,224 :: 		set_cap(count*C_mult);
0x1DD8	0x0842      	MOVF       coarse_cap_count_L0, 0
0x1DD9	0x00F0      	MOVWF      R0
0x1DDA	0x0028      	MOVLB      8
0x1DDB	0x0849      	MOVF       main_C_mult, 0
0x1DDC	0x00F4      	MOVWF      R4
0x1DDD	0x3180      	MOVLP      0
0x1DDE	0x205D      	CALL       _Mul_8x8_U
0x1DDF	0x3198      	MOVLP      24
0x1DE0	0x0870      	MOVF       R0, 0
0x1DE1	0x002B      	MOVLB      11
0x1DE2	0x00CF      	MOVWF      FARG_set_cap_Cap
0x1DE3	0x3188      	MOVLP      8
0x1DE4	0x27A1      	CALL       _set_cap
0x1DE5	0x3198      	MOVLP      24
;main.h,225 :: 		get_swr(); if(SWR==0) return;
0x1DE6	0x2472      	CALL       _get_swr
0x1DE7	0x3000      	MOVLW      0
0x1DE8	0x002A      	MOVLB      10
0x1DE9	0x065D      	XORWF      _SWR+1, 0
0x1DEA	0x1D03      	BTFSS      STATUS, 2
0x1DEB	0x2DEE      	GOTO       L__coarse_cap628
0x1DEC	0x3000      	MOVLW      0
0x1DED	0x065C      	XORWF      _SWR, 0
L__coarse_cap628:
0x1DEE	0x1D03      	BTFSS      STATUS, 2
0x1DEF	0x2DF1      	GOTO       L_coarse_cap70
0x1DF0	0x2E6A      	GOTO       L_end_coarse_cap
L_coarse_cap70:
;main.h,226 :: 		if(SWR < min_swr) {
0x1DF1	0x3080      	MOVLW      128
0x1DF2	0x065D      	XORWF      _SWR+1, 0
0x1DF3	0x00F0      	MOVWF      R0
0x1DF4	0x3080      	MOVLW      128
0x1DF5	0x002B      	MOVLB      11
0x1DF6	0x0644      	XORWF      coarse_cap_min_swr_L0+1, 0
0x1DF7	0x0270      	SUBWF      R0, 0
0x1DF8	0x1D03      	BTFSS      STATUS, 2
0x1DF9	0x2DFD      	GOTO       L__coarse_cap629
0x1DFA	0x0843      	MOVF       coarse_cap_min_swr_L0, 0
0x1DFB	0x002A      	MOVLB      10
0x1DFC	0x025C      	SUBWF      _SWR, 0
L__coarse_cap629:
0x1DFD	0x1803      	BTFSC      STATUS, 0
0x1DFE	0x2E61      	GOTO       L_coarse_cap71
;main.h,227 :: 		min_swr = SWR + SWR/20;
0x1DFF	0x002A      	MOVLB      10
0x1E00	0x3014      	MOVLW      20
0x1E01	0x00F4      	MOVWF      R4
0x1E02	0x3000      	MOVLW      0
0x1E03	0x00F5      	MOVWF      R5
0x1E04	0x085C      	MOVF       _SWR, 0
0x1E05	0x00F0      	MOVWF      R0
0x1E06	0x085D      	MOVF       _SWR+1, 0
0x1E07	0x00F1      	MOVWF      R1
0x1E08	0x253F      	CALL       _Div_16x16_S
0x1E09	0x0870      	MOVF       R0, 0
0x1E0A	0x002A      	MOVLB      10
0x1E0B	0x075C      	ADDWF      _SWR, 0
0x1E0C	0x002B      	MOVLB      11
0x1E0D	0x00C3      	MOVWF      coarse_cap_min_swr_L0
0x1E0E	0x0871      	MOVF       R1, 0
0x1E0F	0x002A      	MOVLB      10
0x1E10	0x3D5D      	ADDWFC     _SWR+1, 0
0x1E11	0x002B      	MOVLB      11
0x1E12	0x00C4      	MOVWF      coarse_cap_min_swr_L0+1
;main.h,228 :: 		cap = count*C_mult;
0x1E13	0x0842      	MOVF       coarse_cap_count_L0, 0
0x1E14	0x00F0      	MOVWF      R0
0x1E15	0x0028      	MOVLB      8
0x1E16	0x0849      	MOVF       main_C_mult, 0
0x1E17	0x00F4      	MOVWF      R4
0x1E18	0x3180      	MOVLP      0
0x1E19	0x205D      	CALL       _Mul_8x8_U
0x1E1A	0x3198      	MOVLP      24
0x1E1B	0x0870      	MOVF       R0, 0
0x1E1C	0x0027      	MOVLB      7
0x1E1D	0x00DB      	MOVWF      main_cap
;main.h,229 :: 		step_cap = step;
0x1E1E	0x002B      	MOVLB      11
0x1E1F	0x0845      	MOVF       coarse_cap_step_L0, 0
0x1E20	0x0028      	MOVLB      8
0x1E21	0x00CA      	MOVWF      main_step_cap
;main.h,230 :: 		if(SWR<120) break;
0x1E22	0x3080      	MOVLW      128
0x1E23	0x002A      	MOVLB      10
0x1E24	0x065D      	XORWF      _SWR+1, 0
0x1E25	0x00F0      	MOVWF      R0
0x1E26	0x3080      	MOVLW      128
0x1E27	0x0270      	SUBWF      R0, 0
0x1E28	0x1D03      	BTFSS      STATUS, 2
0x1E29	0x2E2C      	GOTO       L__coarse_cap630
0x1E2A	0x3078      	MOVLW      120
0x1E2B	0x025C      	SUBWF      _SWR, 0
L__coarse_cap630:
0x1E2C	0x1803      	BTFSC      STATUS, 0
0x1E2D	0x2E2F      	GOTO       L_coarse_cap72
0x1E2E	0x2E63      	GOTO       L_coarse_cap68
L_coarse_cap72:
;main.h,231 :: 		count +=step;
0x1E2F	0x002B      	MOVLB      11
0x1E30	0x0845      	MOVF       coarse_cap_step_L0, 0
0x1E31	0x0742      	ADDWF      coarse_cap_count_L0, 0
0x1E32	0x00F2      	MOVWF      R2
0x1E33	0x0872      	MOVF       R2, 0
0x1E34	0x00C2      	MOVWF      coarse_cap_count_L0
;main.h,232 :: 		if(C_linear==0 & count==9) count = 8;
0x1E35	0x0027      	MOVLB      7
0x1E36	0x084A      	MOVF       main_C_linear, 0
0x1E37	0x3A00      	XORLW      0
0x1E38	0x3001      	MOVLW      1
0x1E39	0x1D03      	BTFSS      STATUS, 2
0x1E3A	0x3000      	MOVLW      0
0x1E3B	0x00F1      	MOVWF      R1
0x1E3C	0x0872      	MOVF       R2, 0
0x1E3D	0x3A09      	XORLW      9
0x1E3E	0x3001      	MOVLW      1
0x1E3F	0x1D03      	BTFSS      STATUS, 2
0x1E40	0x3000      	MOVLW      0
0x1E41	0x00F0      	MOVWF      R0
0x1E42	0x0871      	MOVF       R1, 0
0x1E43	0x05F0      	ANDWF      R0, 1
0x1E44	0x1903      	BTFSC      STATUS, 2
0x1E45	0x2E4A      	GOTO       L_coarse_cap73
0x1E46	0x3008      	MOVLW      8
0x1E47	0x002B      	MOVLB      11
0x1E48	0x00C2      	MOVWF      coarse_cap_count_L0
0x1E49	0x2E60      	GOTO       L_coarse_cap74
L_coarse_cap73:
;main.h,233 :: 		else if(C_linear==0 & count==17) {count = 16; step = 4;}
0x1E4A	0x0027      	MOVLB      7
0x1E4B	0x084A      	MOVF       main_C_linear, 0
0x1E4C	0x3A00      	XORLW      0
0x1E4D	0x3001      	MOVLW      1
0x1E4E	0x1D03      	BTFSS      STATUS, 2
0x1E4F	0x3000      	MOVLW      0
0x1E50	0x00F1      	MOVWF      R1
0x1E51	0x002B      	MOVLB      11
0x1E52	0x0842      	MOVF       coarse_cap_count_L0, 0
0x1E53	0x3A11      	XORLW      17
0x1E54	0x3001      	MOVLW      1
0x1E55	0x1D03      	BTFSS      STATUS, 2
0x1E56	0x3000      	MOVLW      0
0x1E57	0x00F0      	MOVWF      R0
0x1E58	0x0871      	MOVF       R1, 0
0x1E59	0x05F0      	ANDWF      R0, 1
0x1E5A	0x1903      	BTFSC      STATUS, 2
0x1E5B	0x2E60      	GOTO       L_coarse_cap75
0x1E5C	0x3010      	MOVLW      16
0x1E5D	0x00C2      	MOVWF      coarse_cap_count_L0
0x1E5E	0x3004      	MOVLW      4
0x1E5F	0x00C5      	MOVWF      coarse_cap_step_L0
L_coarse_cap75:
L_coarse_cap74:
;main.h,234 :: 		}
0x1E60	0x2E62      	GOTO       L_coarse_cap76
L_coarse_cap71:
;main.h,235 :: 		else break;
0x1E61	0x2E63      	GOTO       L_coarse_cap68
L_coarse_cap76:
;main.h,236 :: 		}
0x1E62	0x2DD3      	GOTO       L_coarse_cap67
L_coarse_cap68:
;main.h,237 :: 		set_cap(cap);
0x1E63	0x0027      	MOVLB      7
0x1E64	0x085B      	MOVF       main_cap, 0
0x1E65	0x002B      	MOVLB      11
0x1E66	0x00CF      	MOVWF      FARG_set_cap_Cap
0x1E67	0x3188      	MOVLP      8
0x1E68	0x27A1      	CALL       _set_cap
0x1E69	0x3198      	MOVLP      24
;main.h,238 :: 		return;
;main.h,239 :: 		}
L_end_coarse_cap:
0x1E6A	0x0008      	RETURN
; end of _coarse_cap
_coarse_tune:
;main.h,241 :: 		void coarse_tune() {
;main.h,242 :: 		char step = 3;
0x1E6B	0x3003      	MOVLW      3
0x1E6C	0x002B      	MOVLB      11
0x1E6D	0x00C1      	MOVWF      coarse_tune_step_L0
;main.h,247 :: 		mem_cap = 0;
0x1E6E	0x01BD      	CLRF       coarse_tune_mem_cap_L0
;main.h,248 :: 		step_ind = step;
0x1E6F	0x0841      	MOVF       coarse_tune_step_L0, 0
0x1E70	0x0021      	MOVLB      1
0x1E71	0x00E9      	MOVWF      main_step_ind
;main.h,249 :: 		mem_step_cap = 3;
0x1E72	0x3003      	MOVLW      3
0x1E73	0x002B      	MOVLB      11
0x1E74	0x00BE      	MOVWF      coarse_tune_mem_step_cap_L0
;main.h,250 :: 		min_swr = SWR + SWR/20;
0x1E75	0x3014      	MOVLW      20
0x1E76	0x00F4      	MOVWF      R4
0x1E77	0x3000      	MOVLW      0
0x1E78	0x00F5      	MOVWF      R5
0x1E79	0x002A      	MOVLB      10
0x1E7A	0x085C      	MOVF       _SWR, 0
0x1E7B	0x00F0      	MOVWF      R0
0x1E7C	0x085D      	MOVF       _SWR+1, 0
0x1E7D	0x00F1      	MOVWF      R1
0x1E7E	0x253F      	CALL       _Div_16x16_S
0x1E7F	0x0870      	MOVF       R0, 0
0x1E80	0x002A      	MOVLB      10
0x1E81	0x075C      	ADDWF      _SWR, 0
0x1E82	0x002B      	MOVLB      11
0x1E83	0x00BF      	MOVWF      coarse_tune_min_swr_L0
0x1E84	0x0871      	MOVF       R1, 0
0x1E85	0x002A      	MOVLB      10
0x1E86	0x3D5D      	ADDWFC     _SWR+1, 0
0x1E87	0x002B      	MOVLB      11
0x1E88	0x00C0      	MOVWF      coarse_tune_min_swr_L0+1
;main.h,251 :: 		for(count=0; count<=31;) {
0x1E89	0x01BC      	CLRF       coarse_tune_count_L0
L_coarse_tune77:
0x1E8A	0x002B      	MOVLB      11
0x1E8B	0x083C      	MOVF       coarse_tune_count_L0, 0
0x1E8C	0x3C1F      	SUBLW      31
0x1E8D	0x1C03      	BTFSS      STATUS, 0
0x1E8E	0x2F22      	GOTO       L_coarse_tune78
;main.h,252 :: 		set_ind(count*L_mult);
0x1E8F	0x083C      	MOVF       coarse_tune_count_L0, 0
0x1E90	0x00F0      	MOVWF      R0
0x1E91	0x0021      	MOVLB      1
0x1E92	0x086F      	MOVF       main_L_mult, 0
0x1E93	0x00F4      	MOVWF      R4
0x1E94	0x3180      	MOVLP      0
0x1E95	0x205D      	CALL       _Mul_8x8_U
0x1E96	0x3198      	MOVLP      24
0x1E97	0x0870      	MOVF       R0, 0
0x1E98	0x002B      	MOVLB      11
0x1E99	0x00CF      	MOVWF      FARG_set_ind_Ind
0x1E9A	0x3188      	MOVLP      8
0x1E9B	0x2700      	CALL       _set_ind
0x1E9C	0x3198      	MOVLP      24
;main.h,253 :: 		coarse_cap();
0x1E9D	0x25A5      	CALL       _coarse_cap
;main.h,254 :: 		get_swr();  if(SWR==0) return;
0x1E9E	0x2472      	CALL       _get_swr
0x1E9F	0x3000      	MOVLW      0
0x1EA0	0x002A      	MOVLB      10
0x1EA1	0x065D      	XORWF      _SWR+1, 0
0x1EA2	0x1D03      	BTFSS      STATUS, 2
0x1EA3	0x2EA6      	GOTO       L__coarse_tune632
0x1EA4	0x3000      	MOVLW      0
0x1EA5	0x065C      	XORWF      _SWR, 0
L__coarse_tune632:
0x1EA6	0x1D03      	BTFSS      STATUS, 2
0x1EA7	0x2EA9      	GOTO       L_coarse_tune80
0x1EA8	0x2F42      	GOTO       L_end_coarse_tune
L_coarse_tune80:
;main.h,255 :: 		if(SWR < min_swr) {
0x1EA9	0x3080      	MOVLW      128
0x1EAA	0x065D      	XORWF      _SWR+1, 0
0x1EAB	0x00F0      	MOVWF      R0
0x1EAC	0x3080      	MOVLW      128
0x1EAD	0x002B      	MOVLB      11
0x1EAE	0x0640      	XORWF      coarse_tune_min_swr_L0+1, 0
0x1EAF	0x0270      	SUBWF      R0, 0
0x1EB0	0x1D03      	BTFSS      STATUS, 2
0x1EB1	0x2EB5      	GOTO       L__coarse_tune633
0x1EB2	0x083F      	MOVF       coarse_tune_min_swr_L0, 0
0x1EB3	0x002A      	MOVLB      10
0x1EB4	0x025C      	SUBWF      _SWR, 0
L__coarse_tune633:
0x1EB5	0x1803      	BTFSC      STATUS, 0
0x1EB6	0x2F20      	GOTO       L_coarse_tune81
;main.h,256 :: 		min_swr = SWR + SWR/20;
0x1EB7	0x002A      	MOVLB      10
0x1EB8	0x3014      	MOVLW      20
0x1EB9	0x00F4      	MOVWF      R4
0x1EBA	0x3000      	MOVLW      0
0x1EBB	0x00F5      	MOVWF      R5
0x1EBC	0x085C      	MOVF       _SWR, 0
0x1EBD	0x00F0      	MOVWF      R0
0x1EBE	0x085D      	MOVF       _SWR+1, 0
0x1EBF	0x00F1      	MOVWF      R1
0x1EC0	0x253F      	CALL       _Div_16x16_S
0x1EC1	0x0870      	MOVF       R0, 0
0x1EC2	0x002A      	MOVLB      10
0x1EC3	0x075C      	ADDWF      _SWR, 0
0x1EC4	0x002B      	MOVLB      11
0x1EC5	0x00BF      	MOVWF      coarse_tune_min_swr_L0
0x1EC6	0x0871      	MOVF       R1, 0
0x1EC7	0x002A      	MOVLB      10
0x1EC8	0x3D5D      	ADDWFC     _SWR+1, 0
0x1EC9	0x002B      	MOVLB      11
0x1ECA	0x00C0      	MOVWF      coarse_tune_min_swr_L0+1
;main.h,257 :: 		ind = count*L_mult;
0x1ECB	0x083C      	MOVF       coarse_tune_count_L0, 0
0x1ECC	0x00F0      	MOVWF      R0
0x1ECD	0x0021      	MOVLB      1
0x1ECE	0x086F      	MOVF       main_L_mult, 0
0x1ECF	0x00F4      	MOVWF      R4
0x1ED0	0x3180      	MOVLP      0
0x1ED1	0x205D      	CALL       _Mul_8x8_U
0x1ED2	0x3198      	MOVLP      24
0x1ED3	0x0870      	MOVF       R0, 0
0x1ED4	0x0028      	MOVLB      8
0x1ED5	0x00B1      	MOVWF      main_ind
;main.h,258 :: 		mem_cap = cap;
0x1ED6	0x0027      	MOVLB      7
0x1ED7	0x085B      	MOVF       main_cap, 0
0x1ED8	0x002B      	MOVLB      11
0x1ED9	0x00BD      	MOVWF      coarse_tune_mem_cap_L0
;main.h,259 :: 		step_ind = step;
0x1EDA	0x0841      	MOVF       coarse_tune_step_L0, 0
0x1EDB	0x0021      	MOVLB      1
0x1EDC	0x00E9      	MOVWF      main_step_ind
;main.h,260 :: 		mem_step_cap = step_cap;
0x1EDD	0x0028      	MOVLB      8
0x1EDE	0x084A      	MOVF       main_step_cap, 0
0x1EDF	0x002B      	MOVLB      11
0x1EE0	0x00BE      	MOVWF      coarse_tune_mem_step_cap_L0
;main.h,261 :: 		if(SWR<120) break;
0x1EE1	0x3080      	MOVLW      128
0x1EE2	0x002A      	MOVLB      10
0x1EE3	0x065D      	XORWF      _SWR+1, 0
0x1EE4	0x00F0      	MOVWF      R0
0x1EE5	0x3080      	MOVLW      128
0x1EE6	0x0270      	SUBWF      R0, 0
0x1EE7	0x1D03      	BTFSS      STATUS, 2
0x1EE8	0x2EEB      	GOTO       L__coarse_tune634
0x1EE9	0x3078      	MOVLW      120
0x1EEA	0x025C      	SUBWF      _SWR, 0
L__coarse_tune634:
0x1EEB	0x1803      	BTFSC      STATUS, 0
0x1EEC	0x2EEE      	GOTO       L_coarse_tune82
0x1EED	0x2F22      	GOTO       L_coarse_tune78
L_coarse_tune82:
;main.h,262 :: 		count +=step;
0x1EEE	0x002B      	MOVLB      11
0x1EEF	0x0841      	MOVF       coarse_tune_step_L0, 0
0x1EF0	0x073C      	ADDWF      coarse_tune_count_L0, 0
0x1EF1	0x00F2      	MOVWF      R2
0x1EF2	0x0872      	MOVF       R2, 0
0x1EF3	0x00BC      	MOVWF      coarse_tune_count_L0
;main.h,263 :: 		if(L_linear==0 & count==9) count = 8;
0x1EF4	0x0027      	MOVLB      7
0x1EF5	0x082B      	MOVF       main_L_linear, 0
0x1EF6	0x3A00      	XORLW      0
0x1EF7	0x3001      	MOVLW      1
0x1EF8	0x1D03      	BTFSS      STATUS, 2
0x1EF9	0x3000      	MOVLW      0
0x1EFA	0x00F1      	MOVWF      R1
0x1EFB	0x0872      	MOVF       R2, 0
0x1EFC	0x3A09      	XORLW      9
0x1EFD	0x3001      	MOVLW      1
0x1EFE	0x1D03      	BTFSS      STATUS, 2
0x1EFF	0x3000      	MOVLW      0
0x1F00	0x00F0      	MOVWF      R0
0x1F01	0x0871      	MOVF       R1, 0
0x1F02	0x05F0      	ANDWF      R0, 1
0x1F03	0x1903      	BTFSC      STATUS, 2
0x1F04	0x2F09      	GOTO       L_coarse_tune83
0x1F05	0x3008      	MOVLW      8
0x1F06	0x002B      	MOVLB      11
0x1F07	0x00BC      	MOVWF      coarse_tune_count_L0
0x1F08	0x2F1F      	GOTO       L_coarse_tune84
L_coarse_tune83:
;main.h,264 :: 		else if(L_linear==0 & count==17) {count = 16; step = 4;}
0x1F09	0x0027      	MOVLB      7
0x1F0A	0x082B      	MOVF       main_L_linear, 0
0x1F0B	0x3A00      	XORLW      0
0x1F0C	0x3001      	MOVLW      1
0x1F0D	0x1D03      	BTFSS      STATUS, 2
0x1F0E	0x3000      	MOVLW      0
0x1F0F	0x00F1      	MOVWF      R1
0x1F10	0x002B      	MOVLB      11
0x1F11	0x083C      	MOVF       coarse_tune_count_L0, 0
0x1F12	0x3A11      	XORLW      17
0x1F13	0x3001      	MOVLW      1
0x1F14	0x1D03      	BTFSS      STATUS, 2
0x1F15	0x3000      	MOVLW      0
0x1F16	0x00F0      	MOVWF      R0
0x1F17	0x0871      	MOVF       R1, 0
0x1F18	0x05F0      	ANDWF      R0, 1
0x1F19	0x1903      	BTFSC      STATUS, 2
0x1F1A	0x2F1F      	GOTO       L_coarse_tune85
0x1F1B	0x3010      	MOVLW      16
0x1F1C	0x00BC      	MOVWF      coarse_tune_count_L0
0x1F1D	0x3004      	MOVLW      4
0x1F1E	0x00C1      	MOVWF      coarse_tune_step_L0
L_coarse_tune85:
L_coarse_tune84:
;main.h,265 :: 		}
0x1F1F	0x2F21      	GOTO       L_coarse_tune86
L_coarse_tune81:
;main.h,266 :: 		else break;
0x1F20	0x2F22      	GOTO       L_coarse_tune78
L_coarse_tune86:
;main.h,267 :: 		}
0x1F21	0x2E8A      	GOTO       L_coarse_tune77
L_coarse_tune78:
0x1F22	0x002B      	MOVLB      11
;main.h,268 :: 		cap = mem_cap;
0x1F23	0x083D      	MOVF       coarse_tune_mem_cap_L0, 0
0x1F24	0x0027      	MOVLB      7
0x1F25	0x00DB      	MOVWF      main_cap
;main.h,269 :: 		set_ind(ind);
0x1F26	0x0028      	MOVLB      8
0x1F27	0x0831      	MOVF       main_ind, 0
0x1F28	0x002B      	MOVLB      11
0x1F29	0x00CF      	MOVWF      FARG_set_ind_Ind
0x1F2A	0x3188      	MOVLP      8
0x1F2B	0x2700      	CALL       _set_ind
0x1F2C	0x3198      	MOVLP      24
;main.h,270 :: 		set_cap(cap);
0x1F2D	0x0027      	MOVLB      7
0x1F2E	0x085B      	MOVF       main_cap, 0
0x1F2F	0x002B      	MOVLB      11
0x1F30	0x00CF      	MOVWF      FARG_set_cap_Cap
0x1F31	0x3188      	MOVLP      8
0x1F32	0x27A1      	CALL       _set_cap
0x1F33	0x3198      	MOVLP      24
;main.h,271 :: 		step_cap = mem_step_cap;
0x1F34	0x002B      	MOVLB      11
0x1F35	0x083E      	MOVF       coarse_tune_mem_step_cap_L0, 0
0x1F36	0x0028      	MOVLB      8
0x1F37	0x00CA      	MOVWF      main_step_cap
;main.h,272 :: 		Delay_ms(10);
0x1F38	0x3034      	MOVLW      52
0x1F39	0x00FC      	MOVWF      R12
0x1F3A	0x30F1      	MOVLW      241
0x1F3B	0x00FD      	MOVWF      R13
L_coarse_tune87:
0x1F3C	0x0BFD      	DECFSZ     R13, 1
0x1F3D	0x2F3C      	GOTO       L_coarse_tune87
0x1F3E	0x0BFC      	DECFSZ     R12, 1
0x1F3F	0x2F3C      	GOTO       L_coarse_tune87
0x1F40	0x0000      	NOP
0x1F41	0x0000      	NOP
;main.h,273 :: 		return;
;main.h,274 :: 		}
L_end_coarse_tune:
0x1F42	0x0008      	RETURN
; end of _coarse_tune
_Dec2Bcd:
;__Lib_Conversions.c,304 :: 		
;__Lib_Conversions.c,305 :: 		
0x1F43	0x002B      	MOVLB      11
0x1F44	0x01B5      	CLRF       Dec2Bcd_tmp_L0
;__Lib_Conversions.c,307 :: 		
0x1F45	0x0834      	MOVF       FARG_Dec2Bcd_decnum, 0
0x1F46	0x3C09      	SUBLW      9
0x1F47	0x1803      	BTFSC      STATUS, 0
0x1F48	0x2F66      	GOTO       L_Dec2Bcd64
;__Lib_Conversions.c,308 :: 		
0x1F49	0x300A      	MOVLW      10
0x1F4A	0x00F4      	MOVWF      R4
0x1F4B	0x0834      	MOVF       FARG_Dec2Bcd_decnum, 0
0x1F4C	0x00F0      	MOVWF      R0
0x1F4D	0x3190      	MOVLP      16
0x1F4E	0x27E5      	CALL       _Div_8x8_U
0x1F4F	0x3198      	MOVLP      24
0x1F50	0x0870      	MOVF       R0, 0
0x1F51	0x002B      	MOVLB      11
0x1F52	0x00B5      	MOVWF      Dec2Bcd_tmp_L0
;__Lib_Conversions.c,309 :: 		
0x1F53	0x0870      	MOVF       R0, 0
0x1F54	0x00B5      	MOVWF      Dec2Bcd_tmp_L0
0x1F55	0x35B5      	LSLF       Dec2Bcd_tmp_L0, 1
0x1F56	0x35B5      	LSLF       Dec2Bcd_tmp_L0, 1
0x1F57	0x35B5      	LSLF       Dec2Bcd_tmp_L0, 1
0x1F58	0x35B5      	LSLF       Dec2Bcd_tmp_L0, 1
;__Lib_Conversions.c,310 :: 		
0x1F59	0x300A      	MOVLW      10
0x1F5A	0x00F4      	MOVWF      R4
0x1F5B	0x0834      	MOVF       FARG_Dec2Bcd_decnum, 0
0x1F5C	0x00F0      	MOVWF      R0
0x1F5D	0x3190      	MOVLP      16
0x1F5E	0x27E5      	CALL       _Div_8x8_U
0x1F5F	0x3198      	MOVLP      24
0x1F60	0x0878      	MOVF       R8, 0
0x1F61	0x00F0      	MOVWF      R0
0x1F62	0x0870      	MOVF       R0, 0
0x1F63	0x002B      	MOVLB      11
0x1F64	0x04B5      	IORWF       Dec2Bcd_tmp_L0, 1
;__Lib_Conversions.c,311 :: 		
0x1F65	0x2F68      	GOTO       L_Dec2Bcd65
L_Dec2Bcd64:
;__Lib_Conversions.c,312 :: 		
0x1F66	0x0834      	MOVF       FARG_Dec2Bcd_decnum, 0
0x1F67	0x00B5      	MOVWF      Dec2Bcd_tmp_L0
L_Dec2Bcd65:
;__Lib_Conversions.c,313 :: 		
0x1F68	0x0835      	MOVF       Dec2Bcd_tmp_L0, 0
0x1F69	0x00F0      	MOVWF      R0
;__Lib_Conversions.c,314 :: 		
L_end_Dec2Bcd:
0x1F6A	0x0008      	RETURN
; end of _Dec2Bcd
_Bcd2Dec:
;__Lib_Conversions.c,319 :: 		
;__Lib_Conversions.c,320 :: 		
;__Lib_Conversions.c,322 :: 		
0x1F6B	0x002B      	MOVLB      11
0x1F6C	0x0829      	MOVF       FARG_Bcd2Dec_bcdnum, 0
0x1F6D	0x00F0      	MOVWF      R0
0x1F6E	0x36F0      	LSRF       R0, 1
0x1F6F	0x36F0      	LSRF       R0, 1
0x1F70	0x36F0      	LSRF       R0, 1
0x1F71	0x36F0      	LSRF       R0, 1
0x1F72	0x300A      	MOVLW      10
0x1F73	0x00F4      	MOVWF      R4
0x1F74	0x3180      	MOVLP      0
0x1F75	0x205D      	CALL       _Mul_8x8_U
0x1F76	0x3198      	MOVLP      24
;__Lib_Conversions.c,323 :: 		
0x1F77	0x300F      	MOVLW      15
0x1F78	0x002B      	MOVLB      11
0x1F79	0x0529      	ANDWF      FARG_Bcd2Dec_bcdnum, 0
0x1F7A	0x00F1      	MOVWF      R1
0x1F7B	0x0871      	MOVF       R1, 0
0x1F7C	0x07F0      	ADDWF      R0, 1
;__Lib_Conversions.c,324 :: 		
;__Lib_Conversions.c,325 :: 		
L_end_Bcd2Dec:
0x1F7D	0x0008      	RETURN
; end of _Bcd2Dec
_ADC_Init:
;__Lib_ADC.c,19 :: 		
;__Lib_ADC.c,20 :: 		
0x1F7E	0x30FD      	MOVLW      _ADC_Get_Sample
0x1F7F	0x002A      	MOVLB      10
0x1F80	0x00B3      	MOVWF      _ADC_Get_Sample_Ptr
0x1F81	0x3005      	MOVLW      hi_addr(_ADC_Get_Sample)
0x1F82	0x00B4      	MOVWF      _ADC_Get_Sample_Ptr+1
0x1F83	0x3024      	MOVLW      FARG_ADC_Get_Sample_channel
0x1F84	0x00B5      	MOVWF      _ADC_Get_Sample_Ptr+2
0x1F85	0x3006      	MOVLW      hi_addr(FARG_ADC_Get_Sample_channel)
0x1F86	0x00B6      	MOVWF      _ADC_Get_Sample_Ptr+3
;__Lib_ADC.c,21 :: 		
0x1F87	0x30F0      	MOVLW      240
0x1F88	0x0021      	MOVLB      1
0x1F89	0x009E      	MOVWF      ADCON1
;__Lib_ADC.c,22 :: 		
0x1F8A	0x019D      	CLRF       ADCON0
;__Lib_ADC.c,23 :: 		
0x1F8B	0x141D      	BSF        ADON_bit, BitPos(ADON_bit+0)
;__Lib_ADC.c,24 :: 		
L_end_ADC_Init:
0x1F8C	0x0008      	RETURN
; end of _ADC_Init
_Soft_I2C_Init:
;oled_control.c,346 :: 		void Soft_I2C_Init () {
;oled_control.c,347 :: 		led_addr = EEPROM_read(0);   //  4E,7E for 1602   or 78, 7A for OLED
0x1F8D	0x002B      	MOVLB      11
0x1F8E	0x01A9      	CLRF       FARG_EEPROM_Read_Address
0x1F8F	0x3190      	MOVLP      16
0x1F90	0x27F5      	CALL       _EEPROM_Read
0x1F91	0x3198      	MOVLP      24
0x1F92	0x0870      	MOVF       R0, 0
0x1F93	0x002A      	MOVLB      10
0x1F94	0x00BA      	MOVWF      oled_control_led_addr
;oled_control.c,348 :: 		led_type = EEPROM_read(1);
0x1F95	0x3001      	MOVLW      1
0x1F96	0x002B      	MOVLB      11
0x1F97	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x1F98	0x3190      	MOVLP      16
0x1F99	0x27F5      	CALL       _EEPROM_Read
0x1F9A	0x3198      	MOVLP      24
0x1F9B	0x0870      	MOVF       R0, 0
0x1F9C	0x002A      	MOVLB      10
0x1F9D	0x00BB      	MOVWF      oled_control_led_type
;oled_control.c,349 :: 		if(led_type==0) {
0x1F9E	0x0870      	MOVF       R0, 0
0x1F9F	0x3A00      	XORLW      0
0x1FA0	0x1D03      	BTFSS      STATUS, 2
0x1FA1	0x2FA9      	GOTO       L_Soft_I2C_Init72
;oled_control.c,350 :: 		Soft_I2C_Scl_Direction = 0;
0x1FA2	0x0021      	MOVLB      1
0x1FA3	0x130D      	BCF        TRISB6_bit, BitPos(TRISB6_bit+0)
;oled_control.c,351 :: 		Soft_I2C_Sda_Direction = 0;
0x1FA4	0x138D      	BCF        TRISB7_bit, BitPos(TRISB7_bit+0)
;oled_control.c,352 :: 		LATB.B6 = 1;
0x1FA5	0x0022      	MOVLB      2
0x1FA6	0x170D      	BSF        LATB, 6
;oled_control.c,353 :: 		LATB.B7 = 1;
0x1FA7	0x178D      	BSF        LATB, 7
;oled_control.c,354 :: 		}
0x1FA8	0x2FAF      	GOTO       L_Soft_I2C_Init73
L_Soft_I2C_Init72:
;oled_control.c,356 :: 		Soft_I2C_Scl_Direction = 1;
0x1FA9	0x0021      	MOVLB      1
0x1FAA	0x170D      	BSF        TRISB6_bit, BitPos(TRISB6_bit+0)
;oled_control.c,357 :: 		Soft_I2C_Sda_Direction = 1;
0x1FAB	0x178D      	BSF        TRISB7_bit, BitPos(TRISB7_bit+0)
;oled_control.c,358 :: 		Soft_I2C_Scl = 0;
0x1FAC	0x0022      	MOVLB      2
0x1FAD	0x130D      	BCF        LATB6_bit, BitPos(LATB6_bit+0)
;oled_control.c,359 :: 		Soft_I2C_Sda = 0;
0x1FAE	0x138D      	BCF        LATB7_bit, BitPos(LATB7_bit+0)
;oled_control.c,360 :: 		}
L_Soft_I2C_Init73:
;oled_control.c,361 :: 		}
L_end_Soft_I2C_Init:
0x1FAF	0x0008      	RETURN
; end of _Soft_I2C_Init
_dysp_off:
;oled_control.c,73 :: 		void dysp_off() {
;oled_control.c,74 :: 		if(led_type > 1) send_command(0xAE); // display OFF
0x1FB0	0x002A      	MOVLB      10
0x1FB1	0x083B      	MOVF       oled_control_led_type, 0
0x1FB2	0x3C01      	SUBLW      1
0x1FB3	0x1803      	BTFSC      STATUS, 0
0x1FB4	0x2FBC      	GOTO       L_dysp_off15
0x1FB5	0x30AE      	MOVLW      174
0x1FB6	0x002B      	MOVLB      11
0x1FB7	0x00EB      	MOVWF      FARG_send_command_oled_command
0x1FB8	0x3180      	MOVLP      0
0x1FB9	0x274C      	CALL       _send_command
0x1FBA	0x3198      	MOVLP      24
0x1FBB	0x2FCD      	GOTO       L_dysp_off16
L_dysp_off15:
;oled_control.c,75 :: 		else if(led_type==1) {
0x1FBC	0x002A      	MOVLB      10
0x1FBD	0x083B      	MOVF       oled_control_led_type, 0
0x1FBE	0x3A01      	XORLW      1
0x1FBF	0x1D03      	BTFSS      STATUS, 2
0x1FC0	0x2FCD      	GOTO       L_dysp_off17
;oled_control.c,76 :: 		LED = 0;
0x1FC1	0x01B2      	CLRF       oled_control_LED
;oled_control.c,77 :: 		RS = 0;
0x1FC2	0x01B8      	CLRF       oled_control_RS
;oled_control.c,78 :: 		led_send(0);
0x1FC3	0x002C      	MOVLB      12
0x1FC4	0x01AE      	CLRF       FARG_led_send_nible
0x1FC5	0x3180      	MOVLP      0
0x1FC6	0x22C1      	CALL       _led_send
0x1FC7	0x3198      	MOVLP      24
;oled_control.c,79 :: 		led_send(0);
0x1FC8	0x002C      	MOVLB      12
0x1FC9	0x01AE      	CLRF       FARG_led_send_nible
0x1FCA	0x3180      	MOVLP      0
0x1FCB	0x22C1      	CALL       _led_send
0x1FCC	0x3198      	MOVLP      24
;oled_control.c,80 :: 		}
L_dysp_off17:
L_dysp_off16:
;oled_control.c,81 :: 		}
L_end_dysp_off:
0x1FCD	0x0008      	RETURN
; end of _dysp_off
_pic_init:
;pic_init.c,6 :: 		void pic_init (void) {
;pic_init.c,7 :: 		asm CLRWDT;
0x1FCE	0x0064      	CLRWDT
;pic_init.c,8 :: 		WDTCON.B5 = 0;
0x1FCF	0x0021      	MOVLB      1
0x1FD0	0x1297      	BCF        WDTCON, 5
;pic_init.c,9 :: 		WDTCON.B4 = 1;
0x1FD1	0x1617      	BSF        WDTCON, 4
;pic_init.c,10 :: 		WDTCON.B3 = 0;   // 1 sec WDT
0x1FD2	0x1197      	BCF        WDTCON, 3
;pic_init.c,11 :: 		WDTCON.B2 = 1;
0x1FD3	0x1517      	BSF        WDTCON, 2
;pic_init.c,12 :: 		WDTCON.B1 = 0;
0x1FD4	0x1097      	BCF        WDTCON, 1
;pic_init.c,13 :: 		asm CLRWDT;
0x1FD5	0x0064      	CLRWDT
;pic_init.c,15 :: 		ANSELA = 0;
0x1FD6	0x0023      	MOVLB      3
0x1FD7	0x018C      	CLRF       ANSELA
;pic_init.c,16 :: 		ANSA0_bit = 1;       // analog inputs
0x1FD8	0x140C      	BSF        ANSA0_bit, BitPos(ANSA0_bit+0)
;pic_init.c,17 :: 		ANSA1_bit = 1;
0x1FD9	0x148C      	BSF        ANSA1_bit, BitPos(ANSA1_bit+0)
;pic_init.c,18 :: 		ANSELB = 0;         // all as digital
0x1FDA	0x018D      	CLRF       ANSELB
;pic_init.c,20 :: 		C1ON_bit = 0;           // Disable comparators
0x1FDB	0x0022      	MOVLB      2
0x1FDC	0x1391      	BCF        C1ON_bit, BitPos(C1ON_bit+0)
;pic_init.c,21 :: 		C2ON_bit = 0;
0x1FDD	0x1393      	BCF        C2ON_bit, BitPos(C2ON_bit+0)
;pic_init.c,23 :: 		OSCCON = 0b01111000; // 16 MHz oscillator
0x1FDE	0x3078      	MOVLW      120
0x1FDF	0x0021      	MOVLB      1
0x1FE0	0x0099      	MOVWF      OSCCON
;pic_init.c,25 :: 		PORTA = 0;
0x1FE1	0x0020      	MOVLB      0
0x1FE2	0x018C      	CLRF       PORTA
;pic_init.c,26 :: 		PORTB = 0;
0x1FE3	0x018D      	CLRF       PORTB
;pic_init.c,27 :: 		PORTC = 0;
0x1FE4	0x018E      	CLRF       PORTC
;pic_init.c,28 :: 		LATA = 0b01000000;   // PORT6 /Tx_req to 1
0x1FE5	0x3040      	MOVLW      64
0x1FE6	0x0022      	MOVLB      2
0x1FE7	0x008C      	MOVWF      LATA
;pic_init.c,29 :: 		LATB = 0;
0x1FE8	0x018D      	CLRF       LATB
;pic_init.c,30 :: 		LATC = 0;
0x1FE9	0x018E      	CLRF       LATC
;pic_init.c,31 :: 		TRISA = 0b00000011;
0x1FEA	0x3003      	MOVLW      3
0x1FEB	0x0021      	MOVLB      1
0x1FEC	0x008C      	MOVWF      TRISA
;pic_init.c,32 :: 		TRISB = 0b00000111;
0x1FED	0x3007      	MOVLW      7
0x1FEE	0x008D      	MOVWF      TRISB
;pic_init.c,33 :: 		TRISC = 0b00000000;     //
0x1FEF	0x018E      	CLRF       TRISC
;pic_init.c,35 :: 		ADC_Init();
0x1FF0	0x277E      	CALL       _ADC_Init
;pic_init.c,38 :: 		ADCON1.B0 = 1;   // ADC with the internal reference
0x1FF1	0x141E      	BSF        ADCON1, 0
;pic_init.c,39 :: 		ADCON1.B1 = 1;
0x1FF2	0x149E      	BSF        ADCON1, 1
;pic_init.c,41 :: 		OPTION_REG.B7 = 0;
0x1FF3	0x1395      	BCF        OPTION_REG, 7
;pic_init.c,42 :: 		WPUB.B0 = 1;  // PORTB0 Pull-up resistor
0x1FF4	0x0024      	MOVLB      4
0x1FF5	0x140D      	BSF        WPUB, 0
;pic_init.c,43 :: 		WPUB.B1 = 1;  // PORTB1 Pull-up resistor
0x1FF6	0x148D      	BSF        WPUB, 1
;pic_init.c,44 :: 		WPUB.B2 = 1;  // PORTB2 Pull-up resistor
0x1FF7	0x150D      	BSF        WPUB, 2
;pic_init.c,46 :: 		GIE_bit = 0;
0x1FF8	0x138B      	BCF        GIE_bit, BitPos(GIE_bit+0)
;pic_init.c,48 :: 		}
L_end_pic_init:
0x1FF9	0x0008      	RETURN
; end of _pic_init
_sharp_ind:
;main.h,304 :: 		void sharp_ind() {
;main.h,307 :: 		range = step_ind * L_mult;
0x2000	0x0021      	MOVLB      1
0x2001	0x0869      	MOVF       main_step_ind, 0
0x2002	0x00F0      	MOVWF      R0
0x2003	0x086F      	MOVF       main_L_mult, 0
0x2004	0x00F4      	MOVWF      R4
0x2005	0x3180      	MOVLP      0
0x2006	0x205D      	CALL       _Mul_8x8_U
0x2007	0x31A0      	MOVLP      32
0x2008	0x0870      	MOVF       R0, 0
0x2009	0x002B      	MOVLB      11
0x200A	0x00BC      	MOVWF      sharp_ind_range_L0
;main.h,309 :: 		max_range = ind + range;
0x200B	0x0870      	MOVF       R0, 0
0x200C	0x0028      	MOVLB      8
0x200D	0x0731      	ADDWF      main_ind, 0
0x200E	0x00F4      	MOVWF      R4
0x200F	0x0874      	MOVF       R4, 0
0x2010	0x002B      	MOVLB      11
0x2011	0x00BE      	MOVWF      sharp_ind_max_range_L0
;main.h,310 :: 		if(max_range>32*L_mult-1) max_range = 32*L_mult-1;
0x2012	0x3005      	MOVLW      5
0x2013	0x00F2      	MOVWF      R2
0x2014	0x0021      	MOVLB      1
0x2015	0x086F      	MOVF       main_L_mult, 0
0x2016	0x00F0      	MOVWF      R0
0x2017	0x01F1      	CLRF       R1
0x2018	0x0872      	MOVF       R2, 0
L__sharp_ind648:
0x2019	0x1903      	BTFSC      STATUS, 2
0x201A	0x281F      	GOTO       L__sharp_ind649
0x201B	0x35F0      	LSLF       R0, 1
0x201C	0x0DF1      	RLF        R1, 1
0x201D	0x3EFF      	ADDLW      255
0x201E	0x2819      	GOTO       L__sharp_ind648
L__sharp_ind649:
0x201F	0x3001      	MOVLW      1
0x2020	0x0270      	SUBWF      R0, 0
0x2021	0x00F2      	MOVWF      R2
0x2022	0x3000      	MOVLW      0
0x2023	0x3B71      	SUBWFB     R1, 0
0x2024	0x00F3      	MOVWF      R3
0x2025	0x3080      	MOVLW      128
0x2026	0x0673      	XORWF      R3, 0
0x2027	0x00F0      	MOVWF      R0
0x2028	0x3080      	MOVLW      128
0x2029	0x0270      	SUBWF      R0, 0
0x202A	0x1D03      	BTFSS      STATUS, 2
0x202B	0x282E      	GOTO       L__sharp_ind650
0x202C	0x0874      	MOVF       R4, 0
0x202D	0x0272      	SUBWF      R2, 0
L__sharp_ind650:
0x202E	0x1803      	BTFSC      STATUS, 0
0x202F	0x283C      	GOTO       L_sharp_ind103
0x2030	0x3005      	MOVLW      5
0x2031	0x00F0      	MOVWF      R0
0x2032	0x086F      	MOVF       main_L_mult, 0
0x2033	0x002B      	MOVLB      11
0x2034	0x00BE      	MOVWF      sharp_ind_max_range_L0
0x2035	0x0870      	MOVF       R0, 0
L__sharp_ind651:
0x2036	0x1903      	BTFSC      STATUS, 2
0x2037	0x283B      	GOTO       L__sharp_ind652
0x2038	0x35BE      	LSLF       sharp_ind_max_range_L0, 1
0x2039	0x3EFF      	ADDLW      255
0x203A	0x2836      	GOTO       L__sharp_ind651
L__sharp_ind652:
0x203B	0x03BE      	DECF       sharp_ind_max_range_L0, 1
L_sharp_ind103:
;main.h,311 :: 		if(ind>range) min_range = ind - range; else min_range = 0;
0x203C	0x0028      	MOVLB      8
0x203D	0x0831      	MOVF       main_ind, 0
0x203E	0x002B      	MOVLB      11
0x203F	0x023C      	SUBWF      sharp_ind_range_L0, 0
0x2040	0x1803      	BTFSC      STATUS, 0
0x2041	0x2848      	GOTO       L_sharp_ind104
0x2042	0x083C      	MOVF       sharp_ind_range_L0, 0
0x2043	0x0028      	MOVLB      8
0x2044	0x0231      	SUBWF      main_ind, 0
0x2045	0x002B      	MOVLB      11
0x2046	0x00BF      	MOVWF      sharp_ind_min_range_L0
0x2047	0x2849      	GOTO       L_sharp_ind105
L_sharp_ind104:
0x2048	0x01BF      	CLRF       sharp_ind_min_range_L0
L_sharp_ind105:
;main.h,312 :: 		ind = min_range;
0x2049	0x083F      	MOVF       sharp_ind_min_range_L0, 0
0x204A	0x0028      	MOVLB      8
0x204B	0x00B1      	MOVWF      main_ind
;main.h,313 :: 		set_ind(ind);
0x204C	0x002B      	MOVLB      11
0x204D	0x083F      	MOVF       sharp_ind_min_range_L0, 0
0x204E	0x00CF      	MOVWF      FARG_set_ind_Ind
0x204F	0x3188      	MOVLP      8
0x2050	0x2700      	CALL       _set_ind
0x2051	0x31A0      	MOVLP      32
;main.h,314 :: 		get_swr(); if(SWR==0) return;
0x2052	0x3198      	MOVLP      24
0x2053	0x2472      	CALL       _get_swr
0x2054	0x31A0      	MOVLP      32
0x2055	0x3000      	MOVLW      0
0x2056	0x002A      	MOVLB      10
0x2057	0x065D      	XORWF      _SWR+1, 0
0x2058	0x1D03      	BTFSS      STATUS, 2
0x2059	0x285C      	GOTO       L__sharp_ind653
0x205A	0x3000      	MOVLW      0
0x205B	0x065C      	XORWF      _SWR, 0
L__sharp_ind653:
0x205C	0x1D03      	BTFSS      STATUS, 2
0x205D	0x285F      	GOTO       L_sharp_ind106
0x205E	0x28ED      	GOTO       L_end_sharp_ind
L_sharp_ind106:
;main.h,315 :: 		min_SWR = SWR;
0x205F	0x085C      	MOVF       _SWR, 0
0x2060	0x002B      	MOVLB      11
0x2061	0x00C0      	MOVWF      sharp_ind_min_SWR_L0
0x2062	0x002A      	MOVLB      10
0x2063	0x085D      	MOVF       _SWR+1, 0
0x2064	0x002B      	MOVLB      11
0x2065	0x00C1      	MOVWF      sharp_ind_min_SWR_L0+1
;main.h,316 :: 		for(count=min_range+L_mult; count<=max_range; count+=L_mult) {
0x2066	0x0021      	MOVLB      1
0x2067	0x086F      	MOVF       main_L_mult, 0
0x2068	0x002B      	MOVLB      11
0x2069	0x073F      	ADDWF      sharp_ind_min_range_L0, 0
0x206A	0x00BD      	MOVWF      sharp_ind_count_L0
L_sharp_ind107:
0x206B	0x083D      	MOVF       sharp_ind_count_L0, 0
0x206C	0x023E      	SUBWF      sharp_ind_max_range_L0, 0
0x206D	0x1C03      	BTFSS      STATUS, 0
0x206E	0x28E6      	GOTO       L_sharp_ind108
;main.h,317 :: 		set_ind(count);
0x206F	0x083D      	MOVF       sharp_ind_count_L0, 0
0x2070	0x00CF      	MOVWF      FARG_set_ind_Ind
0x2071	0x3188      	MOVLP      8
0x2072	0x2700      	CALL       _set_ind
0x2073	0x31A0      	MOVLP      32
;main.h,318 :: 		get_swr(); if(SWR==0) return;
0x2074	0x3198      	MOVLP      24
0x2075	0x2472      	CALL       _get_swr
0x2076	0x31A0      	MOVLP      32
0x2077	0x3000      	MOVLW      0
0x2078	0x002A      	MOVLB      10
0x2079	0x065D      	XORWF      _SWR+1, 0
0x207A	0x1D03      	BTFSS      STATUS, 2
0x207B	0x287E      	GOTO       L__sharp_ind654
0x207C	0x3000      	MOVLW      0
0x207D	0x065C      	XORWF      _SWR, 0
L__sharp_ind654:
0x207E	0x1D03      	BTFSS      STATUS, 2
0x207F	0x2881      	GOTO       L_sharp_ind110
0x2080	0x28ED      	GOTO       L_end_sharp_ind
L_sharp_ind110:
;main.h,319 :: 		if(SWR>=min_SWR) { Delay_ms(10); get_swr(); }
0x2081	0x3080      	MOVLW      128
0x2082	0x065D      	XORWF      _SWR+1, 0
0x2083	0x00F0      	MOVWF      R0
0x2084	0x3080      	MOVLW      128
0x2085	0x002B      	MOVLB      11
0x2086	0x0641      	XORWF      sharp_ind_min_SWR_L0+1, 0
0x2087	0x0270      	SUBWF      R0, 0
0x2088	0x1D03      	BTFSS      STATUS, 2
0x2089	0x288D      	GOTO       L__sharp_ind655
0x208A	0x0840      	MOVF       sharp_ind_min_SWR_L0, 0
0x208B	0x002A      	MOVLB      10
0x208C	0x025C      	SUBWF      _SWR, 0
L__sharp_ind655:
0x208D	0x1C03      	BTFSS      STATUS, 0
0x208E	0x289C      	GOTO       L_sharp_ind111
0x208F	0x3034      	MOVLW      52
0x2090	0x00FC      	MOVWF      R12
0x2091	0x30F1      	MOVLW      241
0x2092	0x00FD      	MOVWF      R13
L_sharp_ind112:
0x2093	0x0BFD      	DECFSZ     R13, 1
0x2094	0x2893      	GOTO       L_sharp_ind112
0x2095	0x0BFC      	DECFSZ     R12, 1
0x2096	0x2893      	GOTO       L_sharp_ind112
0x2097	0x0000      	NOP
0x2098	0x0000      	NOP
0x2099	0x3198      	MOVLP      24
0x209A	0x2472      	CALL       _get_swr
0x209B	0x31A0      	MOVLP      32
L_sharp_ind111:
;main.h,320 :: 		if(SWR>=min_SWR) { Delay_ms(10); get_swr(); }
0x209C	0x3080      	MOVLW      128
0x209D	0x002A      	MOVLB      10
0x209E	0x065D      	XORWF      _SWR+1, 0
0x209F	0x00F0      	MOVWF      R0
0x20A0	0x3080      	MOVLW      128
0x20A1	0x002B      	MOVLB      11
0x20A2	0x0641      	XORWF      sharp_ind_min_SWR_L0+1, 0
0x20A3	0x0270      	SUBWF      R0, 0
0x20A4	0x1D03      	BTFSS      STATUS, 2
0x20A5	0x28A9      	GOTO       L__sharp_ind656
0x20A6	0x0840      	MOVF       sharp_ind_min_SWR_L0, 0
0x20A7	0x002A      	MOVLB      10
0x20A8	0x025C      	SUBWF      _SWR, 0
L__sharp_ind656:
0x20A9	0x1C03      	BTFSS      STATUS, 0
0x20AA	0x28B8      	GOTO       L_sharp_ind113
0x20AB	0x3034      	MOVLW      52
0x20AC	0x00FC      	MOVWF      R12
0x20AD	0x30F1      	MOVLW      241
0x20AE	0x00FD      	MOVWF      R13
L_sharp_ind114:
0x20AF	0x0BFD      	DECFSZ     R13, 1
0x20B0	0x28AF      	GOTO       L_sharp_ind114
0x20B1	0x0BFC      	DECFSZ     R12, 1
0x20B2	0x28AF      	GOTO       L_sharp_ind114
0x20B3	0x0000      	NOP
0x20B4	0x0000      	NOP
0x20B5	0x3198      	MOVLP      24
0x20B6	0x2472      	CALL       _get_swr
0x20B7	0x31A0      	MOVLP      32
L_sharp_ind113:
;main.h,321 :: 		if(SWR < min_SWR) {
0x20B8	0x3080      	MOVLW      128
0x20B9	0x002A      	MOVLB      10
0x20BA	0x065D      	XORWF      _SWR+1, 0
0x20BB	0x00F0      	MOVWF      R0
0x20BC	0x3080      	MOVLW      128
0x20BD	0x002B      	MOVLB      11
0x20BE	0x0641      	XORWF      sharp_ind_min_SWR_L0+1, 0
0x20BF	0x0270      	SUBWF      R0, 0
0x20C0	0x1D03      	BTFSS      STATUS, 2
0x20C1	0x28C5      	GOTO       L__sharp_ind657
0x20C2	0x0840      	MOVF       sharp_ind_min_SWR_L0, 0
0x20C3	0x002A      	MOVLB      10
0x20C4	0x025C      	SUBWF      _SWR, 0
L__sharp_ind657:
0x20C5	0x1803      	BTFSC      STATUS, 0
0x20C6	0x28E0      	GOTO       L_sharp_ind115
;main.h,322 :: 		min_SWR = SWR;
0x20C7	0x002A      	MOVLB      10
0x20C8	0x085C      	MOVF       _SWR, 0
0x20C9	0x002B      	MOVLB      11
0x20CA	0x00C0      	MOVWF      sharp_ind_min_SWR_L0
0x20CB	0x002A      	MOVLB      10
0x20CC	0x085D      	MOVF       _SWR+1, 0
0x20CD	0x002B      	MOVLB      11
0x20CE	0x00C1      	MOVWF      sharp_ind_min_SWR_L0+1
;main.h,323 :: 		ind = count;
0x20CF	0x083D      	MOVF       sharp_ind_count_L0, 0
0x20D0	0x0028      	MOVLB      8
0x20D1	0x00B1      	MOVWF      main_ind
;main.h,324 :: 		if(SWR<120) break;
0x20D2	0x3080      	MOVLW      128
0x20D3	0x002A      	MOVLB      10
0x20D4	0x065D      	XORWF      _SWR+1, 0
0x20D5	0x00F0      	MOVWF      R0
0x20D6	0x3080      	MOVLW      128
0x20D7	0x0270      	SUBWF      R0, 0
0x20D8	0x1D03      	BTFSS      STATUS, 2
0x20D9	0x28DC      	GOTO       L__sharp_ind658
0x20DA	0x3078      	MOVLW      120
0x20DB	0x025C      	SUBWF      _SWR, 0
L__sharp_ind658:
0x20DC	0x1803      	BTFSC      STATUS, 0
0x20DD	0x28DF      	GOTO       L_sharp_ind116
0x20DE	0x28E6      	GOTO       L_sharp_ind108
L_sharp_ind116:
;main.h,325 :: 		}
0x20DF	0x28E1      	GOTO       L_sharp_ind117
L_sharp_ind115:
;main.h,326 :: 		else break;
0x20E0	0x28E6      	GOTO       L_sharp_ind108
L_sharp_ind117:
;main.h,316 :: 		for(count=min_range+L_mult; count<=max_range; count+=L_mult) {
0x20E1	0x0021      	MOVLB      1
0x20E2	0x086F      	MOVF       main_L_mult, 0
0x20E3	0x002B      	MOVLB      11
0x20E4	0x07BD      	ADDWF      sharp_ind_count_L0, 1
;main.h,327 :: 		}
0x20E5	0x286B      	GOTO       L_sharp_ind107
L_sharp_ind108:
;main.h,328 :: 		set_ind(ind);
0x20E6	0x0028      	MOVLB      8
0x20E7	0x0831      	MOVF       main_ind, 0
0x20E8	0x002B      	MOVLB      11
0x20E9	0x00CF      	MOVWF      FARG_set_ind_Ind
0x20EA	0x3188      	MOVLP      8
0x20EB	0x2700      	CALL       _set_ind
0x20EC	0x31A0      	MOVLP      32
;main.h,329 :: 		return;
;main.h,330 :: 		}
L_end_sharp_ind:
0x20ED	0x0008      	RETURN
; end of _sharp_ind
_sharp_cap:
;main.h,276 :: 		void sharp_cap() {
;main.h,279 :: 		range = step_cap*C_mult;
0x20EE	0x0028      	MOVLB      8
0x20EF	0x084A      	MOVF       main_step_cap, 0
0x20F0	0x00F0      	MOVWF      R0
0x20F1	0x0849      	MOVF       main_C_mult, 0
0x20F2	0x00F4      	MOVWF      R4
0x20F3	0x3180      	MOVLP      0
0x20F4	0x205D      	CALL       _Mul_8x8_U
0x20F5	0x31A0      	MOVLP      32
0x20F6	0x0870      	MOVF       R0, 0
0x20F7	0x002B      	MOVLB      11
0x20F8	0x00BC      	MOVWF      sharp_cap_range_L0
;main.h,281 :: 		max_range = cap + range;
0x20F9	0x0870      	MOVF       R0, 0
0x20FA	0x0027      	MOVLB      7
0x20FB	0x075B      	ADDWF      main_cap, 0
0x20FC	0x00F4      	MOVWF      R4
0x20FD	0x0874      	MOVF       R4, 0
0x20FE	0x002B      	MOVLB      11
0x20FF	0x00BE      	MOVWF      sharp_cap_max_range_L0
;main.h,282 :: 		if(max_range>32*C_mult-1) max_range = 32*C_mult-1;
0x2100	0x3005      	MOVLW      5
0x2101	0x00F2      	MOVWF      R2
0x2102	0x0028      	MOVLB      8
0x2103	0x0849      	MOVF       main_C_mult, 0
0x2104	0x00F0      	MOVWF      R0
0x2105	0x01F1      	CLRF       R1
0x2106	0x0872      	MOVF       R2, 0
L__sharp_cap636:
0x2107	0x1903      	BTFSC      STATUS, 2
0x2108	0x290D      	GOTO       L__sharp_cap637
0x2109	0x35F0      	LSLF       R0, 1
0x210A	0x0DF1      	RLF        R1, 1
0x210B	0x3EFF      	ADDLW      255
0x210C	0x2907      	GOTO       L__sharp_cap636
L__sharp_cap637:
0x210D	0x3001      	MOVLW      1
0x210E	0x0270      	SUBWF      R0, 0
0x210F	0x00F2      	MOVWF      R2
0x2110	0x3000      	MOVLW      0
0x2111	0x3B71      	SUBWFB     R1, 0
0x2112	0x00F3      	MOVWF      R3
0x2113	0x3080      	MOVLW      128
0x2114	0x0673      	XORWF      R3, 0
0x2115	0x00F0      	MOVWF      R0
0x2116	0x3080      	MOVLW      128
0x2117	0x0270      	SUBWF      R0, 0
0x2118	0x1D03      	BTFSS      STATUS, 2
0x2119	0x291C      	GOTO       L__sharp_cap638
0x211A	0x0874      	MOVF       R4, 0
0x211B	0x0272      	SUBWF      R2, 0
L__sharp_cap638:
0x211C	0x1803      	BTFSC      STATUS, 0
0x211D	0x292A      	GOTO       L_sharp_cap88
0x211E	0x3005      	MOVLW      5
0x211F	0x00F0      	MOVWF      R0
0x2120	0x0849      	MOVF       main_C_mult, 0
0x2121	0x002B      	MOVLB      11
0x2122	0x00BE      	MOVWF      sharp_cap_max_range_L0
0x2123	0x0870      	MOVF       R0, 0
L__sharp_cap639:
0x2124	0x1903      	BTFSC      STATUS, 2
0x2125	0x2929      	GOTO       L__sharp_cap640
0x2126	0x35BE      	LSLF       sharp_cap_max_range_L0, 1
0x2127	0x3EFF      	ADDLW      255
0x2128	0x2924      	GOTO       L__sharp_cap639
L__sharp_cap640:
0x2129	0x03BE      	DECF       sharp_cap_max_range_L0, 1
L_sharp_cap88:
;main.h,283 :: 		if(cap>range) min_range = cap - range; else min_range = 0;
0x212A	0x0027      	MOVLB      7
0x212B	0x085B      	MOVF       main_cap, 0
0x212C	0x002B      	MOVLB      11
0x212D	0x023C      	SUBWF      sharp_cap_range_L0, 0
0x212E	0x1803      	BTFSC      STATUS, 0
0x212F	0x2936      	GOTO       L_sharp_cap89
0x2130	0x083C      	MOVF       sharp_cap_range_L0, 0
0x2131	0x0027      	MOVLB      7
0x2132	0x025B      	SUBWF      main_cap, 0
0x2133	0x002B      	MOVLB      11
0x2134	0x00BF      	MOVWF      sharp_cap_min_range_L0
0x2135	0x2937      	GOTO       L_sharp_cap90
L_sharp_cap89:
0x2136	0x01BF      	CLRF       sharp_cap_min_range_L0
L_sharp_cap90:
;main.h,284 :: 		cap = min_range;
0x2137	0x083F      	MOVF       sharp_cap_min_range_L0, 0
0x2138	0x0027      	MOVLB      7
0x2139	0x00DB      	MOVWF      main_cap
;main.h,285 :: 		set_cap(cap);
0x213A	0x002B      	MOVLB      11
0x213B	0x083F      	MOVF       sharp_cap_min_range_L0, 0
0x213C	0x00CF      	MOVWF      FARG_set_cap_Cap
0x213D	0x3188      	MOVLP      8
0x213E	0x27A1      	CALL       _set_cap
0x213F	0x31A0      	MOVLP      32
;main.h,286 :: 		get_swr(); if(SWR==0) return;
0x2140	0x3198      	MOVLP      24
0x2141	0x2472      	CALL       _get_swr
0x2142	0x31A0      	MOVLP      32
0x2143	0x3000      	MOVLW      0
0x2144	0x002A      	MOVLB      10
0x2145	0x065D      	XORWF      _SWR+1, 0
0x2146	0x1D03      	BTFSS      STATUS, 2
0x2147	0x294A      	GOTO       L__sharp_cap641
0x2148	0x3000      	MOVLW      0
0x2149	0x065C      	XORWF      _SWR, 0
L__sharp_cap641:
0x214A	0x1D03      	BTFSS      STATUS, 2
0x214B	0x294D      	GOTO       L_sharp_cap91
0x214C	0x29DB      	GOTO       L_end_sharp_cap
L_sharp_cap91:
;main.h,287 :: 		min_SWR = SWR;
0x214D	0x085C      	MOVF       _SWR, 0
0x214E	0x002B      	MOVLB      11
0x214F	0x00C0      	MOVWF      sharp_cap_min_swr_L0
0x2150	0x002A      	MOVLB      10
0x2151	0x085D      	MOVF       _SWR+1, 0
0x2152	0x002B      	MOVLB      11
0x2153	0x00C1      	MOVWF      sharp_cap_min_swr_L0+1
;main.h,288 :: 		for(count=min_range+C_mult; count<=max_range; count+=C_mult)  {
0x2154	0x0028      	MOVLB      8
0x2155	0x0849      	MOVF       main_C_mult, 0
0x2156	0x002B      	MOVLB      11
0x2157	0x073F      	ADDWF      sharp_cap_min_range_L0, 0
0x2158	0x00BD      	MOVWF      sharp_cap_count_L0
L_sharp_cap92:
0x2159	0x083D      	MOVF       sharp_cap_count_L0, 0
0x215A	0x023E      	SUBWF      sharp_cap_max_range_L0, 0
0x215B	0x1C03      	BTFSS      STATUS, 0
0x215C	0x29D4      	GOTO       L_sharp_cap93
;main.h,289 :: 		set_cap(count);
0x215D	0x083D      	MOVF       sharp_cap_count_L0, 0
0x215E	0x00CF      	MOVWF      FARG_set_cap_Cap
0x215F	0x3188      	MOVLP      8
0x2160	0x27A1      	CALL       _set_cap
0x2161	0x31A0      	MOVLP      32
;main.h,290 :: 		get_swr(); if(SWR==0) return;
0x2162	0x3198      	MOVLP      24
0x2163	0x2472      	CALL       _get_swr
0x2164	0x31A0      	MOVLP      32
0x2165	0x3000      	MOVLW      0
0x2166	0x002A      	MOVLB      10
0x2167	0x065D      	XORWF      _SWR+1, 0
0x2168	0x1D03      	BTFSS      STATUS, 2
0x2169	0x296C      	GOTO       L__sharp_cap642
0x216A	0x3000      	MOVLW      0
0x216B	0x065C      	XORWF      _SWR, 0
L__sharp_cap642:
0x216C	0x1D03      	BTFSS      STATUS, 2
0x216D	0x296F      	GOTO       L_sharp_cap95
0x216E	0x29DB      	GOTO       L_end_sharp_cap
L_sharp_cap95:
;main.h,291 :: 		if(SWR>=min_SWR) { Delay_ms(10); get_swr(); }
0x216F	0x3080      	MOVLW      128
0x2170	0x065D      	XORWF      _SWR+1, 0
0x2171	0x00F0      	MOVWF      R0
0x2172	0x3080      	MOVLW      128
0x2173	0x002B      	MOVLB      11
0x2174	0x0641      	XORWF      sharp_cap_min_swr_L0+1, 0
0x2175	0x0270      	SUBWF      R0, 0
0x2176	0x1D03      	BTFSS      STATUS, 2
0x2177	0x297B      	GOTO       L__sharp_cap643
0x2178	0x0840      	MOVF       sharp_cap_min_swr_L0, 0
0x2179	0x002A      	MOVLB      10
0x217A	0x025C      	SUBWF      _SWR, 0
L__sharp_cap643:
0x217B	0x1C03      	BTFSS      STATUS, 0
0x217C	0x298A      	GOTO       L_sharp_cap96
0x217D	0x3034      	MOVLW      52
0x217E	0x00FC      	MOVWF      R12
0x217F	0x30F1      	MOVLW      241
0x2180	0x00FD      	MOVWF      R13
L_sharp_cap97:
0x2181	0x0BFD      	DECFSZ     R13, 1
0x2182	0x2981      	GOTO       L_sharp_cap97
0x2183	0x0BFC      	DECFSZ     R12, 1
0x2184	0x2981      	GOTO       L_sharp_cap97
0x2185	0x0000      	NOP
0x2186	0x0000      	NOP
0x2187	0x3198      	MOVLP      24
0x2188	0x2472      	CALL       _get_swr
0x2189	0x31A0      	MOVLP      32
L_sharp_cap96:
;main.h,292 :: 		if(SWR>=min_SWR) { Delay_ms(10); get_swr(); }
0x218A	0x3080      	MOVLW      128
0x218B	0x002A      	MOVLB      10
0x218C	0x065D      	XORWF      _SWR+1, 0
0x218D	0x00F0      	MOVWF      R0
0x218E	0x3080      	MOVLW      128
0x218F	0x002B      	MOVLB      11
0x2190	0x0641      	XORWF      sharp_cap_min_swr_L0+1, 0
0x2191	0x0270      	SUBWF      R0, 0
0x2192	0x1D03      	BTFSS      STATUS, 2
0x2193	0x2997      	GOTO       L__sharp_cap644
0x2194	0x0840      	MOVF       sharp_cap_min_swr_L0, 0
0x2195	0x002A      	MOVLB      10
0x2196	0x025C      	SUBWF      _SWR, 0
L__sharp_cap644:
0x2197	0x1C03      	BTFSS      STATUS, 0
0x2198	0x29A6      	GOTO       L_sharp_cap98
0x2199	0x3034      	MOVLW      52
0x219A	0x00FC      	MOVWF      R12
0x219B	0x30F1      	MOVLW      241
0x219C	0x00FD      	MOVWF      R13
L_sharp_cap99:
0x219D	0x0BFD      	DECFSZ     R13, 1
0x219E	0x299D      	GOTO       L_sharp_cap99
0x219F	0x0BFC      	DECFSZ     R12, 1
0x21A0	0x299D      	GOTO       L_sharp_cap99
0x21A1	0x0000      	NOP
0x21A2	0x0000      	NOP
0x21A3	0x3198      	MOVLP      24
0x21A4	0x2472      	CALL       _get_swr
0x21A5	0x31A0      	MOVLP      32
L_sharp_cap98:
;main.h,293 :: 		if(SWR < min_SWR) {
0x21A6	0x3080      	MOVLW      128
0x21A7	0x002A      	MOVLB      10
0x21A8	0x065D      	XORWF      _SWR+1, 0
0x21A9	0x00F0      	MOVWF      R0
0x21AA	0x3080      	MOVLW      128
0x21AB	0x002B      	MOVLB      11
0x21AC	0x0641      	XORWF      sharp_cap_min_swr_L0+1, 0
0x21AD	0x0270      	SUBWF      R0, 0
0x21AE	0x1D03      	BTFSS      STATUS, 2
0x21AF	0x29B3      	GOTO       L__sharp_cap645
0x21B0	0x0840      	MOVF       sharp_cap_min_swr_L0, 0
0x21B1	0x002A      	MOVLB      10
0x21B2	0x025C      	SUBWF      _SWR, 0
L__sharp_cap645:
0x21B3	0x1803      	BTFSC      STATUS, 0
0x21B4	0x29CE      	GOTO       L_sharp_cap100
;main.h,294 :: 		min_SWR = SWR;
0x21B5	0x002A      	MOVLB      10
0x21B6	0x085C      	MOVF       _SWR, 0
0x21B7	0x002B      	MOVLB      11
0x21B8	0x00C0      	MOVWF      sharp_cap_min_swr_L0
0x21B9	0x002A      	MOVLB      10
0x21BA	0x085D      	MOVF       _SWR+1, 0
0x21BB	0x002B      	MOVLB      11
0x21BC	0x00C1      	MOVWF      sharp_cap_min_swr_L0+1
;main.h,295 :: 		cap = count;
0x21BD	0x083D      	MOVF       sharp_cap_count_L0, 0
0x21BE	0x0027      	MOVLB      7
0x21BF	0x00DB      	MOVWF      main_cap
;main.h,296 :: 		if(SWR<120) break;
0x21C0	0x3080      	MOVLW      128
0x21C1	0x002A      	MOVLB      10
0x21C2	0x065D      	XORWF      _SWR+1, 0
0x21C3	0x00F0      	MOVWF      R0
0x21C4	0x3080      	MOVLW      128
0x21C5	0x0270      	SUBWF      R0, 0
0x21C6	0x1D03      	BTFSS      STATUS, 2
0x21C7	0x29CA      	GOTO       L__sharp_cap646
0x21C8	0x3078      	MOVLW      120
0x21C9	0x025C      	SUBWF      _SWR, 0
L__sharp_cap646:
0x21CA	0x1803      	BTFSC      STATUS, 0
0x21CB	0x29CD      	GOTO       L_sharp_cap101
0x21CC	0x29D4      	GOTO       L_sharp_cap93
L_sharp_cap101:
;main.h,297 :: 		}
0x21CD	0x29CF      	GOTO       L_sharp_cap102
L_sharp_cap100:
;main.h,298 :: 		else break;
0x21CE	0x29D4      	GOTO       L_sharp_cap93
L_sharp_cap102:
;main.h,288 :: 		for(count=min_range+C_mult; count<=max_range; count+=C_mult)  {
0x21CF	0x0028      	MOVLB      8
0x21D0	0x0849      	MOVF       main_C_mult, 0
0x21D1	0x002B      	MOVLB      11
0x21D2	0x07BD      	ADDWF      sharp_cap_count_L0, 1
;main.h,299 :: 		}
0x21D3	0x2959      	GOTO       L_sharp_cap92
L_sharp_cap93:
;main.h,300 :: 		set_cap(cap);
0x21D4	0x0027      	MOVLB      7
0x21D5	0x085B      	MOVF       main_cap, 0
0x21D6	0x002B      	MOVLB      11
0x21D7	0x00CF      	MOVWF      FARG_set_cap_Cap
0x21D8	0x3188      	MOVLP      8
0x21D9	0x27A1      	CALL       _set_cap
0x21DA	0x31A0      	MOVLP      32
;main.h,301 :: 		return;
;main.h,302 :: 		}
L_end_sharp_cap:
0x21DB	0x0008      	RETURN
; end of _sharp_cap
_sub_tune:
;main.h,333 :: 		void sub_tune () {
;main.h,336 :: 		swr_mem = SWR;
0x21DC	0x002A      	MOVLB      10
0x21DD	0x085C      	MOVF       _SWR, 0
0x21DE	0x002B      	MOVLB      11
0x21DF	0x00B6      	MOVWF      sub_tune_swr_mem_L0
0x21E0	0x002A      	MOVLB      10
0x21E1	0x085D      	MOVF       _SWR+1, 0
0x21E2	0x002B      	MOVLB      11
0x21E3	0x00B7      	MOVWF      sub_tune_swr_mem_L0+1
;main.h,337 :: 		coarse_tune(); if(SWR==0) {atu_reset(); return;}
0x21E4	0x3198      	MOVLP      24
0x21E5	0x266B      	CALL       _coarse_tune
0x21E6	0x31A0      	MOVLP      32
0x21E7	0x3000      	MOVLW      0
0x21E8	0x002A      	MOVLB      10
0x21E9	0x065D      	XORWF      _SWR+1, 0
0x21EA	0x1D03      	BTFSS      STATUS, 2
0x21EB	0x29EE      	GOTO       L__sub_tune660
0x21EC	0x3000      	MOVLW      0
0x21ED	0x065C      	XORWF      _SWR, 0
L__sub_tune660:
0x21EE	0x1D03      	BTFSS      STATUS, 2
0x21EF	0x29F4      	GOTO       L_sub_tune118
0x21F0	0x3198      	MOVLP      24
0x21F1	0x201E      	CALL       _atu_reset
0x21F2	0x31A0      	MOVLP      32
0x21F3	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune118:
;main.h,338 :: 		get_swr(); if(SWR<120) return;
0x21F4	0x3198      	MOVLP      24
0x21F5	0x2472      	CALL       _get_swr
0x21F6	0x31A0      	MOVLP      32
0x21F7	0x3080      	MOVLW      128
0x21F8	0x002A      	MOVLB      10
0x21F9	0x065D      	XORWF      _SWR+1, 0
0x21FA	0x00F0      	MOVWF      R0
0x21FB	0x3080      	MOVLW      128
0x21FC	0x0270      	SUBWF      R0, 0
0x21FD	0x1D03      	BTFSS      STATUS, 2
0x21FE	0x2A01      	GOTO       L__sub_tune661
0x21FF	0x3078      	MOVLW      120
0x2200	0x025C      	SUBWF      _SWR, 0
L__sub_tune661:
0x2201	0x1803      	BTFSC      STATUS, 0
0x2202	0x2A04      	GOTO       L_sub_tune119
0x2203	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune119:
;main.h,339 :: 		sharp_ind();  if(SWR==0) {atu_reset(); return;}
0x2204	0x2000      	CALL       _sharp_ind
0x2205	0x3000      	MOVLW      0
0x2206	0x002A      	MOVLB      10
0x2207	0x065D      	XORWF      _SWR+1, 0
0x2208	0x1D03      	BTFSS      STATUS, 2
0x2209	0x2A0C      	GOTO       L__sub_tune662
0x220A	0x3000      	MOVLW      0
0x220B	0x065C      	XORWF      _SWR, 0
L__sub_tune662:
0x220C	0x1D03      	BTFSS      STATUS, 2
0x220D	0x2A12      	GOTO       L_sub_tune120
0x220E	0x3198      	MOVLP      24
0x220F	0x201E      	CALL       _atu_reset
0x2210	0x31A0      	MOVLP      32
0x2211	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune120:
;main.h,340 :: 		get_swr(); if(SWR<120) return;
0x2212	0x3198      	MOVLP      24
0x2213	0x2472      	CALL       _get_swr
0x2214	0x31A0      	MOVLP      32
0x2215	0x3080      	MOVLW      128
0x2216	0x002A      	MOVLB      10
0x2217	0x065D      	XORWF      _SWR+1, 0
0x2218	0x00F0      	MOVWF      R0
0x2219	0x3080      	MOVLW      128
0x221A	0x0270      	SUBWF      R0, 0
0x221B	0x1D03      	BTFSS      STATUS, 2
0x221C	0x2A1F      	GOTO       L__sub_tune663
0x221D	0x3078      	MOVLW      120
0x221E	0x025C      	SUBWF      _SWR, 0
L__sub_tune663:
0x221F	0x1803      	BTFSC      STATUS, 0
0x2220	0x2A22      	GOTO       L_sub_tune121
0x2221	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune121:
;main.h,341 :: 		sharp_cap(); if(SWR==0) {atu_reset(); return;}
0x2222	0x20EE      	CALL       _sharp_cap
0x2223	0x3000      	MOVLW      0
0x2224	0x002A      	MOVLB      10
0x2225	0x065D      	XORWF      _SWR+1, 0
0x2226	0x1D03      	BTFSS      STATUS, 2
0x2227	0x2A2A      	GOTO       L__sub_tune664
0x2228	0x3000      	MOVLW      0
0x2229	0x065C      	XORWF      _SWR, 0
L__sub_tune664:
0x222A	0x1D03      	BTFSS      STATUS, 2
0x222B	0x2A30      	GOTO       L_sub_tune122
0x222C	0x3198      	MOVLP      24
0x222D	0x201E      	CALL       _atu_reset
0x222E	0x31A0      	MOVLP      32
0x222F	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune122:
;main.h,342 :: 		get_swr(); if(SWR<120) return;
0x2230	0x3198      	MOVLP      24
0x2231	0x2472      	CALL       _get_swr
0x2232	0x31A0      	MOVLP      32
0x2233	0x3080      	MOVLW      128
0x2234	0x002A      	MOVLB      10
0x2235	0x065D      	XORWF      _SWR+1, 0
0x2236	0x00F0      	MOVWF      R0
0x2237	0x3080      	MOVLW      128
0x2238	0x0270      	SUBWF      R0, 0
0x2239	0x1D03      	BTFSS      STATUS, 2
0x223A	0x2A3D      	GOTO       L__sub_tune665
0x223B	0x3078      	MOVLW      120
0x223C	0x025C      	SUBWF      _SWR, 0
L__sub_tune665:
0x223D	0x1803      	BTFSC      STATUS, 0
0x223E	0x2A40      	GOTO       L_sub_tune123
0x223F	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune123:
;main.h,344 :: 		if(SWR<200 & SWR<swr_mem & (swr_mem-SWR)>100) return;
0x2240	0x3080      	MOVLW      128
0x2241	0x065D      	XORWF      _SWR+1, 0
0x2242	0x00F1      	MOVWF      R1
0x2243	0x3080      	MOVLW      128
0x2244	0x0271      	SUBWF      R1, 0
0x2245	0x1D03      	BTFSS      STATUS, 2
0x2246	0x2A49      	GOTO       L__sub_tune666
0x2247	0x30C8      	MOVLW      200
0x2248	0x025C      	SUBWF      _SWR, 0
L__sub_tune666:
0x2249	0x3001      	MOVLW      1
0x224A	0x1803      	BTFSC      STATUS, 0
0x224B	0x3000      	MOVLW      0
0x224C	0x00F1      	MOVWF      R1
0x224D	0x3080      	MOVLW      128
0x224E	0x065D      	XORWF      _SWR+1, 0
0x224F	0x00F0      	MOVWF      R0
0x2250	0x3080      	MOVLW      128
0x2251	0x002B      	MOVLB      11
0x2252	0x0637      	XORWF      sub_tune_swr_mem_L0+1, 0
0x2253	0x0270      	SUBWF      R0, 0
0x2254	0x1D03      	BTFSS      STATUS, 2
0x2255	0x2A59      	GOTO       L__sub_tune667
0x2256	0x0836      	MOVF       sub_tune_swr_mem_L0, 0
0x2257	0x002A      	MOVLB      10
0x2258	0x025C      	SUBWF      _SWR, 0
L__sub_tune667:
0x2259	0x002A      	MOVLB      10
0x225A	0x3001      	MOVLW      1
0x225B	0x1803      	BTFSC      STATUS, 0
0x225C	0x3000      	MOVLW      0
0x225D	0x00F0      	MOVWF      R0
0x225E	0x0870      	MOVF       R0, 0
0x225F	0x0571      	ANDWF      R1, 0
0x2260	0x00F3      	MOVWF      R3
0x2261	0x085C      	MOVF       _SWR, 0
0x2262	0x002B      	MOVLB      11
0x2263	0x0236      	SUBWF      sub_tune_swr_mem_L0, 0
0x2264	0x00F1      	MOVWF      R1
0x2265	0x002A      	MOVLB      10
0x2266	0x085D      	MOVF       _SWR+1, 0
0x2267	0x002B      	MOVLB      11
0x2268	0x3B37      	SUBWFB     sub_tune_swr_mem_L0+1, 0
0x2269	0x00F2      	MOVWF      R2
0x226A	0x3080      	MOVLW      128
0x226B	0x00F0      	MOVWF      R0
0x226C	0x3080      	MOVLW      128
0x226D	0x0672      	XORWF      R2, 0
0x226E	0x0270      	SUBWF      R0, 0
0x226F	0x1D03      	BTFSS      STATUS, 2
0x2270	0x2A73      	GOTO       L__sub_tune668
0x2271	0x0871      	MOVF       R1, 0
0x2272	0x3C64      	SUBLW      100
L__sub_tune668:
0x2273	0x3001      	MOVLW      1
0x2274	0x1803      	BTFSC      STATUS, 0
0x2275	0x3000      	MOVLW      0
0x2276	0x00F0      	MOVWF      R0
0x2277	0x0873      	MOVF       R3, 0
0x2278	0x05F0      	ANDWF      R0, 1
0x2279	0x1903      	BTFSC      STATUS, 2
0x227A	0x2A7C      	GOTO       L_sub_tune124
0x227B	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune124:
;main.h,345 :: 		swr_mem = SWR;
0x227C	0x002A      	MOVLB      10
0x227D	0x085C      	MOVF       _SWR, 0
0x227E	0x002B      	MOVLB      11
0x227F	0x00B6      	MOVWF      sub_tune_swr_mem_L0
0x2280	0x002A      	MOVLB      10
0x2281	0x085D      	MOVF       _SWR+1, 0
0x2282	0x002B      	MOVLB      11
0x2283	0x00B7      	MOVWF      sub_tune_swr_mem_L0+1
;main.h,346 :: 		ind_mem = ind;
0x2284	0x0028      	MOVLB      8
0x2285	0x0831      	MOVF       main_ind, 0
0x2286	0x002B      	MOVLB      11
0x2287	0x00B8      	MOVWF      sub_tune_ind_mem_L0
0x2288	0x01B9      	CLRF       sub_tune_ind_mem_L0+1
;main.h,347 :: 		cap_mem = cap;
0x2289	0x0027      	MOVLB      7
0x228A	0x085B      	MOVF       main_cap, 0
0x228B	0x002B      	MOVLB      11
0x228C	0x00BA      	MOVWF      sub_tune_cap_mem_L0
0x228D	0x01BB      	CLRF       sub_tune_cap_mem_L0+1
;main.h,349 :: 		if(SW==1) SW = 0; else SW = 1;
0x228E	0x0028      	MOVLB      8
0x228F	0x0847      	MOVF       main_SW, 0
0x2290	0x3A01      	XORLW      1
0x2291	0x1D03      	BTFSS      STATUS, 2
0x2292	0x2A95      	GOTO       L_sub_tune125
0x2293	0x01C7      	CLRF       main_SW
0x2294	0x2A97      	GOTO       L_sub_tune126
L_sub_tune125:
0x2295	0x3001      	MOVLW      1
0x2296	0x00C7      	MOVWF      main_SW
L_sub_tune126:
;main.h,350 :: 		atu_reset();
0x2297	0x3198      	MOVLP      24
0x2298	0x201E      	CALL       _atu_reset
0x2299	0x31A0      	MOVLP      32
;main.h,351 :: 		set_sw(SW);
0x229A	0x0028      	MOVLB      8
0x229B	0x0847      	MOVF       main_SW, 0
0x229C	0x002B      	MOVLB      11
0x229D	0x00C7      	MOVWF      FARG_set_sw_SW
0x229E	0x3188      	MOVLP      8
0x229F	0x27E5      	CALL       _set_sw
0x22A0	0x31A0      	MOVLP      32
;main.h,352 :: 		Delay_ms(50);
0x22A1	0x3002      	MOVLW      2
0x22A2	0x00FB      	MOVWF      R11
0x22A3	0x3004      	MOVLW      4
0x22A4	0x00FC      	MOVWF      R12
0x22A5	0x30BA      	MOVLW      186
0x22A6	0x00FD      	MOVWF      R13
L_sub_tune127:
0x22A7	0x0BFD      	DECFSZ     R13, 1
0x22A8	0x2AA7      	GOTO       L_sub_tune127
0x22A9	0x0BFC      	DECFSZ     R12, 1
0x22AA	0x2AA7      	GOTO       L_sub_tune127
0x22AB	0x0BFB      	DECFSZ     R11, 1
0x22AC	0x2AA7      	GOTO       L_sub_tune127
0x22AD	0x0000      	NOP
;main.h,353 :: 		get_swr(); if(SWR<120) return;
0x22AE	0x3198      	MOVLP      24
0x22AF	0x2472      	CALL       _get_swr
0x22B0	0x31A0      	MOVLP      32
0x22B1	0x3080      	MOVLW      128
0x22B2	0x002A      	MOVLB      10
0x22B3	0x065D      	XORWF      _SWR+1, 0
0x22B4	0x00F0      	MOVWF      R0
0x22B5	0x3080      	MOVLW      128
0x22B6	0x0270      	SUBWF      R0, 0
0x22B7	0x1D03      	BTFSS      STATUS, 2
0x22B8	0x2ABB      	GOTO       L__sub_tune669
0x22B9	0x3078      	MOVLW      120
0x22BA	0x025C      	SUBWF      _SWR, 0
L__sub_tune669:
0x22BB	0x1803      	BTFSC      STATUS, 0
0x22BC	0x2ABE      	GOTO       L_sub_tune128
0x22BD	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune128:
;main.h,355 :: 		coarse_tune(); if(SWR==0) {atu_reset(); return;}
0x22BE	0x3198      	MOVLP      24
0x22BF	0x266B      	CALL       _coarse_tune
0x22C0	0x31A0      	MOVLP      32
0x22C1	0x3000      	MOVLW      0
0x22C2	0x002A      	MOVLB      10
0x22C3	0x065D      	XORWF      _SWR+1, 0
0x22C4	0x1D03      	BTFSS      STATUS, 2
0x22C5	0x2AC8      	GOTO       L__sub_tune670
0x22C6	0x3000      	MOVLW      0
0x22C7	0x065C      	XORWF      _SWR, 0
L__sub_tune670:
0x22C8	0x1D03      	BTFSS      STATUS, 2
0x22C9	0x2ACE      	GOTO       L_sub_tune129
0x22CA	0x3198      	MOVLP      24
0x22CB	0x201E      	CALL       _atu_reset
0x22CC	0x31A0      	MOVLP      32
0x22CD	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune129:
;main.h,356 :: 		get_swr(); if(SWR<120) return;
0x22CE	0x3198      	MOVLP      24
0x22CF	0x2472      	CALL       _get_swr
0x22D0	0x31A0      	MOVLP      32
0x22D1	0x3080      	MOVLW      128
0x22D2	0x002A      	MOVLB      10
0x22D3	0x065D      	XORWF      _SWR+1, 0
0x22D4	0x00F0      	MOVWF      R0
0x22D5	0x3080      	MOVLW      128
0x22D6	0x0270      	SUBWF      R0, 0
0x22D7	0x1D03      	BTFSS      STATUS, 2
0x22D8	0x2ADB      	GOTO       L__sub_tune671
0x22D9	0x3078      	MOVLW      120
0x22DA	0x025C      	SUBWF      _SWR, 0
L__sub_tune671:
0x22DB	0x1803      	BTFSC      STATUS, 0
0x22DC	0x2ADE      	GOTO       L_sub_tune130
0x22DD	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune130:
;main.h,357 :: 		sharp_ind(); if(SWR==0) {atu_reset(); return;}
0x22DE	0x2000      	CALL       _sharp_ind
0x22DF	0x3000      	MOVLW      0
0x22E0	0x002A      	MOVLB      10
0x22E1	0x065D      	XORWF      _SWR+1, 0
0x22E2	0x1D03      	BTFSS      STATUS, 2
0x22E3	0x2AE6      	GOTO       L__sub_tune672
0x22E4	0x3000      	MOVLW      0
0x22E5	0x065C      	XORWF      _SWR, 0
L__sub_tune672:
0x22E6	0x1D03      	BTFSS      STATUS, 2
0x22E7	0x2AEC      	GOTO       L_sub_tune131
0x22E8	0x3198      	MOVLP      24
0x22E9	0x201E      	CALL       _atu_reset
0x22EA	0x31A0      	MOVLP      32
0x22EB	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune131:
;main.h,358 :: 		get_swr(); if(SWR<120) return;
0x22EC	0x3198      	MOVLP      24
0x22ED	0x2472      	CALL       _get_swr
0x22EE	0x31A0      	MOVLP      32
0x22EF	0x3080      	MOVLW      128
0x22F0	0x002A      	MOVLB      10
0x22F1	0x065D      	XORWF      _SWR+1, 0
0x22F2	0x00F0      	MOVWF      R0
0x22F3	0x3080      	MOVLW      128
0x22F4	0x0270      	SUBWF      R0, 0
0x22F5	0x1D03      	BTFSS      STATUS, 2
0x22F6	0x2AF9      	GOTO       L__sub_tune673
0x22F7	0x3078      	MOVLW      120
0x22F8	0x025C      	SUBWF      _SWR, 0
L__sub_tune673:
0x22F9	0x1803      	BTFSC      STATUS, 0
0x22FA	0x2AFC      	GOTO       L_sub_tune132
0x22FB	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune132:
;main.h,359 :: 		sharp_cap(); if(SWR==0) {atu_reset(); return;}
0x22FC	0x20EE      	CALL       _sharp_cap
0x22FD	0x3000      	MOVLW      0
0x22FE	0x002A      	MOVLB      10
0x22FF	0x065D      	XORWF      _SWR+1, 0
0x2300	0x1D03      	BTFSS      STATUS, 2
0x2301	0x2B04      	GOTO       L__sub_tune674
0x2302	0x3000      	MOVLW      0
0x2303	0x065C      	XORWF      _SWR, 0
L__sub_tune674:
0x2304	0x1D03      	BTFSS      STATUS, 2
0x2305	0x2B0A      	GOTO       L_sub_tune133
0x2306	0x3198      	MOVLP      24
0x2307	0x201E      	CALL       _atu_reset
0x2308	0x31A0      	MOVLP      32
0x2309	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune133:
;main.h,360 :: 		get_swr(); if(SWR<120) return;
0x230A	0x3198      	MOVLP      24
0x230B	0x2472      	CALL       _get_swr
0x230C	0x31A0      	MOVLP      32
0x230D	0x3080      	MOVLW      128
0x230E	0x002A      	MOVLB      10
0x230F	0x065D      	XORWF      _SWR+1, 0
0x2310	0x00F0      	MOVWF      R0
0x2311	0x3080      	MOVLW      128
0x2312	0x0270      	SUBWF      R0, 0
0x2313	0x1D03      	BTFSS      STATUS, 2
0x2314	0x2B17      	GOTO       L__sub_tune675
0x2315	0x3078      	MOVLW      120
0x2316	0x025C      	SUBWF      _SWR, 0
L__sub_tune675:
0x2317	0x1803      	BTFSC      STATUS, 0
0x2318	0x2B1A      	GOTO       L_sub_tune134
0x2319	0x2B56      	GOTO       L_end_sub_tune
L_sub_tune134:
;main.h,362 :: 		if(SWR>swr_mem) {
0x231A	0x3080      	MOVLW      128
0x231B	0x002B      	MOVLB      11
0x231C	0x0637      	XORWF      sub_tune_swr_mem_L0+1, 0
0x231D	0x00F0      	MOVWF      R0
0x231E	0x3080      	MOVLW      128
0x231F	0x002A      	MOVLB      10
0x2320	0x065D      	XORWF      _SWR+1, 0
0x2321	0x0270      	SUBWF      R0, 0
0x2322	0x1D03      	BTFSS      STATUS, 2
0x2323	0x2B27      	GOTO       L__sub_tune676
0x2324	0x085C      	MOVF       _SWR, 0
0x2325	0x002B      	MOVLB      11
0x2326	0x0236      	SUBWF      sub_tune_swr_mem_L0, 0
L__sub_tune676:
0x2327	0x1803      	BTFSC      STATUS, 0
0x2328	0x2B55      	GOTO       L_sub_tune135
;main.h,363 :: 		if(SW==1) SW = 0; else SW = 1;
0x2329	0x0028      	MOVLB      8
0x232A	0x0847      	MOVF       main_SW, 0
0x232B	0x3A01      	XORLW      1
0x232C	0x1D03      	BTFSS      STATUS, 2
0x232D	0x2B30      	GOTO       L_sub_tune136
0x232E	0x01C7      	CLRF       main_SW
0x232F	0x2B32      	GOTO       L_sub_tune137
L_sub_tune136:
0x2330	0x3001      	MOVLW      1
0x2331	0x00C7      	MOVWF      main_SW
L_sub_tune137:
;main.h,364 :: 		set_sw(SW);
0x2332	0x0847      	MOVF       main_SW, 0
0x2333	0x002B      	MOVLB      11
0x2334	0x00C7      	MOVWF      FARG_set_sw_SW
0x2335	0x3188      	MOVLP      8
0x2336	0x27E5      	CALL       _set_sw
0x2337	0x31A0      	MOVLP      32
;main.h,365 :: 		ind = ind_mem;
0x2338	0x002B      	MOVLB      11
0x2339	0x0838      	MOVF       sub_tune_ind_mem_L0, 0
0x233A	0x0028      	MOVLB      8
0x233B	0x00B1      	MOVWF      main_ind
;main.h,366 :: 		cap = cap_mem;
0x233C	0x002B      	MOVLB      11
0x233D	0x083A      	MOVF       sub_tune_cap_mem_L0, 0
0x233E	0x0027      	MOVLB      7
0x233F	0x00DB      	MOVWF      main_cap
;main.h,367 :: 		set_ind(ind);
0x2340	0x002B      	MOVLB      11
0x2341	0x0838      	MOVF       sub_tune_ind_mem_L0, 0
0x2342	0x00CF      	MOVWF      FARG_set_ind_Ind
0x2343	0x3188      	MOVLP      8
0x2344	0x2700      	CALL       _set_ind
0x2345	0x31A0      	MOVLP      32
;main.h,368 :: 		set_cap(cap);
0x2346	0x0027      	MOVLB      7
0x2347	0x085B      	MOVF       main_cap, 0
0x2348	0x002B      	MOVLB      11
0x2349	0x00CF      	MOVWF      FARG_set_cap_Cap
0x234A	0x3188      	MOVLP      8
0x234B	0x27A1      	CALL       _set_cap
0x234C	0x31A0      	MOVLP      32
;main.h,369 :: 		SWR = swr_mem;
0x234D	0x002B      	MOVLB      11
0x234E	0x0836      	MOVF       sub_tune_swr_mem_L0, 0
0x234F	0x002A      	MOVLB      10
0x2350	0x00DC      	MOVWF      _SWR
0x2351	0x002B      	MOVLB      11
0x2352	0x0837      	MOVF       sub_tune_swr_mem_L0+1, 0
0x2353	0x002A      	MOVLB      10
0x2354	0x00DD      	MOVWF      _SWR+1
;main.h,370 :: 		}
L_sub_tune135:
;main.h,372 :: 		asm CLRWDT;
0x2355	0x0064      	CLRWDT
;main.h,373 :: 		return;
;main.h,374 :: 		}
L_end_sub_tune:
0x2356	0x0008      	RETURN
; end of _sub_tune
_lcd_prep:
;main.c,391 :: 		void lcd_prep() {
;main.c,392 :: 		asm CLRWDT;
0x2357	0x0064      	CLRWDT
;main.c,393 :: 		if(type==4 |type==5){   // 128*64 OLED
0x2358	0x002A      	MOVLB      10
0x2359	0x086D      	MOVF       _type, 0
0x235A	0x3A04      	XORLW      4
0x235B	0x3001      	MOVLW      1
0x235C	0x1D03      	BTFSS      STATUS, 2
0x235D	0x3000      	MOVLW      0
0x235E	0x00F1      	MOVWF      R1
0x235F	0x086D      	MOVF       _type, 0
0x2360	0x3A05      	XORLW      5
0x2361	0x3001      	MOVLW      1
0x2362	0x1D03      	BTFSS      STATUS, 2
0x2363	0x3000      	MOVLW      0
0x2364	0x00F0      	MOVWF      R0
0x2365	0x0871      	MOVF       R1, 0
0x2366	0x04F0      	IORWF       R0, 1
0x2367	0x1903      	BTFSC      STATUS, 2
0x2368	0x2C10      	GOTO       L_lcd_prep301
;main.c,394 :: 		if(lcd_prep_short==0) {
0x2369	0x0024      	MOVLB      4
0x236A	0x086A      	MOVF       _lcd_prep_short, 0
0x236B	0x3A00      	XORLW      0
0x236C	0x1D03      	BTFSS      STATUS, 2
0x236D	0x2BC2      	GOTO       L_lcd_prep302
;main.c,395 :: 		led_wr_str (0, 8, " ATU-100 ", 9);
0x236E	0x002C      	MOVLB      12
0x236F	0x01A4      	CLRF       FARG_led_wr_str_col
0x2370	0x3008      	MOVLW      8
0x2371	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2372	0x3060      	MOVLW      ?lstr39_main
0x2373	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2374	0x3002      	MOVLW      hi_addr(?lstr39_main)
0x2375	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2376	0x3009      	MOVLW      9
0x2377	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2378	0x3180      	MOVLP      0
0x2379	0x24B4      	CALL       _led_wr_str
0x237A	0x31A0      	MOVLP      32
;main.c,396 :: 		led_wr_str (2, 16, "7x7 v3.4", 8);
0x237B	0x3002      	MOVLW      2
0x237C	0x002C      	MOVLB      12
0x237D	0x00A4      	MOVWF      FARG_led_wr_str_col
0x237E	0x3010      	MOVLW      16
0x237F	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2380	0x3057      	MOVLW      ?lstr40_main
0x2381	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2382	0x3002      	MOVLW      hi_addr(?lstr40_main)
0x2383	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2384	0x3008      	MOVLW      8
0x2385	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2386	0x3180      	MOVLP      0
0x2387	0x24B4      	CALL       _led_wr_str
0x2388	0x31A0      	MOVLP      32
;main.c,397 :: 		led_wr_str (4, 16, "by N7DDC", 8);
0x2389	0x3004      	MOVLW      4
0x238A	0x002C      	MOVLB      12
0x238B	0x00A4      	MOVWF      FARG_led_wr_str_col
0x238C	0x3010      	MOVLW      16
0x238D	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x238E	0x304E      	MOVLW      ?lstr41_main
0x238F	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2390	0x3002      	MOVLW      hi_addr(?lstr41_main)
0x2391	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2392	0x3008      	MOVLW      8
0x2393	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2394	0x3180      	MOVLP      0
0x2395	0x24B4      	CALL       _led_wr_str
0x2396	0x31A0      	MOVLP      32
;main.c,398 :: 		led_wr_str (6, 22, "& R3TJL", 7);
0x2397	0x3006      	MOVLW      6
0x2398	0x002C      	MOVLB      12
0x2399	0x00A4      	MOVWF      FARG_led_wr_str_col
0x239A	0x3016      	MOVLW      22
0x239B	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x239C	0x305E      	MOVLW      ?lstr42_main
0x239D	0x00A6      	MOVWF      FARG_led_wr_str_str
0x239E	0x3000      	MOVLW      hi_addr(?lstr42_main)
0x239F	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x23A0	0x3007      	MOVLW      7
0x23A1	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x23A2	0x3180      	MOVLP      0
0x23A3	0x24B4      	CALL       _led_wr_str
0x23A4	0x31A0      	MOVLP      32
;main.c,399 :: 		asm CLRWDT;
0x23A5	0x0064      	CLRWDT
;main.c,400 :: 		Delay_ms(800);
0x23A6	0x3011      	MOVLW      17
0x23A7	0x00FB      	MOVWF      R11
0x23A8	0x303C      	MOVLW      60
0x23A9	0x00FC      	MOVWF      R12
0x23AA	0x30CB      	MOVLW      203
0x23AB	0x00FD      	MOVWF      R13
L_lcd_prep303:
0x23AC	0x0BFD      	DECFSZ     R13, 1
0x23AD	0x2BAC      	GOTO       L_lcd_prep303
0x23AE	0x0BFC      	DECFSZ     R12, 1
0x23AF	0x2BAC      	GOTO       L_lcd_prep303
0x23B0	0x0BFB      	DECFSZ     R11, 1
0x23B1	0x2BAC      	GOTO       L_lcd_prep303
;main.c,401 :: 		asm CLRWDT;
0x23B2	0x0064      	CLRWDT
;main.c,402 :: 		Delay_ms(500);
0x23B3	0x300B      	MOVLW      11
0x23B4	0x00FB      	MOVWF      R11
0x23B5	0x3026      	MOVLW      38
0x23B6	0x00FC      	MOVWF      R12
0x23B7	0x305D      	MOVLW      93
0x23B8	0x00FD      	MOVWF      R13
L_lcd_prep304:
0x23B9	0x0BFD      	DECFSZ     R13, 1
0x23BA	0x2BB9      	GOTO       L_lcd_prep304
0x23BB	0x0BFC      	DECFSZ     R12, 1
0x23BC	0x2BB9      	GOTO       L_lcd_prep304
0x23BD	0x0BFB      	DECFSZ     R11, 1
0x23BE	0x2BB9      	GOTO       L_lcd_prep304
0x23BF	0x0000      	NOP
0x23C0	0x0000      	NOP
;main.c,403 :: 		asm CLRWDT;
0x23C1	0x0064      	CLRWDT
;main.c,408 :: 		}
L_lcd_prep302:
;main.c,409 :: 		Delay_ms(150);
0x23C2	0x3004      	MOVLW      4
0x23C3	0x00FB      	MOVWF      R11
0x23C4	0x300C      	MOVLW      12
0x23C5	0x00FC      	MOVWF      R12
0x23C6	0x3033      	MOVLW      51
0x23C7	0x00FD      	MOVWF      R13
L_lcd_prep305:
0x23C8	0x0BFD      	DECFSZ     R13, 1
0x23C9	0x2BC8      	GOTO       L_lcd_prep305
0x23CA	0x0BFC      	DECFSZ     R12, 1
0x23CB	0x2BC8      	GOTO       L_lcd_prep305
0x23CC	0x0BFB      	DECFSZ     R11, 1
0x23CD	0x2BC8      	GOTO       L_lcd_prep305
0x23CE	0x0000      	NOP
0x23CF	0x0000      	NOP
;main.c,410 :: 		if(P_High==1) led_wr_str (0, 16, "PWR=  0W", 8);
0x23D0	0x0028      	MOVLB      8
0x23D1	0x0832      	MOVF       main_P_High, 0
0x23D2	0x3A01      	XORLW      1
0x23D3	0x1D03      	BTFSS      STATUS, 2
0x23D4	0x2BE3      	GOTO       L_lcd_prep306
0x23D5	0x002C      	MOVLB      12
0x23D6	0x01A4      	CLRF       FARG_led_wr_str_col
0x23D7	0x3010      	MOVLW      16
0x23D8	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x23D9	0x3055      	MOVLW      ?lstr43_main
0x23DA	0x00A6      	MOVWF      FARG_led_wr_str_str
0x23DB	0x3000      	MOVLW      hi_addr(?lstr43_main)
0x23DC	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x23DD	0x3008      	MOVLW      8
0x23DE	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x23DF	0x3180      	MOVLP      0
0x23E0	0x24B4      	CALL       _led_wr_str
0x23E1	0x31A0      	MOVLP      32
0x23E2	0x2BF0      	GOTO       L_lcd_prep307
L_lcd_prep306:
;main.c,411 :: 		else  led_wr_str (0, 16, "PWR=0.0W", 8);
0x23E3	0x002C      	MOVLB      12
0x23E4	0x01A4      	CLRF       FARG_led_wr_str_col
0x23E5	0x3010      	MOVLW      16
0x23E6	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x23E7	0x304C      	MOVLW      ?lstr44_main
0x23E8	0x00A6      	MOVWF      FARG_led_wr_str_str
0x23E9	0x3000      	MOVLW      hi_addr(?lstr44_main)
0x23EA	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x23EB	0x3008      	MOVLW      8
0x23EC	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x23ED	0x3180      	MOVLP      0
0x23EE	0x24B4      	CALL       _led_wr_str
0x23EF	0x31A0      	MOVLP      32
L_lcd_prep307:
;main.c,412 :: 		led_wr_str (2, 16, "SWR=0.00", 8);
0x23F0	0x3002      	MOVLW      2
0x23F1	0x002C      	MOVLB      12
0x23F2	0x00A4      	MOVWF      FARG_led_wr_str_col
0x23F3	0x3010      	MOVLW      16
0x23F4	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x23F5	0x3066      	MOVLW      ?lstr45_main
0x23F6	0x00A6      	MOVWF      FARG_led_wr_str_str
0x23F7	0x3000      	MOVLW      hi_addr(?lstr45_main)
0x23F8	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x23F9	0x3008      	MOVLW      8
0x23FA	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x23FB	0x3180      	MOVLP      0
0x23FC	0x24B4      	CALL       _led_wr_str
0x23FD	0x31A0      	MOVLP      32
;main.c,413 :: 		if(Auto) led_wr_str (0, 16+8*12, ".", 1);
0x23FE	0x0027      	MOVLB      7
0x23FF	0x0861      	MOVF       _Auto, 0
0x2400	0x1903      	BTFSC      STATUS, 2
0x2401	0x2C0F      	GOTO       L_lcd_prep308
0x2402	0x002C      	MOVLB      12
0x2403	0x01A4      	CLRF       FARG_led_wr_str_col
0x2404	0x3070      	MOVLW      112
0x2405	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2406	0x30C2      	MOVLW      ?lstr46_main
0x2407	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2408	0x3000      	MOVLW      hi_addr(?lstr46_main)
0x2409	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x240A	0x3001      	MOVLW      1
0x240B	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x240C	0x3180      	MOVLP      0
0x240D	0x24B4      	CALL       _led_wr_str
0x240E	0x31A0      	MOVLP      32
L_lcd_prep308:
;main.c,414 :: 		}
0x240F	0x2CA9      	GOTO       L_lcd_prep309
L_lcd_prep301:
;main.c,415 :: 		else if(type!=0) {   // 1602 LCD & 128*32 OLED
0x2410	0x002A      	MOVLB      10
0x2411	0x086D      	MOVF       _type, 0
0x2412	0x3A00      	XORLW      0
0x2413	0x1903      	BTFSC      STATUS, 2
0x2414	0x2CA9      	GOTO       L_lcd_prep310
;main.c,416 :: 		if(lcd_prep_short==0) {
0x2415	0x0024      	MOVLB      4
0x2416	0x086A      	MOVF       _lcd_prep_short, 0
0x2417	0x3A00      	XORLW      0
0x2418	0x1D03      	BTFSS      STATUS, 2
0x2419	0x2C52      	GOTO       L_lcd_prep311
;main.c,417 :: 		led_wr_str (0, 0, "ATU-100 7x7 v3.4", 16);
0x241A	0x002C      	MOVLB      12
0x241B	0x01A4      	CLRF       FARG_led_wr_str_col
0x241C	0x01A5      	CLRF       FARG_led_wr_str_pos
0x241D	0x30B1      	MOVLW      ?lstr47_main
0x241E	0x00A6      	MOVWF      FARG_led_wr_str_str
0x241F	0x3000      	MOVLW      hi_addr(?lstr47_main)
0x2420	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2421	0x3010      	MOVLW      16
0x2422	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2423	0x3180      	MOVLP      0
0x2424	0x24B4      	CALL       _led_wr_str
0x2425	0x31A0      	MOVLP      32
;main.c,418 :: 		led_wr_str (1, 0, "by N7DDC & R3TJL", 16);
0x2426	0x3001      	MOVLW      1
0x2427	0x002C      	MOVLB      12
0x2428	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2429	0x01A5      	CLRF       FARG_led_wr_str_pos
0x242A	0x30A0      	MOVLW      ?lstr48_main
0x242B	0x00A6      	MOVWF      FARG_led_wr_str_str
0x242C	0x3000      	MOVLW      hi_addr(?lstr48_main)
0x242D	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x242E	0x3010      	MOVLW      16
0x242F	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2430	0x3180      	MOVLP      0
0x2431	0x24B4      	CALL       _led_wr_str
0x2432	0x31A0      	MOVLP      32
;main.c,419 :: 		asm CLRWDT;
0x2433	0x0064      	CLRWDT
;main.c,420 :: 		Delay_ms(600);
0x2434	0x300D      	MOVLW      13
0x2435	0x00FB      	MOVWF      R11
0x2436	0x302D      	MOVLW      45
0x2437	0x00FC      	MOVWF      R12
0x2438	0x30D7      	MOVLW      215
0x2439	0x00FD      	MOVWF      R13
L_lcd_prep312:
0x243A	0x0BFD      	DECFSZ     R13, 1
0x243B	0x2C3A      	GOTO       L_lcd_prep312
0x243C	0x0BFC      	DECFSZ     R12, 1
0x243D	0x2C3A      	GOTO       L_lcd_prep312
0x243E	0x0BFB      	DECFSZ     R11, 1
0x243F	0x2C3A      	GOTO       L_lcd_prep312
0x2440	0x0000      	NOP
0x2441	0x0000      	NOP
;main.c,421 :: 		asm CLRWDT;
0x2442	0x0064      	CLRWDT
;main.c,422 :: 		Delay_ms(500);
0x2443	0x300B      	MOVLW      11
0x2444	0x00FB      	MOVWF      R11
0x2445	0x3026      	MOVLW      38
0x2446	0x00FC      	MOVWF      R12
0x2447	0x305D      	MOVLW      93
0x2448	0x00FD      	MOVWF      R13
L_lcd_prep313:
0x2449	0x0BFD      	DECFSZ     R13, 1
0x244A	0x2C49      	GOTO       L_lcd_prep313
0x244B	0x0BFC      	DECFSZ     R12, 1
0x244C	0x2C49      	GOTO       L_lcd_prep313
0x244D	0x0BFB      	DECFSZ     R11, 1
0x244E	0x2C49      	GOTO       L_lcd_prep313
0x244F	0x0000      	NOP
0x2450	0x0000      	NOP
;main.c,423 :: 		asm CLRWDT;
0x2451	0x0064      	CLRWDT
;main.c,426 :: 		}
L_lcd_prep311:
;main.c,427 :: 		Delay_ms(150);
0x2452	0x3004      	MOVLW      4
0x2453	0x00FB      	MOVWF      R11
0x2454	0x300C      	MOVLW      12
0x2455	0x00FC      	MOVWF      R12
0x2456	0x3033      	MOVLW      51
0x2457	0x00FD      	MOVWF      R13
L_lcd_prep314:
0x2458	0x0BFD      	DECFSZ     R13, 1
0x2459	0x2C58      	GOTO       L_lcd_prep314
0x245A	0x0BFC      	DECFSZ     R12, 1
0x245B	0x2C58      	GOTO       L_lcd_prep314
0x245C	0x0BFB      	DECFSZ     R11, 1
0x245D	0x2C58      	GOTO       L_lcd_prep314
0x245E	0x0000      	NOP
0x245F	0x0000      	NOP
;main.c,428 :: 		led_wr_str (0, 8, " ", 1);
0x2460	0x002C      	MOVLB      12
0x2461	0x01A4      	CLRF       FARG_led_wr_str_col
0x2462	0x3008      	MOVLW      8
0x2463	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2464	0x304A      	MOVLW      ?lstr49_main
0x2465	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2466	0x3000      	MOVLW      hi_addr(?lstr49_main)
0x2467	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2468	0x3001      	MOVLW      1
0x2469	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x246A	0x3180      	MOVLP      0
0x246B	0x24B4      	CALL       _led_wr_str
0x246C	0x31A0      	MOVLP      32
;main.c,429 :: 		if(P_High==1) led_wr_str (0, 0, "PWR=  0W", 8);
0x246D	0x0028      	MOVLB      8
0x246E	0x0832      	MOVF       main_P_High, 0
0x246F	0x3A01      	XORLW      1
0x2470	0x1D03      	BTFSS      STATUS, 2
0x2471	0x2C7F      	GOTO       L_lcd_prep315
0x2472	0x002C      	MOVLB      12
0x2473	0x01A4      	CLRF       FARG_led_wr_str_col
0x2474	0x01A5      	CLRF       FARG_led_wr_str_pos
0x2475	0x3034      	MOVLW      ?lstr50_main
0x2476	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2477	0x3000      	MOVLW      hi_addr(?lstr50_main)
0x2478	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2479	0x3008      	MOVLW      8
0x247A	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x247B	0x3180      	MOVLP      0
0x247C	0x24B4      	CALL       _led_wr_str
0x247D	0x31A0      	MOVLP      32
0x247E	0x2C8B      	GOTO       L_lcd_prep316
L_lcd_prep315:
;main.c,430 :: 		else led_wr_str (0, 0, "PWR=0.0W", 8);
0x247F	0x002C      	MOVLB      12
0x2480	0x01A4      	CLRF       FARG_led_wr_str_col
0x2481	0x01A5      	CLRF       FARG_led_wr_str_pos
0x2482	0x302B      	MOVLW      ?lstr51_main
0x2483	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2484	0x3000      	MOVLW      hi_addr(?lstr51_main)
0x2485	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2486	0x3008      	MOVLW      8
0x2487	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2488	0x3180      	MOVLP      0
0x2489	0x24B4      	CALL       _led_wr_str
0x248A	0x31A0      	MOVLP      32
L_lcd_prep316:
;main.c,431 :: 		led_wr_str (1, 0, "SWR=0.00", 8);
0x248B	0x3001      	MOVLW      1
0x248C	0x002C      	MOVLB      12
0x248D	0x00A4      	MOVWF      FARG_led_wr_str_col
0x248E	0x01A5      	CLRF       FARG_led_wr_str_pos
0x248F	0x3022      	MOVLW      ?lstr52_main
0x2490	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2491	0x3000      	MOVLW      hi_addr(?lstr52_main)
0x2492	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2493	0x3008      	MOVLW      8
0x2494	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2495	0x3180      	MOVLP      0
0x2496	0x24B4      	CALL       _led_wr_str
0x2497	0x31A0      	MOVLP      32
;main.c,432 :: 		if(Auto) led_wr_str (0, 8, ".", 1);
0x2498	0x0027      	MOVLB      7
0x2499	0x0861      	MOVF       _Auto, 0
0x249A	0x1903      	BTFSC      STATUS, 2
0x249B	0x2CA9      	GOTO       L_lcd_prep317
0x249C	0x002C      	MOVLB      12
0x249D	0x01A4      	CLRF       FARG_led_wr_str_col
0x249E	0x3008      	MOVLW      8
0x249F	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x24A0	0x303D      	MOVLW      ?lstr53_main
0x24A1	0x00A6      	MOVWF      FARG_led_wr_str_str
0x24A2	0x3000      	MOVLW      hi_addr(?lstr53_main)
0x24A3	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x24A4	0x3001      	MOVLW      1
0x24A5	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x24A6	0x3180      	MOVLP      0
0x24A7	0x24B4      	CALL       _led_wr_str
0x24A8	0x31A0      	MOVLP      32
L_lcd_prep317:
;main.c,433 :: 		}
L_lcd_prep310:
L_lcd_prep309:
;main.c,434 :: 		asm CLRWDT;
0x24A9	0x0064      	CLRWDT
;main.c,435 :: 		lcd_ind();
0x24AA	0x3188      	MOVLP      8
0x24AB	0x2000      	CALL       _lcd_ind
0x24AC	0x31A0      	MOVLP      32
;main.c,436 :: 		return;
;main.c,437 :: 		}
L_end_lcd_prep:
0x24AD	0x0008      	RETURN
; end of _lcd_prep
_tune:
;main.h,378 :: 		void tune() {
;main.h,380 :: 		asm CLRWDT;
0x24AE	0x0064      	CLRWDT
;main.h,382 :: 		p_cnt = 0;
0x24AF	0x0025      	MOVLB      5
0x24B0	0x01EF      	CLRF       _p_cnt
;main.h,383 :: 		P_max = 0;
0x24B1	0x002A      	MOVLB      10
0x24B2	0x01BC      	CLRF       _P_max
0x24B3	0x01BD      	CLRF       _P_max+1
;main.h,385 :: 		rready = 0;
0x24B4	0x0026      	MOVLB      6
0x24B5	0x01DE      	CLRF       _rready
;main.h,386 :: 		get_swr();
0x24B6	0x3198      	MOVLP      24
0x24B7	0x2472      	CALL       _get_swr
0x24B8	0x31A0      	MOVLP      32
;main.h,387 :: 		if(SWR<110) return;
0x24B9	0x3080      	MOVLW      128
0x24BA	0x002A      	MOVLB      10
0x24BB	0x065D      	XORWF      _SWR+1, 0
0x24BC	0x00F0      	MOVWF      R0
0x24BD	0x3080      	MOVLW      128
0x24BE	0x0270      	SUBWF      R0, 0
0x24BF	0x1D03      	BTFSS      STATUS, 2
0x24C0	0x2CC3      	GOTO       L__tune678
0x24C1	0x306E      	MOVLW      110
0x24C2	0x025C      	SUBWF      _SWR, 0
L__tune678:
0x24C3	0x1803      	BTFSC      STATUS, 0
0x24C4	0x2CC6      	GOTO       L_tune138
0x24C5	0x2D9A      	GOTO       L_end_tune
L_tune138:
;main.h,388 :: 		atu_reset();
0x24C6	0x3198      	MOVLP      24
0x24C7	0x201E      	CALL       _atu_reset
0x24C8	0x31A0      	MOVLP      32
;main.h,389 :: 		if(Loss_ind==0) lcd_ind();
0x24C9	0x0024      	MOVLB      4
0x24CA	0x086B      	MOVF       main_Loss_ind, 0
0x24CB	0x3A00      	XORLW      0
0x24CC	0x1D03      	BTFSS      STATUS, 2
0x24CD	0x2CD1      	GOTO       L_tune139
0x24CE	0x3188      	MOVLP      8
0x24CF	0x2000      	CALL       _lcd_ind
0x24D0	0x31A0      	MOVLP      32
L_tune139:
;main.h,390 :: 		Delay_ms(50);
0x24D1	0x3002      	MOVLW      2
0x24D2	0x00FB      	MOVWF      R11
0x24D3	0x3004      	MOVLW      4
0x24D4	0x00FC      	MOVWF      R12
0x24D5	0x30BA      	MOVLW      186
0x24D6	0x00FD      	MOVWF      R13
L_tune140:
0x24D7	0x0BFD      	DECFSZ     R13, 1
0x24D8	0x2CD7      	GOTO       L_tune140
0x24D9	0x0BFC      	DECFSZ     R12, 1
0x24DA	0x2CD7      	GOTO       L_tune140
0x24DB	0x0BFB      	DECFSZ     R11, 1
0x24DC	0x2CD7      	GOTO       L_tune140
0x24DD	0x0000      	NOP
;main.h,391 :: 		get_swr();
0x24DE	0x3198      	MOVLP      24
0x24DF	0x2472      	CALL       _get_swr
0x24E0	0x31A0      	MOVLP      32
;main.h,392 :: 		swr_a = SWR;
0x24E1	0x002A      	MOVLB      10
0x24E2	0x085C      	MOVF       _SWR, 0
0x24E3	0x0029      	MOVLB      9
0x24E4	0x00EA      	MOVWF      _swr_a
0x24E5	0x002A      	MOVLB      10
0x24E6	0x085D      	MOVF       _SWR+1, 0
0x24E7	0x0029      	MOVLB      9
0x24E8	0x00EB      	MOVWF      _swr_a+1
;main.h,393 :: 		if(SWR<110) return;
0x24E9	0x3080      	MOVLW      128
0x24EA	0x002A      	MOVLB      10
0x24EB	0x065D      	XORWF      _SWR+1, 0
0x24EC	0x00F0      	MOVWF      R0
0x24ED	0x3080      	MOVLW      128
0x24EE	0x0270      	SUBWF      R0, 0
0x24EF	0x1D03      	BTFSS      STATUS, 2
0x24F0	0x2CF3      	GOTO       L__tune679
0x24F1	0x306E      	MOVLW      110
0x24F2	0x025C      	SUBWF      _SWR, 0
L__tune679:
0x24F3	0x1803      	BTFSC      STATUS, 0
0x24F4	0x2CF6      	GOTO       L_tune141
0x24F5	0x2D9A      	GOTO       L_end_tune
L_tune141:
;main.h,394 :: 		if(max_swr>110 & SWR>max_swr) return;
0x24F6	0x3080      	MOVLW      128
0x24F7	0x00F1      	MOVWF      R1
0x24F8	0x3080      	MOVLW      128
0x24F9	0x0641      	XORWF      main_max_swr+1, 0
0x24FA	0x0271      	SUBWF      R1, 0
0x24FB	0x1D03      	BTFSS      STATUS, 2
0x24FC	0x2CFF      	GOTO       L__tune680
0x24FD	0x0840      	MOVF       main_max_swr, 0
0x24FE	0x3C6E      	SUBLW      110
L__tune680:
0x24FF	0x3001      	MOVLW      1
0x2500	0x1803      	BTFSC      STATUS, 0
0x2501	0x3000      	MOVLW      0
0x2502	0x00F1      	MOVWF      R1
0x2503	0x3080      	MOVLW      128
0x2504	0x0641      	XORWF      main_max_swr+1, 0
0x2505	0x00F0      	MOVWF      R0
0x2506	0x3080      	MOVLW      128
0x2507	0x065D      	XORWF      _SWR+1, 0
0x2508	0x0270      	SUBWF      R0, 0
0x2509	0x1D03      	BTFSS      STATUS, 2
0x250A	0x2D0D      	GOTO       L__tune681
0x250B	0x085C      	MOVF       _SWR, 0
0x250C	0x0240      	SUBWF      main_max_swr, 0
L__tune681:
0x250D	0x3001      	MOVLW      1
0x250E	0x1803      	BTFSC      STATUS, 0
0x250F	0x3000      	MOVLW      0
0x2510	0x00F0      	MOVWF      R0
0x2511	0x0871      	MOVF       R1, 0
0x2512	0x05F0      	ANDWF      R0, 1
0x2513	0x1903      	BTFSC      STATUS, 2
0x2514	0x2D16      	GOTO       L_tune142
0x2515	0x2D9A      	GOTO       L_end_tune
L_tune142:
;main.h,396 :: 		sub_tune(); if(SWR==0) {atu_reset(); return;}
0x2516	0x21DC      	CALL       _sub_tune
0x2517	0x3000      	MOVLW      0
0x2518	0x002A      	MOVLB      10
0x2519	0x065D      	XORWF      _SWR+1, 0
0x251A	0x1D03      	BTFSS      STATUS, 2
0x251B	0x2D1E      	GOTO       L__tune682
0x251C	0x3000      	MOVLW      0
0x251D	0x065C      	XORWF      _SWR, 0
L__tune682:
0x251E	0x1D03      	BTFSS      STATUS, 2
0x251F	0x2D24      	GOTO       L_tune143
0x2520	0x3198      	MOVLP      24
0x2521	0x201E      	CALL       _atu_reset
0x2522	0x31A0      	MOVLP      32
0x2523	0x2D9A      	GOTO       L_end_tune
L_tune143:
;main.h,397 :: 		if(SWR<120) return;
0x2524	0x3080      	MOVLW      128
0x2525	0x002A      	MOVLB      10
0x2526	0x065D      	XORWF      _SWR+1, 0
0x2527	0x00F0      	MOVWF      R0
0x2528	0x3080      	MOVLW      128
0x2529	0x0270      	SUBWF      R0, 0
0x252A	0x1D03      	BTFSS      STATUS, 2
0x252B	0x2D2E      	GOTO       L__tune683
0x252C	0x3078      	MOVLW      120
0x252D	0x025C      	SUBWF      _SWR, 0
L__tune683:
0x252E	0x1803      	BTFSC      STATUS, 0
0x252F	0x2D31      	GOTO       L_tune144
0x2530	0x2D9A      	GOTO       L_end_tune
L_tune144:
;main.h,398 :: 		if(C_q==5 & L_q==5) return;
0x2531	0x0026      	MOVLB      6
0x2532	0x085C      	MOVF       main_C_q, 0
0x2533	0x3A05      	XORLW      5
0x2534	0x3001      	MOVLW      1
0x2535	0x1D03      	BTFSS      STATUS, 2
0x2536	0x3000      	MOVLW      0
0x2537	0x00F1      	MOVWF      R1
0x2538	0x085D      	MOVF       main_L_q, 0
0x2539	0x3A05      	XORLW      5
0x253A	0x3001      	MOVLW      1
0x253B	0x1D03      	BTFSS      STATUS, 2
0x253C	0x3000      	MOVLW      0
0x253D	0x00F0      	MOVWF      R0
0x253E	0x0871      	MOVF       R1, 0
0x253F	0x05F0      	ANDWF      R0, 1
0x2540	0x1903      	BTFSC      STATUS, 2
0x2541	0x2D43      	GOTO       L_tune145
0x2542	0x2D9A      	GOTO       L_end_tune
L_tune145:
;main.h,400 :: 		if(L_q>5) {
0x2543	0x085D      	MOVF       main_L_q, 0
0x2544	0x3C05      	SUBLW      5
0x2545	0x1803      	BTFSC      STATUS, 0
0x2546	0x2D4D      	GOTO       L_tune146
;main.h,401 :: 		step_ind = L_mult;
0x2547	0x0021      	MOVLB      1
0x2548	0x086F      	MOVF       main_L_mult, 0
0x2549	0x00E9      	MOVWF      main_step_ind
;main.h,402 :: 		L_mult = 1;
0x254A	0x3001      	MOVLW      1
0x254B	0x00EF      	MOVWF      main_L_mult
;main.h,403 :: 		sharp_ind();
0x254C	0x2000      	CALL       _sharp_ind
;main.h,404 :: 		}
L_tune146:
;main.h,405 :: 		if(SWR<120) return;
0x254D	0x3080      	MOVLW      128
0x254E	0x002A      	MOVLB      10
0x254F	0x065D      	XORWF      _SWR+1, 0
0x2550	0x00F0      	MOVWF      R0
0x2551	0x3080      	MOVLW      128
0x2552	0x0270      	SUBWF      R0, 0
0x2553	0x1D03      	BTFSS      STATUS, 2
0x2554	0x2D57      	GOTO       L__tune684
0x2555	0x3078      	MOVLW      120
0x2556	0x025C      	SUBWF      _SWR, 0
L__tune684:
0x2557	0x1803      	BTFSC      STATUS, 0
0x2558	0x2D5A      	GOTO       L_tune147
0x2559	0x2D9A      	GOTO       L_end_tune
L_tune147:
;main.h,406 :: 		if(C_q>5) {
0x255A	0x0026      	MOVLB      6
0x255B	0x085C      	MOVF       main_C_q, 0
0x255C	0x3C05      	SUBLW      5
0x255D	0x1803      	BTFSC      STATUS, 0
0x255E	0x2D65      	GOTO       L_tune148
;main.h,407 :: 		step_cap = C_mult;  // = C_mult
0x255F	0x0028      	MOVLB      8
0x2560	0x0849      	MOVF       main_C_mult, 0
0x2561	0x00CA      	MOVWF      main_step_cap
;main.h,408 :: 		C_mult = 1;
0x2562	0x3001      	MOVLW      1
0x2563	0x00C9      	MOVWF      main_C_mult
;main.h,409 :: 		sharp_cap();
0x2564	0x20EE      	CALL       _sharp_cap
;main.h,410 :: 		}
L_tune148:
;main.h,411 :: 		if(L_q==5)L_mult = 1;
0x2565	0x0026      	MOVLB      6
0x2566	0x085D      	MOVF       main_L_q, 0
0x2567	0x3A05      	XORLW      5
0x2568	0x1D03      	BTFSS      STATUS, 2
0x2569	0x2D6E      	GOTO       L_tune149
0x256A	0x3001      	MOVLW      1
0x256B	0x0021      	MOVLB      1
0x256C	0x00EF      	MOVWF      main_L_mult
0x256D	0x2D7F      	GOTO       L_tune150
L_tune149:
;main.h,412 :: 		else if(L_q==6) L_mult = 2;
0x256E	0x0026      	MOVLB      6
0x256F	0x085D      	MOVF       main_L_q, 0
0x2570	0x3A06      	XORLW      6
0x2571	0x1D03      	BTFSS      STATUS, 2
0x2572	0x2D77      	GOTO       L_tune151
0x2573	0x3002      	MOVLW      2
0x2574	0x0021      	MOVLB      1
0x2575	0x00EF      	MOVWF      main_L_mult
0x2576	0x2D7F      	GOTO       L_tune152
L_tune151:
;main.h,413 :: 		else if(L_q==7) L_mult = 4;
0x2577	0x0026      	MOVLB      6
0x2578	0x085D      	MOVF       main_L_q, 0
0x2579	0x3A07      	XORLW      7
0x257A	0x1D03      	BTFSS      STATUS, 2
0x257B	0x2D7F      	GOTO       L_tune153
0x257C	0x3004      	MOVLW      4
0x257D	0x0021      	MOVLB      1
0x257E	0x00EF      	MOVWF      main_L_mult
L_tune153:
L_tune152:
L_tune150:
;main.h,414 :: 		if(C_q==5) C_mult =1;
0x257F	0x0026      	MOVLB      6
0x2580	0x085C      	MOVF       main_C_q, 0
0x2581	0x3A05      	XORLW      5
0x2582	0x1D03      	BTFSS      STATUS, 2
0x2583	0x2D88      	GOTO       L_tune154
0x2584	0x3001      	MOVLW      1
0x2585	0x0028      	MOVLB      8
0x2586	0x00C9      	MOVWF      main_C_mult
0x2587	0x2D99      	GOTO       L_tune155
L_tune154:
;main.h,415 :: 		else if(C_q==6) C_mult = 2;
0x2588	0x0026      	MOVLB      6
0x2589	0x085C      	MOVF       main_C_q, 0
0x258A	0x3A06      	XORLW      6
0x258B	0x1D03      	BTFSS      STATUS, 2
0x258C	0x2D91      	GOTO       L_tune156
0x258D	0x3002      	MOVLW      2
0x258E	0x0028      	MOVLB      8
0x258F	0x00C9      	MOVWF      main_C_mult
0x2590	0x2D99      	GOTO       L_tune157
L_tune156:
;main.h,416 :: 		else if(C_q==7) C_mult = 4;
0x2591	0x0026      	MOVLB      6
0x2592	0x085C      	MOVF       main_C_q, 0
0x2593	0x3A07      	XORLW      7
0x2594	0x1D03      	BTFSS      STATUS, 2
0x2595	0x2D99      	GOTO       L_tune158
0x2596	0x3004      	MOVLW      4
0x2597	0x0028      	MOVLB      8
0x2598	0x00C9      	MOVWF      main_C_mult
L_tune158:
L_tune157:
L_tune155:
;main.h,417 :: 		asm CLRWDT;
0x2599	0x0064      	CLRWDT
;main.h,418 :: 		return;
;main.h,419 :: 		}
L_end_tune:
0x259A	0x0008      	RETURN
; end of _tune
_btn_push:
;main.c,356 :: 		void btn_push() {
;main.c,357 :: 		asm CLRWDT;
0x259B	0x0064      	CLRWDT
;main.c,358 :: 		if(type==4 | type==5)  {   // 128*64 OLED
0x259C	0x002A      	MOVLB      10
0x259D	0x086D      	MOVF       _type, 0
0x259E	0x3A04      	XORLW      4
0x259F	0x3001      	MOVLW      1
0x25A0	0x1D03      	BTFSS      STATUS, 2
0x25A1	0x3000      	MOVLW      0
0x25A2	0x00F1      	MOVWF      R1
0x25A3	0x086D      	MOVF       _type, 0
0x25A4	0x3A05      	XORLW      5
0x25A5	0x3001      	MOVLW      1
0x25A6	0x1D03      	BTFSS      STATUS, 2
0x25A7	0x3000      	MOVLW      0
0x25A8	0x00F0      	MOVWF      R0
0x25A9	0x0871      	MOVF       R1, 0
0x25AA	0x04F0      	IORWF       R0, 1
0x25AB	0x1903      	BTFSC      STATUS, 2
0x25AC	0x2DBC      	GOTO       L_btn_push290
;main.c,359 :: 		led_wr_str (2, 16+12*4, "TUNE", 4);
0x25AD	0x3002      	MOVLW      2
0x25AE	0x002C      	MOVLB      12
0x25AF	0x00A4      	MOVWF      FARG_led_wr_str_col
0x25B0	0x3040      	MOVLW      64
0x25B1	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x25B2	0x3020      	MOVLW      ?lstr37_main
0x25B3	0x00A6      	MOVWF      FARG_led_wr_str_str
0x25B4	0x3003      	MOVLW      hi_addr(?lstr37_main)
0x25B5	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x25B6	0x3004      	MOVLW      4
0x25B7	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x25B8	0x3180      	MOVLP      0
0x25B9	0x24B4      	CALL       _led_wr_str
0x25BA	0x31A0      	MOVLP      32
;main.c,360 :: 		}
0x25BB	0x2DD3      	GOTO       L_btn_push291
L_btn_push290:
;main.c,361 :: 		else if(type!=0) {   // 1602 LCD & 128*32 OLED
0x25BC	0x002A      	MOVLB      10
0x25BD	0x086D      	MOVF       _type, 0
0x25BE	0x3A00      	XORLW      0
0x25BF	0x1903      	BTFSC      STATUS, 2
0x25C0	0x2DD0      	GOTO       L_btn_push292
;main.c,362 :: 		led_wr_str (1, 4, "TUNE", 4);
0x25C1	0x3001      	MOVLW      1
0x25C2	0x002C      	MOVLB      12
0x25C3	0x00A4      	MOVWF      FARG_led_wr_str_col
0x25C4	0x3004      	MOVLW      4
0x25C5	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x25C6	0x30E8      	MOVLW      ?lstr38_main
0x25C7	0x00A6      	MOVWF      FARG_led_wr_str_str
0x25C8	0x3002      	MOVLW      hi_addr(?lstr38_main)
0x25C9	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x25CA	0x3004      	MOVLW      4
0x25CB	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x25CC	0x3180      	MOVLP      0
0x25CD	0x24B4      	CALL       _led_wr_str
0x25CE	0x31A0      	MOVLP      32
;main.c,363 :: 		}
0x25CF	0x2DD3      	GOTO       L_btn_push293
L_btn_push292:
;main.c,365 :: 		LATB.B6 = 1;
0x25D0	0x0022      	MOVLB      2
0x25D1	0x170D      	BSF        LATB, 6
;main.c,366 :: 		LATB.B7 = 1;
0x25D2	0x178D      	BSF        LATB, 7
;main.c,367 :: 		}
L_btn_push293:
L_btn_push291:
;main.c,368 :: 		tune();
0x25D3	0x24AE      	CALL       _tune
;main.c,369 :: 		if(type==0) {    // real-time 2-colors led work
0x25D4	0x002A      	MOVLB      10
0x25D5	0x086D      	MOVF       _type, 0
0x25D6	0x3A00      	XORLW      0
0x25D7	0x1D03      	BTFSS      STATUS, 2
0x25D8	0x2DFC      	GOTO       L_btn_push294
;main.c,370 :: 		if(swr<=150) { LATB.B6 = 0; LATB.B7 = 1; } // Green
0x25D9	0x3080      	MOVLW      128
0x25DA	0x00F0      	MOVWF      R0
0x25DB	0x3080      	MOVLW      128
0x25DC	0x065D      	XORWF      _SWR+1, 0
0x25DD	0x0270      	SUBWF      R0, 0
0x25DE	0x1D03      	BTFSS      STATUS, 2
0x25DF	0x2DE2      	GOTO       L__btn_push699
0x25E0	0x085C      	MOVF       _SWR, 0
0x25E1	0x3C96      	SUBLW      150
L__btn_push699:
0x25E2	0x1C03      	BTFSS      STATUS, 0
0x25E3	0x2DE8      	GOTO       L_btn_push295
0x25E4	0x0022      	MOVLB      2
0x25E5	0x130D      	BCF        LATB, 6
0x25E6	0x178D      	BSF        LATB, 7
0x25E7	0x2DFB      	GOTO       L_btn_push296
L_btn_push295:
;main.c,371 :: 		else if(swr<=250) {PORTB.B6 = 0; PORTB.B7 = 0;} // Orange
0x25E8	0x3080      	MOVLW      128
0x25E9	0x00F0      	MOVWF      R0
0x25EA	0x3080      	MOVLW      128
0x25EB	0x002A      	MOVLB      10
0x25EC	0x065D      	XORWF      _SWR+1, 0
0x25ED	0x0270      	SUBWF      R0, 0
0x25EE	0x1D03      	BTFSS      STATUS, 2
0x25EF	0x2DF2      	GOTO       L__btn_push700
0x25F0	0x085C      	MOVF       _SWR, 0
0x25F1	0x3CFA      	SUBLW      250
L__btn_push700:
0x25F2	0x1C03      	BTFSS      STATUS, 0
0x25F3	0x2DF8      	GOTO       L_btn_push297
0x25F4	0x0020      	MOVLB      0
0x25F5	0x130D      	BCF        PORTB, 6
0x25F6	0x138D      	BCF        PORTB, 7
0x25F7	0x2DFB      	GOTO       L_btn_push298
L_btn_push297:
0x25F8	0x0020      	MOVLB      0
;main.c,372 :: 		else { PORTB.B6 = 1; PORTB.B7 = 0; }  // Red
0x25F9	0x170D      	BSF        PORTB, 6
0x25FA	0x138D      	BCF        PORTB, 7
L_btn_push298:
L_btn_push296:
;main.c,373 :: 		}
0x25FB	0x2E11      	GOTO       L_btn_push299
L_btn_push294:
0x25FC	0x0020      	MOVLB      0
;main.c,374 :: 		else if(Loss_mode==0 | Loss_ind==0) lcd_ind();
0x25FD	0x0848      	MOVF       _Loss_mode, 0
0x25FE	0x3A00      	XORLW      0
0x25FF	0x3001      	MOVLW      1
0x2600	0x1D03      	BTFSS      STATUS, 2
0x2601	0x3000      	MOVLW      0
0x2602	0x00F1      	MOVWF      R1
0x2603	0x0024      	MOVLB      4
0x2604	0x086B      	MOVF       main_Loss_ind, 0
0x2605	0x3A00      	XORLW      0
0x2606	0x3001      	MOVLW      1
0x2607	0x1D03      	BTFSS      STATUS, 2
0x2608	0x3000      	MOVLW      0
0x2609	0x00F0      	MOVWF      R0
0x260A	0x0871      	MOVF       R1, 0
0x260B	0x04F0      	IORWF       R0, 1
0x260C	0x1903      	BTFSC      STATUS, 2
0x260D	0x2E11      	GOTO       L_btn_push300
0x260E	0x3188      	MOVLP      8
0x260F	0x2000      	CALL       _lcd_ind
0x2610	0x31A0      	MOVLP      32
L_btn_push300:
L_btn_push299:
;main.c,375 :: 		EEPROM_Write(255, cap);
0x2611	0x30FF      	MOVLW      255
0x2612	0x002B      	MOVLB      11
0x2613	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x2614	0x0027      	MOVLB      7
0x2615	0x085B      	MOVF       main_cap, 0
0x2616	0x002B      	MOVLB      11
0x2617	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x2618	0x3198      	MOVLP      24
0x2619	0x2000      	CALL       _EEPROM_Write
0x261A	0x31A0      	MOVLP      32
;main.c,376 :: 		EEPROM_Write(254, ind);
0x261B	0x30FE      	MOVLW      254
0x261C	0x002B      	MOVLB      11
0x261D	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x261E	0x0028      	MOVLB      8
0x261F	0x0831      	MOVF       main_ind, 0
0x2620	0x002B      	MOVLB      11
0x2621	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x2622	0x3198      	MOVLP      24
0x2623	0x2000      	CALL       _EEPROM_Write
0x2624	0x31A0      	MOVLP      32
;main.c,377 :: 		EEPROM_Write(253, SW);
0x2625	0x30FD      	MOVLW      253
0x2626	0x002B      	MOVLB      11
0x2627	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x2628	0x0028      	MOVLB      8
0x2629	0x0847      	MOVF       main_SW, 0
0x262A	0x002B      	MOVLB      11
0x262B	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x262C	0x3198      	MOVLP      24
0x262D	0x2000      	CALL       _EEPROM_Write
0x262E	0x31A0      	MOVLP      32
;main.c,378 :: 		EEPROM_Write(252, swr_a/256);
0x262F	0x30FC      	MOVLW      252
0x2630	0x002B      	MOVLB      11
0x2631	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x2632	0x0029      	MOVLB      9
0x2633	0x086B      	MOVF       _swr_a+1, 0
0x2634	0x00F0      	MOVWF      R0
0x2635	0x3000      	MOVLW      0
0x2636	0x1BEB      	BTFSC      _swr_a+1, 7
0x2637	0x30FF      	MOVLW      255
0x2638	0x00F1      	MOVWF      R1
0x2639	0x0870      	MOVF       R0, 0
0x263A	0x002B      	MOVLB      11
0x263B	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x263C	0x3198      	MOVLP      24
0x263D	0x2000      	CALL       _EEPROM_Write
0x263E	0x31A0      	MOVLP      32
;main.c,379 :: 		EEPROM_Write(251, swr_a%256);
0x263F	0x30FB      	MOVLW      251
0x2640	0x002B      	MOVLB      11
0x2641	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x2642	0x3000      	MOVLW      0
0x2643	0x00F4      	MOVWF      R4
0x2644	0x3001      	MOVLW      1
0x2645	0x00F5      	MOVWF      R5
0x2646	0x0029      	MOVLB      9
0x2647	0x086A      	MOVF       _swr_a, 0
0x2648	0x00F0      	MOVWF      R0
0x2649	0x086B      	MOVF       _swr_a+1, 0
0x264A	0x00F1      	MOVWF      R1
0x264B	0x3198      	MOVLP      24
0x264C	0x253F      	CALL       _Div_16x16_S
0x264D	0x31A0      	MOVLP      32
0x264E	0x0878      	MOVF       R8, 0
0x264F	0x00F0      	MOVWF      R0
0x2650	0x0879      	MOVF       R9, 0
0x2651	0x00F1      	MOVWF      R1
0x2652	0x0870      	MOVF       R0, 0
0x2653	0x002B      	MOVLB      11
0x2654	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x2655	0x3198      	MOVLP      24
0x2656	0x2000      	CALL       _EEPROM_Write
0x2657	0x31A0      	MOVLP      32
;main.c,380 :: 		SWR_old = 10000;
0x2658	0x3010      	MOVLW      16
0x2659	0x0029      	MOVLB      9
0x265A	0x00D6      	MOVWF      _SWR_old
0x265B	0x3027      	MOVLW      39
0x265C	0x00D7      	MOVWF      _SWR_old+1
;main.c,381 :: 		Power_old = 10000;
0x265D	0x3010      	MOVLW      16
0x265E	0x0021      	MOVLB      1
0x265F	0x00DE      	MOVWF      _Power_old
0x2660	0x3027      	MOVLW      39
0x2661	0x00DF      	MOVWF      _Power_old+1
;main.c,382 :: 		lcd_pwr();
0x2662	0x3198      	MOVLP      24
0x2663	0x203A      	CALL       _lcd_pwr
0x2664	0x31A0      	MOVLP      32
;main.c,383 :: 		SWR_fixed_old = SWR;
0x2665	0x002A      	MOVLB      10
0x2666	0x085C      	MOVF       _SWR, 0
0x2667	0x0027      	MOVLB      7
0x2668	0x00DF      	MOVWF      _SWR_fixed_old
0x2669	0x002A      	MOVLB      10
0x266A	0x085D      	MOVF       _SWR+1, 0
0x266B	0x0027      	MOVLB      7
0x266C	0x00E0      	MOVWF      _SWR_fixed_old+1
;main.c,384 :: 		p_Tx = 0;
0x266D	0x0022      	MOVLB      2
0x266E	0x138C      	BCF        LATA7_bit, BitPos(LATA7_bit+0)
;main.c,385 :: 		n_Tx = 1;
0x266F	0x170C      	BSF        LATA6_bit, BitPos(LATA6_bit+0)
;main.c,386 :: 		asm CLRWDT;
0x2670	0x0064      	CLRWDT
;main.c,387 :: 		return;
;main.c,388 :: 		}
L_end_btn_push:
0x2671	0x0008      	RETURN
; end of _btn_push
_led_init:
;oled_control.c,30 :: 		void led_init (void) {
;oled_control.c,31 :: 		shift_line = EEPROM_read(7);
0x2672	0x3007      	MOVLW      7
0x2673	0x002B      	MOVLB      11
0x2674	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x2675	0x3190      	MOVLP      16
0x2676	0x27F5      	CALL       _EEPROM_Read
0x2677	0x31A0      	MOVLP      32
0x2678	0x0870      	MOVF       R0, 0
0x2679	0x002A      	MOVLB      10
0x267A	0x00B7      	MOVWF      oled_control_shift_line
;oled_control.c,32 :: 		oled_shift = EEPROM_read(8);
0x267B	0x3008      	MOVLW      8
0x267C	0x002B      	MOVLB      11
0x267D	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x267E	0x3190      	MOVLP      16
0x267F	0x27F5      	CALL       _EEPROM_Read
0x2680	0x31A0      	MOVLP      32
0x2681	0x0870      	MOVF       R0, 0
0x2682	0x002A      	MOVLB      10
0x2683	0x00B9      	MOVWF      oled_control_oled_shift
;oled_control.c,33 :: 		if(led_type>1) oled_init();   //    OLED
0x2684	0x083B      	MOVF       oled_control_led_type, 0
0x2685	0x3C01      	SUBLW      1
0x2686	0x1803      	BTFSC      STATUS, 0
0x2687	0x2E8C      	GOTO       L_led_init6
0x2688	0x31A8      	MOVLP      40
0x2689	0x2578      	CALL       _oled_init
0x268A	0x31A0      	MOVLP      32
0x268B	0x2EFF      	GOTO       L_led_init7
L_led_init6:
;oled_control.c,34 :: 		else if(led_type==1) {     //       1602 LCD display init
0x268C	0x002A      	MOVLB      10
0x268D	0x083B      	MOVF       oled_control_led_type, 0
0x268E	0x3A01      	XORLW      1
0x268F	0x1D03      	BTFSS      STATUS, 2
0x2690	0x2EFF      	GOTO       L_led_init8
;oled_control.c,35 :: 		LED = 1;
0x2691	0x3001      	MOVLW      1
0x2692	0x00B2      	MOVWF      oled_control_LED
;oled_control.c,36 :: 		RS = 0;  // Command
0x2693	0x01B8      	CLRF       oled_control_RS
;oled_control.c,38 :: 		led_send(3);
0x2694	0x3003      	MOVLW      3
0x2695	0x002C      	MOVLB      12
0x2696	0x00AE      	MOVWF      FARG_led_send_nible
0x2697	0x3180      	MOVLP      0
0x2698	0x22C1      	CALL       _led_send
0x2699	0x31A0      	MOVLP      32
;oled_control.c,39 :: 		delay_ms(5);
0x269A	0x301A      	MOVLW      26
0x269B	0x00FC      	MOVWF      R12
0x269C	0x30F8      	MOVLW      248
0x269D	0x00FD      	MOVWF      R13
L_led_init9:
0x269E	0x0BFD      	DECFSZ     R13, 1
0x269F	0x2E9E      	GOTO       L_led_init9
0x26A0	0x0BFC      	DECFSZ     R12, 1
0x26A1	0x2E9E      	GOTO       L_led_init9
0x26A2	0x0000      	NOP
;oled_control.c,40 :: 		led_send(3);
0x26A3	0x3003      	MOVLW      3
0x26A4	0x002C      	MOVLB      12
0x26A5	0x00AE      	MOVWF      FARG_led_send_nible
0x26A6	0x3180      	MOVLP      0
0x26A7	0x22C1      	CALL       _led_send
0x26A8	0x31A0      	MOVLP      32
;oled_control.c,41 :: 		delay_ms(1);
0x26A9	0x3006      	MOVLW      6
0x26AA	0x00FC      	MOVWF      R12
0x26AB	0x3030      	MOVLW      48
0x26AC	0x00FD      	MOVWF      R13
L_led_init10:
0x26AD	0x0BFD      	DECFSZ     R13, 1
0x26AE	0x2EAD      	GOTO       L_led_init10
0x26AF	0x0BFC      	DECFSZ     R12, 1
0x26B0	0x2EAD      	GOTO       L_led_init10
0x26B1	0x0000      	NOP
;oled_control.c,42 :: 		led_send(3);
0x26B2	0x3003      	MOVLW      3
0x26B3	0x002C      	MOVLB      12
0x26B4	0x00AE      	MOVWF      FARG_led_send_nible
0x26B5	0x3180      	MOVLP      0
0x26B6	0x22C1      	CALL       _led_send
0x26B7	0x31A0      	MOVLP      32
;oled_control.c,43 :: 		led_send(2);
0x26B8	0x3002      	MOVLW      2
0x26B9	0x002C      	MOVLB      12
0x26BA	0x00AE      	MOVWF      FARG_led_send_nible
0x26BB	0x3180      	MOVLP      0
0x26BC	0x22C1      	CALL       _led_send
0x26BD	0x31A0      	MOVLP      32
;oled_control.c,45 :: 		led_send(2);
0x26BE	0x3002      	MOVLW      2
0x26BF	0x002C      	MOVLB      12
0x26C0	0x00AE      	MOVWF      FARG_led_send_nible
0x26C1	0x3180      	MOVLP      0
0x26C2	0x22C1      	CALL       _led_send
0x26C3	0x31A0      	MOVLP      32
;oled_control.c,46 :: 		led_send(8); //
0x26C4	0x3008      	MOVLW      8
0x26C5	0x002C      	MOVLB      12
0x26C6	0x00AE      	MOVWF      FARG_led_send_nible
0x26C7	0x3180      	MOVLP      0
0x26C8	0x22C1      	CALL       _led_send
0x26C9	0x31A0      	MOVLP      32
;oled_control.c,48 :: 		led_send(0);
0x26CA	0x002C      	MOVLB      12
0x26CB	0x01AE      	CLRF       FARG_led_send_nible
0x26CC	0x3180      	MOVLP      0
0x26CD	0x22C1      	CALL       _led_send
0x26CE	0x31A0      	MOVLP      32
;oled_control.c,49 :: 		led_send(8);   // LCD OFF
0x26CF	0x3008      	MOVLW      8
0x26D0	0x002C      	MOVLB      12
0x26D1	0x00AE      	MOVWF      FARG_led_send_nible
0x26D2	0x3180      	MOVLP      0
0x26D3	0x22C1      	CALL       _led_send
0x26D4	0x31A0      	MOVLP      32
;oled_control.c,51 :: 		led_send(0);
0x26D5	0x002C      	MOVLB      12
0x26D6	0x01AE      	CLRF       FARG_led_send_nible
0x26D7	0x3180      	MOVLP      0
0x26D8	0x22C1      	CALL       _led_send
0x26D9	0x31A0      	MOVLP      32
;oled_control.c,52 :: 		led_send(1);   // LCD clear
0x26DA	0x3001      	MOVLW      1
0x26DB	0x002C      	MOVLB      12
0x26DC	0x00AE      	MOVWF      FARG_led_send_nible
0x26DD	0x3180      	MOVLP      0
0x26DE	0x22C1      	CALL       _led_send
0x26DF	0x31A0      	MOVLP      32
;oled_control.c,53 :: 		delay_ms(5);
0x26E0	0x301A      	MOVLW      26
0x26E1	0x00FC      	MOVWF      R12
0x26E2	0x30F8      	MOVLW      248
0x26E3	0x00FD      	MOVWF      R13
L_led_init11:
0x26E4	0x0BFD      	DECFSZ     R13, 1
0x26E5	0x2EE4      	GOTO       L_led_init11
0x26E6	0x0BFC      	DECFSZ     R12, 1
0x26E7	0x2EE4      	GOTO       L_led_init11
0x26E8	0x0000      	NOP
;oled_control.c,55 :: 		led_send(0);
0x26E9	0x002C      	MOVLB      12
0x26EA	0x01AE      	CLRF       FARG_led_send_nible
0x26EB	0x3180      	MOVLP      0
0x26EC	0x22C1      	CALL       _led_send
0x26ED	0x31A0      	MOVLP      32
;oled_control.c,56 :: 		led_send(4 + 2);  // I/D, S
0x26EE	0x3006      	MOVLW      6
0x26EF	0x002C      	MOVLB      12
0x26F0	0x00AE      	MOVWF      FARG_led_send_nible
0x26F1	0x3180      	MOVLP      0
0x26F2	0x22C1      	CALL       _led_send
0x26F3	0x31A0      	MOVLP      32
;oled_control.c,58 :: 		led_send(0);
0x26F4	0x002C      	MOVLB      12
0x26F5	0x01AE      	CLRF       FARG_led_send_nible
0x26F6	0x3180      	MOVLP      0
0x26F7	0x22C1      	CALL       _led_send
0x26F8	0x31A0      	MOVLP      32
;oled_control.c,59 :: 		led_send(8 + 4 + 0 + 0);  // LCD ON, Cursor, Blink Cursor
0x26F9	0x300C      	MOVLW      12
0x26FA	0x002C      	MOVLB      12
0x26FB	0x00AE      	MOVWF      FARG_led_send_nible
0x26FC	0x3180      	MOVLP      0
0x26FD	0x22C1      	CALL       _led_send
0x26FE	0x31A0      	MOVLP      32
;oled_control.c,60 :: 		}
L_led_init8:
L_led_init7:
;oled_control.c,61 :: 		}
L_end_led_init:
0x26FF	0x0008      	RETURN
; end of _led_init
_user_setup:
;main.c,828 :: 		void user_setup()  {
;main.c,831 :: 		usr_set = 1;
0x2800	0x3001      	MOVLW      1
0x2801	0x002B      	MOVLB      11
0x2802	0x00A9      	MOVWF      user_setup_usr_set_L0
0x2803	0x3000      	MOVLW      0
0x2804	0x00AA      	MOVWF      user_setup_usr_set_L0+1
;main.c,832 :: 		asm CLRWDT;
0x2805	0x0064      	CLRWDT
;main.c,833 :: 		dysp_on();          // dysplay ON
0x2806	0x3188      	MOVLP      8
0x2807	0x2782      	CALL       _dysp_on
0x2808	0x31A8      	MOVLP      40
;main.c,834 :: 		if(type==4 | type==5) {    // 128*64 OLED
0x2809	0x002A      	MOVLB      10
0x280A	0x086D      	MOVF       _type, 0
0x280B	0x3A04      	XORLW      4
0x280C	0x3001      	MOVLW      1
0x280D	0x1D03      	BTFSS      STATUS, 2
0x280E	0x3000      	MOVLW      0
0x280F	0x00F1      	MOVWF      R1
0x2810	0x086D      	MOVF       _type, 0
0x2811	0x3A05      	XORLW      5
0x2812	0x3001      	MOVLW      1
0x2813	0x1D03      	BTFSS      STATUS, 2
0x2814	0x3000      	MOVLW      0
0x2815	0x00F0      	MOVWF      R0
0x2816	0x0871      	MOVF       R1, 0
0x2817	0x04F0      	IORWF       R0, 1
0x2818	0x1903      	BTFSC      STATUS, 2
0x2819	0x2860      	GOTO       L_user_setup468
;main.c,835 :: 		led_wr_str (0, 1, "          ", 10);
0x281A	0x002C      	MOVLB      12
0x281B	0x01A4      	CLRF       FARG_led_wr_str_col
0x281C	0x3001      	MOVLW      1
0x281D	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x281E	0x30D1      	MOVLW      ?lstr93_main
0x281F	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2820	0x3001      	MOVLW      hi_addr(?lstr93_main)
0x2821	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2822	0x300A      	MOVLW      10
0x2823	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2824	0x3180      	MOVLP      0
0x2825	0x24B4      	CALL       _led_wr_str
0x2826	0x31A8      	MOVLP      40
;main.c,836 :: 		led_wr_str (2, 1, "          ", 10);
0x2827	0x3002      	MOVLW      2
0x2828	0x002C      	MOVLB      12
0x2829	0x00A4      	MOVWF      FARG_led_wr_str_col
0x282A	0x3001      	MOVLW      1
0x282B	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x282C	0x30C6      	MOVLW      ?lstr94_main
0x282D	0x00A6      	MOVWF      FARG_led_wr_str_str
0x282E	0x3001      	MOVLW      hi_addr(?lstr94_main)
0x282F	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2830	0x300A      	MOVLW      10
0x2831	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2832	0x3180      	MOVLP      0
0x2833	0x24B4      	CALL       _led_wr_str
0x2834	0x31A8      	MOVLP      40
;main.c,837 :: 		led_wr_str (4, 1, "          ", 10);
0x2835	0x3004      	MOVLW      4
0x2836	0x002C      	MOVLB      12
0x2837	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2838	0x3001      	MOVLW      1
0x2839	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x283A	0x30BB      	MOVLW      ?lstr95_main
0x283B	0x00A6      	MOVWF      FARG_led_wr_str_str
0x283C	0x3001      	MOVLW      hi_addr(?lstr95_main)
0x283D	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x283E	0x300A      	MOVLW      10
0x283F	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2840	0x3180      	MOVLP      0
0x2841	0x24B4      	CALL       _led_wr_str
0x2842	0x31A8      	MOVLP      40
;main.c,838 :: 		led_wr_str (6, 1, "          ", 10);
0x2843	0x3006      	MOVLW      6
0x2844	0x002C      	MOVLB      12
0x2845	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2846	0x3001      	MOVLW      1
0x2847	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2848	0x30DC      	MOVLW      ?lstr96_main
0x2849	0x00A6      	MOVWF      FARG_led_wr_str_str
0x284A	0x3001      	MOVLW      hi_addr(?lstr96_main)
0x284B	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x284C	0x300A      	MOVLW      10
0x284D	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x284E	0x3180      	MOVLP      0
0x284F	0x24B4      	CALL       _led_wr_str
0x2850	0x31A8      	MOVLP      40
;main.c,839 :: 		asm CLRWDT;
0x2851	0x0064      	CLRWDT
;main.c,840 :: 		delay_ms(200);
0x2852	0x3005      	MOVLW      5
0x2853	0x00FB      	MOVWF      R11
0x2854	0x300F      	MOVLW      15
0x2855	0x00FC      	MOVWF      R12
0x2856	0x30F1      	MOVLW      241
0x2857	0x00FD      	MOVWF      R13
L_user_setup469:
0x2858	0x0BFD      	DECFSZ     R13, 1
0x2859	0x2858      	GOTO       L_user_setup469
0x285A	0x0BFC      	DECFSZ     R12, 1
0x285B	0x2858      	GOTO       L_user_setup469
0x285C	0x0BFB      	DECFSZ     R11, 1
0x285D	0x2858      	GOTO       L_user_setup469
;main.c,841 :: 		asm CLRWDT;
0x285E	0x0064      	CLRWDT
;main.c,842 :: 		}
0x285F	0x288C      	GOTO       L_user_setup470
L_user_setup468:
;main.c,843 :: 		else if(type!=0) {   // 1602 LCD & 128*32 OLED
0x2860	0x002A      	MOVLB      10
0x2861	0x086D      	MOVF       _type, 0
0x2862	0x3A00      	XORLW      0
0x2863	0x1903      	BTFSC      STATUS, 2
0x2864	0x288C      	GOTO       L_user_setup471
;main.c,844 :: 		led_wr_str (0, 0, "                 ", 17);
0x2865	0x002C      	MOVLB      12
0x2866	0x01A4      	CLRF       FARG_led_wr_str_col
0x2867	0x01A5      	CLRF       FARG_led_wr_str_pos
0x2868	0x303C      	MOVLW      ?lstr97_main
0x2869	0x00A6      	MOVWF      FARG_led_wr_str_str
0x286A	0x3002      	MOVLW      hi_addr(?lstr97_main)
0x286B	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x286C	0x3011      	MOVLW      17
0x286D	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x286E	0x3180      	MOVLP      0
0x286F	0x24B4      	CALL       _led_wr_str
0x2870	0x31A8      	MOVLP      40
;main.c,845 :: 		led_wr_str (1, 0, "                 ", 17);
0x2871	0x3001      	MOVLW      1
0x2872	0x002C      	MOVLB      12
0x2873	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2874	0x01A5      	CLRF       FARG_led_wr_str_pos
0x2875	0x302A      	MOVLW      ?lstr98_main
0x2876	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2877	0x3002      	MOVLW      hi_addr(?lstr98_main)
0x2878	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2879	0x3011      	MOVLW      17
0x287A	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x287B	0x3180      	MOVLP      0
0x287C	0x24B4      	CALL       _led_wr_str
0x287D	0x31A8      	MOVLP      40
;main.c,846 :: 		asm CLRWDT;
0x287E	0x0064      	CLRWDT
;main.c,847 :: 		Delay_ms(200);
0x287F	0x3005      	MOVLW      5
0x2880	0x00FB      	MOVWF      R11
0x2881	0x300F      	MOVLW      15
0x2882	0x00FC      	MOVWF      R12
0x2883	0x30F1      	MOVLW      241
0x2884	0x00FD      	MOVWF      R13
L_user_setup472:
0x2885	0x0BFD      	DECFSZ     R13, 1
0x2886	0x2885      	GOTO       L_user_setup472
0x2887	0x0BFC      	DECFSZ     R12, 1
0x2888	0x2885      	GOTO       L_user_setup472
0x2889	0x0BFB      	DECFSZ     R11, 1
0x288A	0x2885      	GOTO       L_user_setup472
;main.c,848 :: 		asm CLRWDT;
0x288B	0x0064      	CLRWDT
;main.c,849 :: 		}
L_user_setup471:
L_user_setup470:
;main.c,857 :: 		while(usr_set > 0) {
L_user_setup473:
0x288C	0x3080      	MOVLW      128
0x288D	0x00F0      	MOVWF      R0
0x288E	0x3080      	MOVLW      128
0x288F	0x002B      	MOVLB      11
0x2890	0x062A      	XORWF      user_setup_usr_set_L0+1, 0
0x2891	0x0270      	SUBWF      R0, 0
0x2892	0x1D03      	BTFSS      STATUS, 2
0x2893	0x2896      	GOTO       L__user_setup759
0x2894	0x0829      	MOVF       user_setup_usr_set_L0, 0
0x2895	0x3C00      	SUBLW      0
L__user_setup759:
0x2896	0x1803      	BTFSC      STATUS, 0
0x2897	0x2CE9      	GOTO       L_user_setup474
;main.c,858 :: 		asm CLRWDT;
0x2898	0x0064      	CLRWDT
;main.c,859 :: 		if(usr_set == 1) {   // min SWR setup
0x2899	0x3000      	MOVLW      0
0x289A	0x062A      	XORWF      user_setup_usr_set_L0+1, 0
0x289B	0x1D03      	BTFSS      STATUS, 2
0x289C	0x289F      	GOTO       L__user_setup760
0x289D	0x3001      	MOVLW      1
0x289E	0x0629      	XORWF      user_setup_usr_set_L0, 0
L__user_setup760:
0x289F	0x1D03      	BTFSS      STATUS, 2
0x28A0	0x2975      	GOTO       L_user_setup475
;main.c,860 :: 		inttostr((Auto_delta / 10), swr_str);
0x28A1	0x300A      	MOVLW      10
0x28A2	0x00F4      	MOVWF      R4
0x28A3	0x3000      	MOVLW      0
0x28A4	0x00F5      	MOVWF      R5
0x28A5	0x002A      	MOVLB      10
0x28A6	0x0850      	MOVF       _Auto_delta, 0
0x28A7	0x00F0      	MOVWF      R0
0x28A8	0x0851      	MOVF       _Auto_delta+1, 0
0x28A9	0x00F1      	MOVWF      R1
0x28AA	0x3198      	MOVLP      24
0x28AB	0x253F      	CALL       _Div_16x16_S
0x28AC	0x31A8      	MOVLP      40
0x28AD	0x0870      	MOVF       R0, 0
0x28AE	0x002C      	MOVLB      12
0x28AF	0x00A4      	MOVWF      FARG_IntToStr_input
0x28B0	0x0871      	MOVF       R1, 0
0x28B1	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x28B2	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x28B3	0x00A6      	MOVWF      FARG_IntToStr_output
0x28B4	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x28B5	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x28B6	0x3180      	MOVLP      0
0x28B7	0x2587      	CALL       _IntToStr
0x28B8	0x31A8      	MOVLP      40
;main.c,861 :: 		if(type==4 | type==5) {    // 128*64 OLED
0x28B9	0x002A      	MOVLB      10
0x28BA	0x086D      	MOVF       _type, 0
0x28BB	0x3A04      	XORLW      4
0x28BC	0x3001      	MOVLW      1
0x28BD	0x1D03      	BTFSS      STATUS, 2
0x28BE	0x3000      	MOVLW      0
0x28BF	0x00F1      	MOVWF      R1
0x28C0	0x086D      	MOVF       _type, 0
0x28C1	0x3A05      	XORLW      5
0x28C2	0x3001      	MOVLW      1
0x28C3	0x1D03      	BTFSS      STATUS, 2
0x28C4	0x3000      	MOVLW      0
0x28C5	0x00F0      	MOVWF      R0
0x28C6	0x0871      	MOVF       R1, 0
0x28C7	0x04F0      	IORWF       R0, 1
0x28C8	0x1903      	BTFSC      STATUS, 2
0x28C9	0x28F4      	GOTO       L_user_setup476
;main.c,862 :: 		led_wr_str(0, 16, "Min SWR  ", 9);
0x28CA	0x002C      	MOVLB      12
0x28CB	0x01A4      	CLRF       FARG_led_wr_str_col
0x28CC	0x3010      	MOVLW      16
0x28CD	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x28CE	0x3020      	MOVLW      ?lstr99_main
0x28CF	0x00A6      	MOVWF      FARG_led_wr_str_str
0x28D0	0x3002      	MOVLW      hi_addr(?lstr99_main)
0x28D1	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x28D2	0x3009      	MOVLW      9
0x28D3	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x28D4	0x3180      	MOVLP      0
0x28D5	0x24B4      	CALL       _led_wr_str
0x28D6	0x31A8      	MOVLP      40
;main.c,863 :: 		asm CLRWDT;
0x28D7	0x0064      	CLRWDT
;main.c,864 :: 		led_wr_str(3, 6, swr_str, 6);
0x28D8	0x3003      	MOVLW      3
0x28D9	0x002C      	MOVLB      12
0x28DA	0x00A4      	MOVWF      FARG_led_wr_str_col
0x28DB	0x3006      	MOVLW      6
0x28DC	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x28DD	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x28DE	0x00A6      	MOVWF      FARG_led_wr_str_str
0x28DF	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x28E0	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x28E1	0x3006      	MOVLW      6
0x28E2	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x28E3	0x3180      	MOVLP      0
0x28E4	0x24B4      	CALL       _led_wr_str
0x28E5	0x31A8      	MOVLP      40
;main.c,865 :: 		asm CLRWDT;
0x28E6	0x0064      	CLRWDT
;main.c,866 :: 		delay_ms(100);
0x28E7	0x3003      	MOVLW      3
0x28E8	0x00FB      	MOVWF      R11
0x28E9	0x3008      	MOVLW      8
0x28EA	0x00FC      	MOVWF      R12
0x28EB	0x3077      	MOVLW      119
0x28EC	0x00FD      	MOVWF      R13
L_user_setup477:
0x28ED	0x0BFD      	DECFSZ     R13, 1
0x28EE	0x28ED      	GOTO       L_user_setup477
0x28EF	0x0BFC      	DECFSZ     R12, 1
0x28F0	0x28ED      	GOTO       L_user_setup477
0x28F1	0x0BFB      	DECFSZ     R11, 1
0x28F2	0x28ED      	GOTO       L_user_setup477
;main.c,868 :: 		}
0x28F3	0x2921      	GOTO       L_user_setup478
L_user_setup476:
;main.c,869 :: 		else if(type!=0) {   // 1602 LCD & 128*32 OLED
0x28F4	0x002A      	MOVLB      10
0x28F5	0x086D      	MOVF       _type, 0
0x28F6	0x3A00      	XORLW      0
0x28F7	0x1903      	BTFSC      STATUS, 2
0x28F8	0x2921      	GOTO       L_user_setup479
;main.c,870 :: 		led_wr_str(0, 1, "Min SWR  ", 9);
0x28F9	0x002C      	MOVLB      12
0x28FA	0x01A4      	CLRF       FARG_led_wr_str_col
0x28FB	0x3001      	MOVLW      1
0x28FC	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x28FD	0x30B1      	MOVLW      ?lstr100_main
0x28FE	0x00A6      	MOVWF      FARG_led_wr_str_str
0x28FF	0x3001      	MOVLW      hi_addr(?lstr100_main)
0x2900	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2901	0x3009      	MOVLW      9
0x2902	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2903	0x3180      	MOVLP      0
0x2904	0x24B4      	CALL       _led_wr_str
0x2905	0x31A8      	MOVLP      40
;main.c,871 :: 		led_wr_str(1, 1, SWR_str, 6);
0x2906	0x3001      	MOVLW      1
0x2907	0x002C      	MOVLB      12
0x2908	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2909	0x3001      	MOVLW      1
0x290A	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x290B	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x290C	0x00A6      	MOVWF      FARG_led_wr_str_str
0x290D	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x290E	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x290F	0x3006      	MOVLW      6
0x2910	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2911	0x3180      	MOVLP      0
0x2912	0x24B4      	CALL       _led_wr_str
0x2913	0x31A8      	MOVLP      40
;main.c,872 :: 		asm CLRWDT;
0x2914	0x0064      	CLRWDT
;main.c,873 :: 		Delay_ms(100);
0x2915	0x3003      	MOVLW      3
0x2916	0x00FB      	MOVWF      R11
0x2917	0x3008      	MOVLW      8
0x2918	0x00FC      	MOVWF      R12
0x2919	0x3077      	MOVLW      119
0x291A	0x00FD      	MOVWF      R13
L_user_setup480:
0x291B	0x0BFD      	DECFSZ     R13, 1
0x291C	0x291B      	GOTO       L_user_setup480
0x291D	0x0BFC      	DECFSZ     R12, 1
0x291E	0x291B      	GOTO       L_user_setup480
0x291F	0x0BFB      	DECFSZ     R11, 1
0x2920	0x291B      	GOTO       L_user_setup480
;main.c,874 :: 		}
L_user_setup479:
L_user_setup478:
;main.c,875 :: 		if(Button(&PORTB, 2, 50, 0)){   // BYP button
0x2921	0x300D      	MOVLW      PORTB
0x2922	0x002B      	MOVLB      11
0x2923	0x00EB      	MOVWF      FARG_Button_port
0x2924	0x3000      	MOVLW      hi_addr(PORTB)
0x2925	0x00EC      	MOVWF      FARG_Button_port+1
0x2926	0x3002      	MOVLW      2
0x2927	0x00ED      	MOVWF      FARG_Button_pin
0x2928	0x3032      	MOVLW      50
0x2929	0x00EE      	MOVWF      FARG_Button_time_ms
0x292A	0x01EF      	CLRF       FARG_Button_active_state
0x292B	0x3188      	MOVLP      8
0x292C	0x24C0      	CALL       _Button
0x292D	0x31A8      	MOVLP      40
0x292E	0x0870      	MOVF       R0, 0
0x292F	0x1903      	BTFSC      STATUS, 2
0x2930	0x294B      	GOTO       L_user_setup481
;main.c,876 :: 		asm CLRWDT;
0x2931	0x0064      	CLRWDT
;main.c,877 :: 		if(Auto_delta < 190) {
0x2932	0x3080      	MOVLW      128
0x2933	0x002A      	MOVLB      10
0x2934	0x0651      	XORWF      _Auto_delta+1, 0
0x2935	0x00F0      	MOVWF      R0
0x2936	0x3080      	MOVLW      128
0x2937	0x0270      	SUBWF      R0, 0
0x2938	0x1D03      	BTFSS      STATUS, 2
0x2939	0x293C      	GOTO       L__user_setup761
0x293A	0x30BE      	MOVLW      190
0x293B	0x0250      	SUBWF      _Auto_delta, 0
L__user_setup761:
0x293C	0x1803      	BTFSC      STATUS, 0
0x293D	0x2942      	GOTO       L_user_setup482
;main.c,878 :: 		Auto_delta = Auto_delta + 10;
0x293E	0x300A      	MOVLW      10
0x293F	0x07D0      	ADDWF      _Auto_delta, 1
0x2940	0x3000      	MOVLW      0
0x2941	0x3DD1      	ADDWFC     _Auto_delta+1, 1
;main.c,879 :: 		}
L_user_setup482:
;main.c,880 :: 		Delay_ms(30);
0x2942	0x309C      	MOVLW      156
0x2943	0x00FC      	MOVWF      R12
0x2944	0x30D7      	MOVLW      215
0x2945	0x00FD      	MOVWF      R13
L_user_setup483:
0x2946	0x0BFD      	DECFSZ     R13, 1
0x2947	0x2946      	GOTO       L_user_setup483
0x2948	0x0BFC      	DECFSZ     R12, 1
0x2949	0x2946      	GOTO       L_user_setup483
;main.c,881 :: 		asm CLRWDT;
0x294A	0x0064      	CLRWDT
;main.c,882 :: 		} // end of BYP button
L_user_setup481:
;main.c,883 :: 		if(Button(&PORTB, 1, 50, 0)){   // Auto button
0x294B	0x300D      	MOVLW      PORTB
0x294C	0x002B      	MOVLB      11
0x294D	0x00EB      	MOVWF      FARG_Button_port
0x294E	0x3000      	MOVLW      hi_addr(PORTB)
0x294F	0x00EC      	MOVWF      FARG_Button_port+1
0x2950	0x3001      	MOVLW      1
0x2951	0x00ED      	MOVWF      FARG_Button_pin
0x2952	0x3032      	MOVLW      50
0x2953	0x00EE      	MOVWF      FARG_Button_time_ms
0x2954	0x01EF      	CLRF       FARG_Button_active_state
0x2955	0x3188      	MOVLP      8
0x2956	0x24C0      	CALL       _Button
0x2957	0x31A8      	MOVLP      40
0x2958	0x0870      	MOVF       R0, 0
0x2959	0x1903      	BTFSC      STATUS, 2
0x295A	0x2975      	GOTO       L_user_setup484
;main.c,884 :: 		asm CLRWDT;
0x295B	0x0064      	CLRWDT
;main.c,885 :: 		if(Auto_delta > 110) {
0x295C	0x3080      	MOVLW      128
0x295D	0x00F0      	MOVWF      R0
0x295E	0x3080      	MOVLW      128
0x295F	0x002A      	MOVLB      10
0x2960	0x0651      	XORWF      _Auto_delta+1, 0
0x2961	0x0270      	SUBWF      R0, 0
0x2962	0x1D03      	BTFSS      STATUS, 2
0x2963	0x2966      	GOTO       L__user_setup762
0x2964	0x0850      	MOVF       _Auto_delta, 0
0x2965	0x3C6E      	SUBLW      110
L__user_setup762:
0x2966	0x1803      	BTFSC      STATUS, 0
0x2967	0x296C      	GOTO       L_user_setup485
;main.c,886 :: 		Auto_delta = Auto_delta - 10;
0x2968	0x300A      	MOVLW      10
0x2969	0x02D0      	SUBWF      _Auto_delta, 1
0x296A	0x3000      	MOVLW      0
0x296B	0x3BD1      	SUBWFB     _Auto_delta+1, 1
;main.c,887 :: 		}
L_user_setup485:
;main.c,888 :: 		Delay_ms(30);
0x296C	0x309C      	MOVLW      156
0x296D	0x00FC      	MOVWF      R12
0x296E	0x30D7      	MOVLW      215
0x296F	0x00FD      	MOVWF      R13
L_user_setup486:
0x2970	0x0BFD      	DECFSZ     R13, 1
0x2971	0x2970      	GOTO       L_user_setup486
0x2972	0x0BFC      	DECFSZ     R12, 1
0x2973	0x2970      	GOTO       L_user_setup486
;main.c,889 :: 		asm CLRWDT;
0x2974	0x0064      	CLRWDT
;main.c,890 :: 		}
L_user_setup484:
;main.c,891 :: 		} // end min SWR setup
L_user_setup475:
;main.c,892 :: 		if(usr_set == 2) {   // max PWR setup
0x2975	0x3000      	MOVLW      0
0x2976	0x002B      	MOVLB      11
0x2977	0x062A      	XORWF      user_setup_usr_set_L0+1, 0
0x2978	0x1D03      	BTFSS      STATUS, 2
0x2979	0x297C      	GOTO       L__user_setup763
0x297A	0x3002      	MOVLW      2
0x297B	0x0629      	XORWF      user_setup_usr_set_L0, 0
L__user_setup763:
0x297C	0x1D03      	BTFSS      STATUS, 2
0x297D	0x2A53      	GOTO       L_user_setup487
;main.c,893 :: 		inttostr((max_for_start / 10), swr_str);
0x297E	0x300A      	MOVLW      10
0x297F	0x00F4      	MOVWF      R4
0x2980	0x3000      	MOVLW      0
0x2981	0x00F5      	MOVWF      R5
0x2982	0x0029      	MOVLB      9
0x2983	0x086C      	MOVF       main_max_for_start, 0
0x2984	0x00F0      	MOVWF      R0
0x2985	0x086D      	MOVF       main_max_for_start+1, 0
0x2986	0x00F1      	MOVWF      R1
0x2987	0x3198      	MOVLP      24
0x2988	0x253F      	CALL       _Div_16x16_S
0x2989	0x31A8      	MOVLP      40
0x298A	0x0870      	MOVF       R0, 0
0x298B	0x002C      	MOVLB      12
0x298C	0x00A4      	MOVWF      FARG_IntToStr_input
0x298D	0x0871      	MOVF       R1, 0
0x298E	0x00A5      	MOVWF      FARG_IntToStr_input+1
0x298F	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x2990	0x00A6      	MOVWF      FARG_IntToStr_output
0x2991	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x2992	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x2993	0x3180      	MOVLP      0
0x2994	0x2587      	CALL       _IntToStr
0x2995	0x31A8      	MOVLP      40
;main.c,894 :: 		if(type==4 | type==5) {    // 128*64 OLED
0x2996	0x002A      	MOVLB      10
0x2997	0x086D      	MOVF       _type, 0
0x2998	0x3A04      	XORLW      4
0x2999	0x3001      	MOVLW      1
0x299A	0x1D03      	BTFSS      STATUS, 2
0x299B	0x3000      	MOVLW      0
0x299C	0x00F1      	MOVWF      R1
0x299D	0x086D      	MOVF       _type, 0
0x299E	0x3A05      	XORLW      5
0x299F	0x3001      	MOVLW      1
0x29A0	0x1D03      	BTFSS      STATUS, 2
0x29A1	0x3000      	MOVLW      0
0x29A2	0x00F0      	MOVWF      R0
0x29A3	0x0871      	MOVF       R1, 0
0x29A4	0x04F0      	IORWF       R0, 1
0x29A5	0x1903      	BTFSC      STATUS, 2
0x29A6	0x29D1      	GOTO       L_user_setup488
;main.c,895 :: 		led_wr_str(0, 16, "Max PWR", 7);
0x29A7	0x002C      	MOVLB      12
0x29A8	0x01A4      	CLRF       FARG_led_wr_str_col
0x29A9	0x3010      	MOVLW      16
0x29AA	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x29AB	0x305B      	MOVLW      ?lstr101_main
0x29AC	0x00A6      	MOVWF      FARG_led_wr_str_str
0x29AD	0x3001      	MOVLW      hi_addr(?lstr101_main)
0x29AE	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x29AF	0x3007      	MOVLW      7
0x29B0	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x29B1	0x3180      	MOVLP      0
0x29B2	0x24B4      	CALL       _led_wr_str
0x29B3	0x31A8      	MOVLP      40
;main.c,896 :: 		asm CLRWDT;
0x29B4	0x0064      	CLRWDT
;main.c,897 :: 		led_wr_str(3, 6, swr_str, 6);
0x29B5	0x3003      	MOVLW      3
0x29B6	0x002C      	MOVLB      12
0x29B7	0x00A4      	MOVWF      FARG_led_wr_str_col
0x29B8	0x3006      	MOVLW      6
0x29B9	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x29BA	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x29BB	0x00A6      	MOVWF      FARG_led_wr_str_str
0x29BC	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x29BD	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x29BE	0x3006      	MOVLW      6
0x29BF	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x29C0	0x3180      	MOVLP      0
0x29C1	0x24B4      	CALL       _led_wr_str
0x29C2	0x31A8      	MOVLP      40
;main.c,898 :: 		asm CLRWDT;
0x29C3	0x0064      	CLRWDT
;main.c,899 :: 		delay_ms(100);
0x29C4	0x3003      	MOVLW      3
0x29C5	0x00FB      	MOVWF      R11
0x29C6	0x3008      	MOVLW      8
0x29C7	0x00FC      	MOVWF      R12
0x29C8	0x3077      	MOVLW      119
0x29C9	0x00FD      	MOVWF      R13
L_user_setup489:
0x29CA	0x0BFD      	DECFSZ     R13, 1
0x29CB	0x29CA      	GOTO       L_user_setup489
0x29CC	0x0BFC      	DECFSZ     R12, 1
0x29CD	0x29CA      	GOTO       L_user_setup489
0x29CE	0x0BFB      	DECFSZ     R11, 1
0x29CF	0x29CA      	GOTO       L_user_setup489
;main.c,901 :: 		}
0x29D0	0x29FE      	GOTO       L_user_setup490
L_user_setup488:
;main.c,902 :: 		else if(type!=0) {   // 1602 LCD & 128*32 OLED
0x29D1	0x002A      	MOVLB      10
0x29D2	0x086D      	MOVF       _type, 0
0x29D3	0x3A00      	XORLW      0
0x29D4	0x1903      	BTFSC      STATUS, 2
0x29D5	0x29FE      	GOTO       L_user_setup491
;main.c,903 :: 		led_wr_str(0, 1, "Max PWR", 7);
0x29D6	0x002C      	MOVLB      12
0x29D7	0x01A4      	CLRF       FARG_led_wr_str_col
0x29D8	0x3001      	MOVLW      1
0x29D9	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x29DA	0x3053      	MOVLW      ?lstr102_main
0x29DB	0x00A6      	MOVWF      FARG_led_wr_str_str
0x29DC	0x3001      	MOVLW      hi_addr(?lstr102_main)
0x29DD	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x29DE	0x3007      	MOVLW      7
0x29DF	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x29E0	0x3180      	MOVLP      0
0x29E1	0x24B4      	CALL       _led_wr_str
0x29E2	0x31A8      	MOVLP      40
;main.c,904 :: 		led_wr_str(1, 1, SWR_str, 6);
0x29E3	0x3001      	MOVLW      1
0x29E4	0x002C      	MOVLB      12
0x29E5	0x00A4      	MOVWF      FARG_led_wr_str_col
0x29E6	0x3001      	MOVLW      1
0x29E7	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x29E8	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x29E9	0x00A6      	MOVWF      FARG_led_wr_str_str
0x29EA	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x29EB	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x29EC	0x3006      	MOVLW      6
0x29ED	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x29EE	0x3180      	MOVLP      0
0x29EF	0x24B4      	CALL       _led_wr_str
0x29F0	0x31A8      	MOVLP      40
;main.c,905 :: 		asm CLRWDT;
0x29F1	0x0064      	CLRWDT
;main.c,906 :: 		Delay_ms(100);
0x29F2	0x3003      	MOVLW      3
0x29F3	0x00FB      	MOVWF      R11
0x29F4	0x3008      	MOVLW      8
0x29F5	0x00FC      	MOVWF      R12
0x29F6	0x3077      	MOVLW      119
0x29F7	0x00FD      	MOVWF      R13
L_user_setup492:
0x29F8	0x0BFD      	DECFSZ     R13, 1
0x29F9	0x29F8      	GOTO       L_user_setup492
0x29FA	0x0BFC      	DECFSZ     R12, 1
0x29FB	0x29F8      	GOTO       L_user_setup492
0x29FC	0x0BFB      	DECFSZ     R11, 1
0x29FD	0x29F8      	GOTO       L_user_setup492
;main.c,907 :: 		}
L_user_setup491:
L_user_setup490:
;main.c,908 :: 		if(Button(&PORTB, 2, 50, 0)){   // BYP button
0x29FE	0x300D      	MOVLW      PORTB
0x29FF	0x002B      	MOVLB      11
0x2A00	0x00EB      	MOVWF      FARG_Button_port
0x2A01	0x3000      	MOVLW      hi_addr(PORTB)
0x2A02	0x00EC      	MOVWF      FARG_Button_port+1
0x2A03	0x3002      	MOVLW      2
0x2A04	0x00ED      	MOVWF      FARG_Button_pin
0x2A05	0x3032      	MOVLW      50
0x2A06	0x00EE      	MOVWF      FARG_Button_time_ms
0x2A07	0x01EF      	CLRF       FARG_Button_active_state
0x2A08	0x3188      	MOVLP      8
0x2A09	0x24C0      	CALL       _Button
0x2A0A	0x31A8      	MOVLP      40
0x2A0B	0x0870      	MOVF       R0, 0
0x2A0C	0x1903      	BTFSC      STATUS, 2
0x2A0D	0x2A29      	GOTO       L_user_setup493
;main.c,909 :: 		asm CLRWDT;
0x2A0E	0x0064      	CLRWDT
;main.c,910 :: 		if(max_for_start < 900) {
0x2A0F	0x3080      	MOVLW      128
0x2A10	0x0029      	MOVLB      9
0x2A11	0x066D      	XORWF      main_max_for_start+1, 0
0x2A12	0x00F0      	MOVWF      R0
0x2A13	0x3080      	MOVLW      128
0x2A14	0x3A03      	XORLW      3
0x2A15	0x0270      	SUBWF      R0, 0
0x2A16	0x1D03      	BTFSS      STATUS, 2
0x2A17	0x2A1A      	GOTO       L__user_setup764
0x2A18	0x3084      	MOVLW      132
0x2A19	0x026C      	SUBWF      main_max_for_start, 0
L__user_setup764:
0x2A1A	0x1803      	BTFSC      STATUS, 0
0x2A1B	0x2A20      	GOTO       L_user_setup494
;main.c,911 :: 		max_for_start = max_for_start + 100;
0x2A1C	0x3064      	MOVLW      100
0x2A1D	0x07EC      	ADDWF      main_max_for_start, 1
0x2A1E	0x3000      	MOVLW      0
0x2A1F	0x3DED      	ADDWFC     main_max_for_start+1, 1
;main.c,912 :: 		}
L_user_setup494:
;main.c,913 :: 		Delay_ms(30);
0x2A20	0x309C      	MOVLW      156
0x2A21	0x00FC      	MOVWF      R12
0x2A22	0x30D7      	MOVLW      215
0x2A23	0x00FD      	MOVWF      R13
L_user_setup495:
0x2A24	0x0BFD      	DECFSZ     R13, 1
0x2A25	0x2A24      	GOTO       L_user_setup495
0x2A26	0x0BFC      	DECFSZ     R12, 1
0x2A27	0x2A24      	GOTO       L_user_setup495
;main.c,914 :: 		asm CLRWDT;
0x2A28	0x0064      	CLRWDT
;main.c,915 :: 		} // end of BYP button
L_user_setup493:
;main.c,916 :: 		if(Button(&PORTB, 1, 50, 0)){   // Auto button
0x2A29	0x300D      	MOVLW      PORTB
0x2A2A	0x002B      	MOVLB      11
0x2A2B	0x00EB      	MOVWF      FARG_Button_port
0x2A2C	0x3000      	MOVLW      hi_addr(PORTB)
0x2A2D	0x00EC      	MOVWF      FARG_Button_port+1
0x2A2E	0x3001      	MOVLW      1
0x2A2F	0x00ED      	MOVWF      FARG_Button_pin
0x2A30	0x3032      	MOVLW      50
0x2A31	0x00EE      	MOVWF      FARG_Button_time_ms
0x2A32	0x01EF      	CLRF       FARG_Button_active_state
0x2A33	0x3188      	MOVLP      8
0x2A34	0x24C0      	CALL       _Button
0x2A35	0x31A8      	MOVLP      40
0x2A36	0x0870      	MOVF       R0, 0
0x2A37	0x1903      	BTFSC      STATUS, 2
0x2A38	0x2A53      	GOTO       L_user_setup496
;main.c,917 :: 		asm CLRWDT;
0x2A39	0x0064      	CLRWDT
;main.c,918 :: 		if(max_for_start > 0) {
0x2A3A	0x3080      	MOVLW      128
0x2A3B	0x00F0      	MOVWF      R0
0x2A3C	0x3080      	MOVLW      128
0x2A3D	0x0029      	MOVLB      9
0x2A3E	0x066D      	XORWF      main_max_for_start+1, 0
0x2A3F	0x0270      	SUBWF      R0, 0
0x2A40	0x1D03      	BTFSS      STATUS, 2
0x2A41	0x2A44      	GOTO       L__user_setup765
0x2A42	0x086C      	MOVF       main_max_for_start, 0
0x2A43	0x3C00      	SUBLW      0
L__user_setup765:
0x2A44	0x1803      	BTFSC      STATUS, 0
0x2A45	0x2A4A      	GOTO       L_user_setup497
;main.c,919 :: 		max_for_start = max_for_start - 100;
0x2A46	0x3064      	MOVLW      100
0x2A47	0x02EC      	SUBWF      main_max_for_start, 1
0x2A48	0x3000      	MOVLW      0
0x2A49	0x3BED      	SUBWFB     main_max_for_start+1, 1
;main.c,920 :: 		}
L_user_setup497:
;main.c,921 :: 		Delay_ms(30);
0x2A4A	0x309C      	MOVLW      156
0x2A4B	0x00FC      	MOVWF      R12
0x2A4C	0x30D7      	MOVLW      215
0x2A4D	0x00FD      	MOVWF      R13
L_user_setup498:
0x2A4E	0x0BFD      	DECFSZ     R13, 1
0x2A4F	0x2A4E      	GOTO       L_user_setup498
0x2A50	0x0BFC      	DECFSZ     R12, 1
0x2A51	0x2A4E      	GOTO       L_user_setup498
;main.c,922 :: 		asm CLRWDT;
0x2A52	0x0064      	CLRWDT
;main.c,923 :: 		}
L_user_setup496:
;main.c,924 :: 		} // end max PWR setup
L_user_setup487:
;main.c,925 :: 		if(usr_set == 5) {   // clear screen delay
0x2A53	0x3000      	MOVLW      0
0x2A54	0x002B      	MOVLB      11
0x2A55	0x062A      	XORWF      user_setup_usr_set_L0+1, 0
0x2A56	0x1D03      	BTFSS      STATUS, 2
0x2A57	0x2A5A      	GOTO       L__user_setup766
0x2A58	0x3005      	MOVLW      5
0x2A59	0x0629      	XORWF      user_setup_usr_set_L0, 0
L__user_setup766:
0x2A5A	0x1D03      	BTFSS      STATUS, 2
0x2A5B	0x2B1A      	GOTO       L_user_setup499
;main.c,926 :: 		inttostr(Dysp_delay, swr_str);
0x2A5C	0x0028      	MOVLB      8
0x2A5D	0x082C      	MOVF       _Dysp_delay, 0
0x2A5E	0x002C      	MOVLB      12
0x2A5F	0x00A4      	MOVWF      FARG_IntToStr_input
0x2A60	0x01A5      	CLRF       FARG_IntToStr_input+1
0x2A61	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x2A62	0x00A6      	MOVWF      FARG_IntToStr_output
0x2A63	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x2A64	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x2A65	0x3180      	MOVLP      0
0x2A66	0x2587      	CALL       _IntToStr
0x2A67	0x31A8      	MOVLP      40
;main.c,927 :: 		if(type==4 | type==5) {    // 128*64 OLED
0x2A68	0x002A      	MOVLB      10
0x2A69	0x086D      	MOVF       _type, 0
0x2A6A	0x3A04      	XORLW      4
0x2A6B	0x3001      	MOVLW      1
0x2A6C	0x1D03      	BTFSS      STATUS, 2
0x2A6D	0x3000      	MOVLW      0
0x2A6E	0x00F1      	MOVWF      R1
0x2A6F	0x086D      	MOVF       _type, 0
0x2A70	0x3A05      	XORLW      5
0x2A71	0x3001      	MOVLW      1
0x2A72	0x1D03      	BTFSS      STATUS, 2
0x2A73	0x3000      	MOVLW      0
0x2A74	0x00F0      	MOVWF      R0
0x2A75	0x0871      	MOVF       R1, 0
0x2A76	0x04F0      	IORWF       R0, 1
0x2A77	0x1903      	BTFSC      STATUS, 2
0x2A78	0x2AA3      	GOTO       L_user_setup500
;main.c,928 :: 		led_wr_str(0, 16, "ScrDel ", 7);
0x2A79	0x002C      	MOVLB      12
0x2A7A	0x01A4      	CLRF       FARG_led_wr_str_col
0x2A7B	0x3010      	MOVLW      16
0x2A7C	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2A7D	0x3063      	MOVLW      ?lstr103_main
0x2A7E	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2A7F	0x3001      	MOVLW      hi_addr(?lstr103_main)
0x2A80	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2A81	0x3007      	MOVLW      7
0x2A82	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2A83	0x3180      	MOVLP      0
0x2A84	0x24B4      	CALL       _led_wr_str
0x2A85	0x31A8      	MOVLP      40
;main.c,929 :: 		asm CLRWDT;
0x2A86	0x0064      	CLRWDT
;main.c,930 :: 		led_wr_str(3, 6, swr_str, 7);
0x2A87	0x3003      	MOVLW      3
0x2A88	0x002C      	MOVLB      12
0x2A89	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2A8A	0x3006      	MOVLW      6
0x2A8B	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2A8C	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x2A8D	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2A8E	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x2A8F	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2A90	0x3007      	MOVLW      7
0x2A91	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2A92	0x3180      	MOVLP      0
0x2A93	0x24B4      	CALL       _led_wr_str
0x2A94	0x31A8      	MOVLP      40
;main.c,931 :: 		asm CLRWDT;
0x2A95	0x0064      	CLRWDT
;main.c,932 :: 		delay_ms(100);
0x2A96	0x3003      	MOVLW      3
0x2A97	0x00FB      	MOVWF      R11
0x2A98	0x3008      	MOVLW      8
0x2A99	0x00FC      	MOVWF      R12
0x2A9A	0x3077      	MOVLW      119
0x2A9B	0x00FD      	MOVWF      R13
L_user_setup501:
0x2A9C	0x0BFD      	DECFSZ     R13, 1
0x2A9D	0x2A9C      	GOTO       L_user_setup501
0x2A9E	0x0BFC      	DECFSZ     R12, 1
0x2A9F	0x2A9C      	GOTO       L_user_setup501
0x2AA0	0x0BFB      	DECFSZ     R11, 1
0x2AA1	0x2A9C      	GOTO       L_user_setup501
;main.c,934 :: 		}
0x2AA2	0x2AD0      	GOTO       L_user_setup502
L_user_setup500:
;main.c,935 :: 		else if(type!=0) {   // 1602 LCD & 128*32 OLED
0x2AA3	0x002A      	MOVLB      10
0x2AA4	0x086D      	MOVF       _type, 0
0x2AA5	0x3A00      	XORLW      0
0x2AA6	0x1903      	BTFSC      STATUS, 2
0x2AA7	0x2AD0      	GOTO       L_user_setup503
;main.c,936 :: 		led_wr_str(0, 1, "ScrDel ", 7);
0x2AA8	0x002C      	MOVLB      12
0x2AA9	0x01A4      	CLRF       FARG_led_wr_str_col
0x2AAA	0x3001      	MOVLW      1
0x2AAB	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2AAC	0x30A9      	MOVLW      ?lstr104_main
0x2AAD	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2AAE	0x3001      	MOVLW      hi_addr(?lstr104_main)
0x2AAF	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2AB0	0x3007      	MOVLW      7
0x2AB1	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2AB2	0x3180      	MOVLP      0
0x2AB3	0x24B4      	CALL       _led_wr_str
0x2AB4	0x31A8      	MOVLP      40
;main.c,937 :: 		led_wr_str(1, 1, SWR_str, 6);
0x2AB5	0x3001      	MOVLW      1
0x2AB6	0x002C      	MOVLB      12
0x2AB7	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2AB8	0x3001      	MOVLW      1
0x2AB9	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2ABA	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x2ABB	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2ABC	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x2ABD	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2ABE	0x3006      	MOVLW      6
0x2ABF	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2AC0	0x3180      	MOVLP      0
0x2AC1	0x24B4      	CALL       _led_wr_str
0x2AC2	0x31A8      	MOVLP      40
;main.c,938 :: 		asm CLRWDT;
0x2AC3	0x0064      	CLRWDT
;main.c,939 :: 		Delay_ms(100);
0x2AC4	0x3003      	MOVLW      3
0x2AC5	0x00FB      	MOVWF      R11
0x2AC6	0x3008      	MOVLW      8
0x2AC7	0x00FC      	MOVWF      R12
0x2AC8	0x3077      	MOVLW      119
0x2AC9	0x00FD      	MOVWF      R13
L_user_setup504:
0x2ACA	0x0BFD      	DECFSZ     R13, 1
0x2ACB	0x2ACA      	GOTO       L_user_setup504
0x2ACC	0x0BFC      	DECFSZ     R12, 1
0x2ACD	0x2ACA      	GOTO       L_user_setup504
0x2ACE	0x0BFB      	DECFSZ     R11, 1
0x2ACF	0x2ACA      	GOTO       L_user_setup504
;main.c,940 :: 		}
L_user_setup503:
L_user_setup502:
;main.c,941 :: 		if(Button(&PORTB, 2, 50, 0)){   // BYP button
0x2AD0	0x300D      	MOVLW      PORTB
0x2AD1	0x002B      	MOVLB      11
0x2AD2	0x00EB      	MOVWF      FARG_Button_port
0x2AD3	0x3000      	MOVLW      hi_addr(PORTB)
0x2AD4	0x00EC      	MOVWF      FARG_Button_port+1
0x2AD5	0x3002      	MOVLW      2
0x2AD6	0x00ED      	MOVWF      FARG_Button_pin
0x2AD7	0x3032      	MOVLW      50
0x2AD8	0x00EE      	MOVWF      FARG_Button_time_ms
0x2AD9	0x01EF      	CLRF       FARG_Button_active_state
0x2ADA	0x3188      	MOVLP      8
0x2ADB	0x24C0      	CALL       _Button
0x2ADC	0x31A8      	MOVLP      40
0x2ADD	0x0870      	MOVF       R0, 0
0x2ADE	0x1903      	BTFSC      STATUS, 2
0x2ADF	0x2AF1      	GOTO       L_user_setup505
;main.c,942 :: 		asm CLRWDT;
0x2AE0	0x0064      	CLRWDT
;main.c,943 :: 		if(Dysp_delay < 90) {
0x2AE1	0x305A      	MOVLW      90
0x2AE2	0x0028      	MOVLB      8
0x2AE3	0x022C      	SUBWF      _Dysp_delay, 0
0x2AE4	0x1803      	BTFSC      STATUS, 0
0x2AE5	0x2AE8      	GOTO       L_user_setup506
;main.c,944 :: 		Dysp_delay = Dysp_delay + 10;
0x2AE6	0x300A      	MOVLW      10
0x2AE7	0x07AC      	ADDWF      _Dysp_delay, 1
;main.c,945 :: 		}
L_user_setup506:
;main.c,946 :: 		Delay_ms(30);
0x2AE8	0x309C      	MOVLW      156
0x2AE9	0x00FC      	MOVWF      R12
0x2AEA	0x30D7      	MOVLW      215
0x2AEB	0x00FD      	MOVWF      R13
L_user_setup507:
0x2AEC	0x0BFD      	DECFSZ     R13, 1
0x2AED	0x2AEC      	GOTO       L_user_setup507
0x2AEE	0x0BFC      	DECFSZ     R12, 1
0x2AEF	0x2AEC      	GOTO       L_user_setup507
;main.c,947 :: 		asm CLRWDT;
0x2AF0	0x0064      	CLRWDT
;main.c,948 :: 		} // end of BYP button
L_user_setup505:
;main.c,949 :: 		if(Button(&PORTB, 1, 50, 0)){   // Auto button
0x2AF1	0x300D      	MOVLW      PORTB
0x2AF2	0x002B      	MOVLB      11
0x2AF3	0x00EB      	MOVWF      FARG_Button_port
0x2AF4	0x3000      	MOVLW      hi_addr(PORTB)
0x2AF5	0x00EC      	MOVWF      FARG_Button_port+1
0x2AF6	0x3001      	MOVLW      1
0x2AF7	0x00ED      	MOVWF      FARG_Button_pin
0x2AF8	0x3032      	MOVLW      50
0x2AF9	0x00EE      	MOVWF      FARG_Button_time_ms
0x2AFA	0x01EF      	CLRF       FARG_Button_active_state
0x2AFB	0x3188      	MOVLP      8
0x2AFC	0x24C0      	CALL       _Button
0x2AFD	0x31A8      	MOVLP      40
0x2AFE	0x0870      	MOVF       R0, 0
0x2AFF	0x1903      	BTFSC      STATUS, 2
0x2B00	0x2B1A      	GOTO       L_user_setup508
;main.c,950 :: 		asm CLRWDT;
0x2B01	0x0064      	CLRWDT
;main.c,951 :: 		if(Dysp_delay > 0) {
0x2B02	0x0028      	MOVLB      8
0x2B03	0x082C      	MOVF       _Dysp_delay, 0
0x2B04	0x3C00      	SUBLW      0
0x2B05	0x1803      	BTFSC      STATUS, 0
0x2B06	0x2B11      	GOTO       L_user_setup509
;main.c,952 :: 		Dysp_delay = Dysp_delay - 10;
0x2B07	0x300A      	MOVLW      10
0x2B08	0x022C      	SUBWF      _Dysp_delay, 0
0x2B09	0x00F1      	MOVWF      R1
0x2B0A	0x0871      	MOVF       R1, 0
0x2B0B	0x00AC      	MOVWF      _Dysp_delay
;main.c,953 :: 		if (Dysp_delay < 10)
0x2B0C	0x300A      	MOVLW      10
0x2B0D	0x0271      	SUBWF      R1, 0
0x2B0E	0x1803      	BTFSC      STATUS, 0
0x2B0F	0x2B11      	GOTO       L_user_setup510
;main.c,954 :: 		Dysp_delay = 0;
0x2B10	0x01AC      	CLRF       _Dysp_delay
L_user_setup510:
;main.c,955 :: 		}
L_user_setup509:
;main.c,956 :: 		Delay_ms(30);
0x2B11	0x309C      	MOVLW      156
0x2B12	0x00FC      	MOVWF      R12
0x2B13	0x30D7      	MOVLW      215
0x2B14	0x00FD      	MOVWF      R13
L_user_setup511:
0x2B15	0x0BFD      	DECFSZ     R13, 1
0x2B16	0x2B15      	GOTO       L_user_setup511
0x2B17	0x0BFC      	DECFSZ     R12, 1
0x2B18	0x2B15      	GOTO       L_user_setup511
;main.c,957 :: 		asm CLRWDT;
0x2B19	0x0064      	CLRWDT
;main.c,958 :: 		}
L_user_setup508:
;main.c,959 :: 		} // end clear screen delay setup
L_user_setup499:
;main.c,960 :: 		if(usr_set == 4) {   // losses setup
0x2B1A	0x3000      	MOVLW      0
0x2B1B	0x002B      	MOVLB      11
0x2B1C	0x062A      	XORWF      user_setup_usr_set_L0+1, 0
0x2B1D	0x1D03      	BTFSS      STATUS, 2
0x2B1E	0x2B21      	GOTO       L__user_setup767
0x2B1F	0x3004      	MOVLW      4
0x2B20	0x0629      	XORWF      user_setup_usr_set_L0, 0
L__user_setup767:
0x2B21	0x1D03      	BTFSS      STATUS, 2
0x2B22	0x2BD6      	GOTO       L_user_setup512
;main.c,961 :: 		inttostr(Fid_loss, swr_str);
0x2B23	0x0028      	MOVLB      8
0x2B24	0x086F      	MOVF       _Fid_loss, 0
0x2B25	0x002C      	MOVLB      12
0x2B26	0x00A4      	MOVWF      FARG_IntToStr_input
0x2B27	0x01A5      	CLRF       FARG_IntToStr_input+1
0x2B28	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x2B29	0x00A6      	MOVWF      FARG_IntToStr_output
0x2B2A	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x2B2B	0x00A7      	MOVWF      FARG_IntToStr_output+1
0x2B2C	0x3180      	MOVLP      0
0x2B2D	0x2587      	CALL       _IntToStr
0x2B2E	0x31A8      	MOVLP      40
;main.c,962 :: 		if(type==4 | type==5) {    // 128*64 OLED
0x2B2F	0x002A      	MOVLB      10
0x2B30	0x086D      	MOVF       _type, 0
0x2B31	0x3A04      	XORLW      4
0x2B32	0x3001      	MOVLW      1
0x2B33	0x1D03      	BTFSS      STATUS, 2
0x2B34	0x3000      	MOVLW      0
0x2B35	0x00F1      	MOVWF      R1
0x2B36	0x086D      	MOVF       _type, 0
0x2B37	0x3A05      	XORLW      5
0x2B38	0x3001      	MOVLW      1
0x2B39	0x1D03      	BTFSS      STATUS, 2
0x2B3A	0x3000      	MOVLW      0
0x2B3B	0x00F0      	MOVWF      R0
0x2B3C	0x0871      	MOVF       R1, 0
0x2B3D	0x04F0      	IORWF       R0, 1
0x2B3E	0x1903      	BTFSC      STATUS, 2
0x2B3F	0x2B69      	GOTO       L_user_setup513
;main.c,963 :: 		led_wr_str(0, 16, "Losses  ", 8);
0x2B40	0x002C      	MOVLB      12
0x2B41	0x01A4      	CLRF       FARG_led_wr_str_col
0x2B42	0x3010      	MOVLW      16
0x2B43	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2B44	0x30A0      	MOVLW      ?lstr105_main
0x2B45	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2B46	0x3001      	MOVLW      hi_addr(?lstr105_main)
0x2B47	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2B48	0x3008      	MOVLW      8
0x2B49	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2B4A	0x3180      	MOVLP      0
0x2B4B	0x24B4      	CALL       _led_wr_str
0x2B4C	0x31A8      	MOVLP      40
;main.c,965 :: 		led_wr_str(3, 6, swr_str, 7);
0x2B4D	0x3003      	MOVLW      3
0x2B4E	0x002C      	MOVLB      12
0x2B4F	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2B50	0x3006      	MOVLW      6
0x2B51	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2B52	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x2B53	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2B54	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x2B55	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2B56	0x3007      	MOVLW      7
0x2B57	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2B58	0x3180      	MOVLP      0
0x2B59	0x24B4      	CALL       _led_wr_str
0x2B5A	0x31A8      	MOVLP      40
;main.c,966 :: 		asm CLRWDT;
0x2B5B	0x0064      	CLRWDT
;main.c,967 :: 		delay_ms(100);
0x2B5C	0x3003      	MOVLW      3
0x2B5D	0x00FB      	MOVWF      R11
0x2B5E	0x3008      	MOVLW      8
0x2B5F	0x00FC      	MOVWF      R12
0x2B60	0x3077      	MOVLW      119
0x2B61	0x00FD      	MOVWF      R13
L_user_setup514:
0x2B62	0x0BFD      	DECFSZ     R13, 1
0x2B63	0x2B62      	GOTO       L_user_setup514
0x2B64	0x0BFC      	DECFSZ     R12, 1
0x2B65	0x2B62      	GOTO       L_user_setup514
0x2B66	0x0BFB      	DECFSZ     R11, 1
0x2B67	0x2B62      	GOTO       L_user_setup514
;main.c,969 :: 		}
0x2B68	0x2B96      	GOTO       L_user_setup515
L_user_setup513:
;main.c,970 :: 		else if(type!=0) {   // 1602 LCD & 128*32 OLED
0x2B69	0x002A      	MOVLB      10
0x2B6A	0x086D      	MOVF       _type, 0
0x2B6B	0x3A00      	XORLW      0
0x2B6C	0x1903      	BTFSC      STATUS, 2
0x2B6D	0x2B96      	GOTO       L_user_setup516
;main.c,971 :: 		led_wr_str(0, 1, "Losses  ", 8);
0x2B6E	0x002C      	MOVLB      12
0x2B6F	0x01A4      	CLRF       FARG_led_wr_str_col
0x2B70	0x3001      	MOVLW      1
0x2B71	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2B72	0x30E7      	MOVLW      ?lstr106_main
0x2B73	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2B74	0x3001      	MOVLW      hi_addr(?lstr106_main)
0x2B75	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2B76	0x3008      	MOVLW      8
0x2B77	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2B78	0x3180      	MOVLP      0
0x2B79	0x24B4      	CALL       _led_wr_str
0x2B7A	0x31A8      	MOVLP      40
;main.c,972 :: 		led_wr_str(1, 1, SWR_str, 6);
0x2B7B	0x3001      	MOVLW      1
0x2B7C	0x002C      	MOVLB      12
0x2B7D	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2B7E	0x3001      	MOVLW      1
0x2B7F	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2B80	0x30AB      	MOVLW      user_setup_SWR_str_L0
0x2B81	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2B82	0x3005      	MOVLW      hi_addr(user_setup_SWR_str_L0)
0x2B83	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2B84	0x3006      	MOVLW      6
0x2B85	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2B86	0x3180      	MOVLP      0
0x2B87	0x24B4      	CALL       _led_wr_str
0x2B88	0x31A8      	MOVLP      40
;main.c,973 :: 		asm CLRWDT;
0x2B89	0x0064      	CLRWDT
;main.c,974 :: 		Delay_ms(100);
0x2B8A	0x3003      	MOVLW      3
0x2B8B	0x00FB      	MOVWF      R11
0x2B8C	0x3008      	MOVLW      8
0x2B8D	0x00FC      	MOVWF      R12
0x2B8E	0x3077      	MOVLW      119
0x2B8F	0x00FD      	MOVWF      R13
L_user_setup517:
0x2B90	0x0BFD      	DECFSZ     R13, 1
0x2B91	0x2B90      	GOTO       L_user_setup517
0x2B92	0x0BFC      	DECFSZ     R12, 1
0x2B93	0x2B90      	GOTO       L_user_setup517
0x2B94	0x0BFB      	DECFSZ     R11, 1
0x2B95	0x2B90      	GOTO       L_user_setup517
;main.c,975 :: 		}
L_user_setup516:
L_user_setup515:
;main.c,976 :: 		if(Button(&PORTB, 2, 50, 0)){   // BYP button
0x2B96	0x300D      	MOVLW      PORTB
0x2B97	0x002B      	MOVLB      11
0x2B98	0x00EB      	MOVWF      FARG_Button_port
0x2B99	0x3000      	MOVLW      hi_addr(PORTB)
0x2B9A	0x00EC      	MOVWF      FARG_Button_port+1
0x2B9B	0x3002      	MOVLW      2
0x2B9C	0x00ED      	MOVWF      FARG_Button_pin
0x2B9D	0x3032      	MOVLW      50
0x2B9E	0x00EE      	MOVWF      FARG_Button_time_ms
0x2B9F	0x01EF      	CLRF       FARG_Button_active_state
0x2BA0	0x3188      	MOVLP      8
0x2BA1	0x24C0      	CALL       _Button
0x2BA2	0x31A8      	MOVLP      40
0x2BA3	0x0870      	MOVF       R0, 0
0x2BA4	0x1903      	BTFSC      STATUS, 2
0x2BA5	0x2BB6      	GOTO       L_user_setup518
;main.c,977 :: 		asm CLRWDT;
0x2BA6	0x0064      	CLRWDT
;main.c,978 :: 		if(Fid_loss < 99) {
0x2BA7	0x3063      	MOVLW      99
0x2BA8	0x0028      	MOVLB      8
0x2BA9	0x026F      	SUBWF      _Fid_loss, 0
0x2BAA	0x1803      	BTFSC      STATUS, 0
0x2BAB	0x2BAD      	GOTO       L_user_setup519
;main.c,979 :: 		Fid_loss = Fid_loss + 1;
0x2BAC	0x0AEF      	INCF       _Fid_loss, 1
;main.c,980 :: 		}
L_user_setup519:
;main.c,981 :: 		Delay_ms(30);
0x2BAD	0x309C      	MOVLW      156
0x2BAE	0x00FC      	MOVWF      R12
0x2BAF	0x30D7      	MOVLW      215
0x2BB0	0x00FD      	MOVWF      R13
L_user_setup520:
0x2BB1	0x0BFD      	DECFSZ     R13, 1
0x2BB2	0x2BB1      	GOTO       L_user_setup520
0x2BB3	0x0BFC      	DECFSZ     R12, 1
0x2BB4	0x2BB1      	GOTO       L_user_setup520
;main.c,982 :: 		asm CLRWDT;
0x2BB5	0x0064      	CLRWDT
;main.c,983 :: 		} // end of BYP button
L_user_setup518:
;main.c,984 :: 		if(Button(&PORTB, 1, 50, 0)){   // Auto button
0x2BB6	0x300D      	MOVLW      PORTB
0x2BB7	0x002B      	MOVLB      11
0x2BB8	0x00EB      	MOVWF      FARG_Button_port
0x2BB9	0x3000      	MOVLW      hi_addr(PORTB)
0x2BBA	0x00EC      	MOVWF      FARG_Button_port+1
0x2BBB	0x3001      	MOVLW      1
0x2BBC	0x00ED      	MOVWF      FARG_Button_pin
0x2BBD	0x3032      	MOVLW      50
0x2BBE	0x00EE      	MOVWF      FARG_Button_time_ms
0x2BBF	0x01EF      	CLRF       FARG_Button_active_state
0x2BC0	0x3188      	MOVLP      8
0x2BC1	0x24C0      	CALL       _Button
0x2BC2	0x31A8      	MOVLP      40
0x2BC3	0x0870      	MOVF       R0, 0
0x2BC4	0x1903      	BTFSC      STATUS, 2
0x2BC5	0x2BD6      	GOTO       L_user_setup521
;main.c,985 :: 		asm CLRWDT;
0x2BC6	0x0064      	CLRWDT
;main.c,986 :: 		if(Fid_loss > 0) {
0x2BC7	0x0028      	MOVLB      8
0x2BC8	0x086F      	MOVF       _Fid_loss, 0
0x2BC9	0x3C00      	SUBLW      0
0x2BCA	0x1803      	BTFSC      STATUS, 0
0x2BCB	0x2BCD      	GOTO       L_user_setup522
;main.c,987 :: 		Fid_loss = Fid_loss - 1;
0x2BCC	0x03EF      	DECF       _Fid_loss, 1
;main.c,988 :: 		}
L_user_setup522:
;main.c,989 :: 		Delay_ms(30);
0x2BCD	0x309C      	MOVLW      156
0x2BCE	0x00FC      	MOVWF      R12
0x2BCF	0x30D7      	MOVLW      215
0x2BD0	0x00FD      	MOVWF      R13
L_user_setup523:
0x2BD1	0x0BFD      	DECFSZ     R13, 1
0x2BD2	0x2BD1      	GOTO       L_user_setup523
0x2BD3	0x0BFC      	DECFSZ     R12, 1
0x2BD4	0x2BD1      	GOTO       L_user_setup523
;main.c,990 :: 		asm CLRWDT;
0x2BD5	0x0064      	CLRWDT
;main.c,991 :: 		}
L_user_setup521:
;main.c,992 :: 		} // end losses setup
L_user_setup512:
;main.c,994 :: 		if(usr_set == 3) {   // loss mode
0x2BD6	0x3000      	MOVLW      0
0x2BD7	0x002B      	MOVLB      11
0x2BD8	0x062A      	XORWF      user_setup_usr_set_L0+1, 0
0x2BD9	0x1D03      	BTFSS      STATUS, 2
0x2BDA	0x2BDD      	GOTO       L__user_setup768
0x2BDB	0x3003      	MOVLW      3
0x2BDC	0x0629      	XORWF      user_setup_usr_set_L0, 0
L__user_setup768:
0x2BDD	0x1D03      	BTFSS      STATUS, 2
0x2BDE	0x2CAF      	GOTO       L_user_setup524
;main.c,995 :: 		if(type==4 | type==5) {    // 128*64 OLED
0x2BDF	0x002A      	MOVLB      10
0x2BE0	0x086D      	MOVF       _type, 0
0x2BE1	0x3A04      	XORLW      4
0x2BE2	0x3001      	MOVLW      1
0x2BE3	0x1D03      	BTFSS      STATUS, 2
0x2BE4	0x3000      	MOVLW      0
0x2BE5	0x00F1      	MOVWF      R1
0x2BE6	0x086D      	MOVF       _type, 0
0x2BE7	0x3A05      	XORLW      5
0x2BE8	0x3001      	MOVLW      1
0x2BE9	0x1D03      	BTFSS      STATUS, 2
0x2BEA	0x3000      	MOVLW      0
0x2BEB	0x00F0      	MOVWF      R0
0x2BEC	0x0871      	MOVF       R1, 0
0x2BED	0x04F0      	IORWF       R0, 1
0x2BEE	0x1903      	BTFSC      STATUS, 2
0x2BEF	0x2C2D      	GOTO       L_user_setup525
;main.c,996 :: 		led_wr_str(0, 16, "Loss ind", 8);
0x2BF0	0x002C      	MOVLB      12
0x2BF1	0x01A4      	CLRF       FARG_led_wr_str_col
0x2BF2	0x3010      	MOVLW      16
0x2BF3	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2BF4	0x30A8      	MOVLW      ?lstr107_main
0x2BF5	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2BF6	0x3002      	MOVLW      hi_addr(?lstr107_main)
0x2BF7	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2BF8	0x3008      	MOVLW      8
0x2BF9	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2BFA	0x3180      	MOVLP      0
0x2BFB	0x24B4      	CALL       _led_wr_str
0x2BFC	0x31A8      	MOVLP      40
;main.c,998 :: 		if (Loss_ind == 1)
0x2BFD	0x0024      	MOVLB      4
0x2BFE	0x086B      	MOVF       main_Loss_ind, 0
0x2BFF	0x3A01      	XORLW      1
0x2C00	0x1D03      	BTFSS      STATUS, 2
0x2C01	0x2C11      	GOTO       L_user_setup526
;main.c,999 :: 		led_wr_str(3, 16, "   ON  ", 7);
0x2C02	0x3003      	MOVLW      3
0x2C03	0x002C      	MOVLB      12
0x2C04	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2C05	0x3010      	MOVLW      16
0x2C06	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2C07	0x30A0      	MOVLW      ?lstr108_main
0x2C08	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2C09	0x3002      	MOVLW      hi_addr(?lstr108_main)
0x2C0A	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2C0B	0x3007      	MOVLW      7
0x2C0C	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2C0D	0x3180      	MOVLP      0
0x2C0E	0x24B4      	CALL       _led_wr_str
0x2C0F	0x31A8      	MOVLP      40
0x2C10	0x2C1F      	GOTO       L_user_setup527
L_user_setup526:
;main.c,1001 :: 		led_wr_str(3, 16, "   OFF ", 7);
0x2C11	0x3003      	MOVLW      3
0x2C12	0x002C      	MOVLB      12
0x2C13	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2C14	0x3010      	MOVLW      16
0x2C15	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2C16	0x30B1      	MOVLW      ?lstr109_main
0x2C17	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2C18	0x3002      	MOVLW      hi_addr(?lstr109_main)
0x2C19	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2C1A	0x3007      	MOVLW      7
0x2C1B	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2C1C	0x3180      	MOVLP      0
0x2C1D	0x24B4      	CALL       _led_wr_str
0x2C1E	0x31A8      	MOVLP      40
L_user_setup527:
;main.c,1002 :: 		delay_ms(100);
0x2C1F	0x3003      	MOVLW      3
0x2C20	0x00FB      	MOVWF      R11
0x2C21	0x3008      	MOVLW      8
0x2C22	0x00FC      	MOVWF      R12
0x2C23	0x3077      	MOVLW      119
0x2C24	0x00FD      	MOVWF      R13
L_user_setup528:
0x2C25	0x0BFD      	DECFSZ     R13, 1
0x2C26	0x2C25      	GOTO       L_user_setup528
0x2C27	0x0BFC      	DECFSZ     R12, 1
0x2C28	0x2C25      	GOTO       L_user_setup528
0x2C29	0x0BFB      	DECFSZ     R11, 1
0x2C2A	0x2C25      	GOTO       L_user_setup528
;main.c,1003 :: 		asm CLRWDT;
0x2C2B	0x0064      	CLRWDT
;main.c,1004 :: 		}
0x2C2C	0x2C6E      	GOTO       L_user_setup529
L_user_setup525:
;main.c,1005 :: 		else if(type!=0) {   // 1602 LCD & 128*32 OLED
0x2C2D	0x002A      	MOVLB      10
0x2C2E	0x086D      	MOVF       _type, 0
0x2C2F	0x3A00      	XORLW      0
0x2C30	0x1903      	BTFSC      STATUS, 2
0x2C31	0x2C6E      	GOTO       L_user_setup530
;main.c,1006 :: 		led_wr_str(0, 1, "Loss ind", 8);
0x2C32	0x002C      	MOVLB      12
0x2C33	0x01A4      	CLRF       FARG_led_wr_str_col
0x2C34	0x3001      	MOVLW      1
0x2C35	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2C36	0x30C9      	MOVLW      ?lstr110_main
0x2C37	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2C38	0x3002      	MOVLW      hi_addr(?lstr110_main)
0x2C39	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2C3A	0x3008      	MOVLW      8
0x2C3B	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2C3C	0x3180      	MOVLP      0
0x2C3D	0x24B4      	CALL       _led_wr_str
0x2C3E	0x31A8      	MOVLP      40
;main.c,1007 :: 		if (Loss_ind == 1)
0x2C3F	0x0024      	MOVLB      4
0x2C40	0x086B      	MOVF       main_Loss_ind, 0
0x2C41	0x3A01      	XORLW      1
0x2C42	0x1D03      	BTFSS      STATUS, 2
0x2C43	0x2C53      	GOTO       L_user_setup531
;main.c,1008 :: 		led_wr_str(1, 1, "   ON  ", 7);
0x2C44	0x3001      	MOVLW      1
0x2C45	0x002C      	MOVLB      12
0x2C46	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2C47	0x3001      	MOVLW      1
0x2C48	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2C49	0x30C1      	MOVLW      ?lstr111_main
0x2C4A	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2C4B	0x3002      	MOVLW      hi_addr(?lstr111_main)
0x2C4C	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2C4D	0x3007      	MOVLW      7
0x2C4E	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2C4F	0x3180      	MOVLP      0
0x2C50	0x24B4      	CALL       _led_wr_str
0x2C51	0x31A8      	MOVLP      40
0x2C52	0x2C61      	GOTO       L_user_setup532
L_user_setup531:
;main.c,1010 :: 		led_wr_str(1, 1, "   OFF ", 7);
0x2C53	0x3001      	MOVLW      1
0x2C54	0x002C      	MOVLB      12
0x2C55	0x00A4      	MOVWF      FARG_led_wr_str_col
0x2C56	0x3001      	MOVLW      1
0x2C57	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x2C58	0x30B9      	MOVLW      ?lstr112_main
0x2C59	0x00A6      	MOVWF      FARG_led_wr_str_str
0x2C5A	0x3002      	MOVLW      hi_addr(?lstr112_main)
0x2C5B	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x2C5C	0x3007      	MOVLW      7
0x2C5D	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x2C5E	0x3180      	MOVLP      0
0x2C5F	0x24B4      	CALL       _led_wr_str
0x2C60	0x31A8      	MOVLP      40
L_user_setup532:
;main.c,1011 :: 		asm CLRWDT;
0x2C61	0x0064      	CLRWDT
;main.c,1012 :: 		Delay_ms(100);
0x2C62	0x3003      	MOVLW      3
0x2C63	0x00FB      	MOVWF      R11
0x2C64	0x3008      	MOVLW      8
0x2C65	0x00FC      	MOVWF      R12
0x2C66	0x3077      	MOVLW      119
0x2C67	0x00FD      	MOVWF      R13
L_user_setup533:
0x2C68	0x0BFD      	DECFSZ     R13, 1
0x2C69	0x2C68      	GOTO       L_user_setup533
0x2C6A	0x0BFC      	DECFSZ     R12, 1
0x2C6B	0x2C68      	GOTO       L_user_setup533
0x2C6C	0x0BFB      	DECFSZ     R11, 1
0x2C6D	0x2C68      	GOTO       L_user_setup533
;main.c,1013 :: 		}
L_user_setup530:
L_user_setup529:
;main.c,1014 :: 		if(Button(&PORTB, 2, 50, 0)){   // BYP button
0x2C6E	0x300D      	MOVLW      PORTB
0x2C6F	0x002B      	MOVLB      11
0x2C70	0x00EB      	MOVWF      FARG_Button_port
0x2C71	0x3000      	MOVLW      hi_addr(PORTB)
0x2C72	0x00EC      	MOVWF      FARG_Button_port+1
0x2C73	0x3002      	MOVLW      2
0x2C74	0x00ED      	MOVWF      FARG_Button_pin
0x2C75	0x3032      	MOVLW      50
0x2C76	0x00EE      	MOVWF      FARG_Button_time_ms
0x2C77	0x01EF      	CLRF       FARG_Button_active_state
0x2C78	0x3188      	MOVLP      8
0x2C79	0x24C0      	CALL       _Button
0x2C7A	0x31A8      	MOVLP      40
0x2C7B	0x0870      	MOVF       R0, 0
0x2C7C	0x1903      	BTFSC      STATUS, 2
0x2C7D	0x2C8F      	GOTO       L_user_setup534
;main.c,1015 :: 		asm CLRWDT;
0x2C7E	0x0064      	CLRWDT
;main.c,1016 :: 		if(Loss_ind == 0) {
0x2C7F	0x0024      	MOVLB      4
0x2C80	0x086B      	MOVF       main_Loss_ind, 0
0x2C81	0x3A00      	XORLW      0
0x2C82	0x1D03      	BTFSS      STATUS, 2
0x2C83	0x2C86      	GOTO       L_user_setup535
;main.c,1017 :: 		Loss_ind = 1;
0x2C84	0x3001      	MOVLW      1
0x2C85	0x00EB      	MOVWF      main_Loss_ind
;main.c,1018 :: 		}
L_user_setup535:
;main.c,1019 :: 		Delay_ms(30);
0x2C86	0x309C      	MOVLW      156
0x2C87	0x00FC      	MOVWF      R12
0x2C88	0x30D7      	MOVLW      215
0x2C89	0x00FD      	MOVWF      R13
L_user_setup536:
0x2C8A	0x0BFD      	DECFSZ     R13, 1
0x2C8B	0x2C8A      	GOTO       L_user_setup536
0x2C8C	0x0BFC      	DECFSZ     R12, 1
0x2C8D	0x2C8A      	GOTO       L_user_setup536
;main.c,1020 :: 		asm CLRWDT;
0x2C8E	0x0064      	CLRWDT
;main.c,1021 :: 		} // end of BYP button
L_user_setup534:
;main.c,1022 :: 		if(Button(&PORTB, 1, 50, 0)){   // Auto button
0x2C8F	0x300D      	MOVLW      PORTB
0x2C90	0x002B      	MOVLB      11
0x2C91	0x00EB      	MOVWF      FARG_Button_port
0x2C92	0x3000      	MOVLW      hi_addr(PORTB)
0x2C93	0x00EC      	MOVWF      FARG_Button_port+1
0x2C94	0x3001      	MOVLW      1
0x2C95	0x00ED      	MOVWF      FARG_Button_pin
0x2C96	0x3032      	MOVLW      50
0x2C97	0x00EE      	MOVWF      FARG_Button_time_ms
0x2C98	0x01EF      	CLRF       FARG_Button_active_state
0x2C99	0x3188      	MOVLP      8
0x2C9A	0x24C0      	CALL       _Button
0x2C9B	0x31A8      	MOVLP      40
0x2C9C	0x0870      	MOVF       R0, 0
0x2C9D	0x1903      	BTFSC      STATUS, 2
0x2C9E	0x2CAF      	GOTO       L_user_setup537
;main.c,1023 :: 		asm CLRWDT;
0x2C9F	0x0064      	CLRWDT
;main.c,1024 :: 		if(Loss_ind == 1) {
0x2CA0	0x0024      	MOVLB      4
0x2CA1	0x086B      	MOVF       main_Loss_ind, 0
0x2CA2	0x3A01      	XORLW      1
0x2CA3	0x1D03      	BTFSS      STATUS, 2
0x2CA4	0x2CA6      	GOTO       L_user_setup538
;main.c,1025 :: 		Loss_ind = 0;
0x2CA5	0x01EB      	CLRF       main_Loss_ind
;main.c,1026 :: 		}
L_user_setup538:
;main.c,1027 :: 		Delay_ms(30);
0x2CA6	0x309C      	MOVLW      156
0x2CA7	0x00FC      	MOVWF      R12
0x2CA8	0x30D7      	MOVLW      215
0x2CA9	0x00FD      	MOVWF      R13
L_user_setup539:
0x2CAA	0x0BFD      	DECFSZ     R13, 1
0x2CAB	0x2CAA      	GOTO       L_user_setup539
0x2CAC	0x0BFC      	DECFSZ     R12, 1
0x2CAD	0x2CAA      	GOTO       L_user_setup539
;main.c,1028 :: 		asm CLRWDT;
0x2CAE	0x0064      	CLRWDT
;main.c,1029 :: 		}
L_user_setup537:
;main.c,1030 :: 		} // end lose mode setup
L_user_setup524:
;main.c,1032 :: 		if(Button(&PORTB, 0, 50, 0)){    // Tune btn
0x2CAF	0x300D      	MOVLW      PORTB
0x2CB0	0x002B      	MOVLB      11
0x2CB1	0x00EB      	MOVWF      FARG_Button_port
0x2CB2	0x3000      	MOVLW      hi_addr(PORTB)
0x2CB3	0x00EC      	MOVWF      FARG_Button_port+1
0x2CB4	0x01ED      	CLRF       FARG_Button_pin
0x2CB5	0x3032      	MOVLW      50
0x2CB6	0x00EE      	MOVWF      FARG_Button_time_ms
0x2CB7	0x01EF      	CLRF       FARG_Button_active_state
0x2CB8	0x3188      	MOVLP      8
0x2CB9	0x24C0      	CALL       _Button
0x2CBA	0x31A8      	MOVLP      40
0x2CBB	0x0870      	MOVF       R0, 0
0x2CBC	0x1903      	BTFSC      STATUS, 2
0x2CBD	0x2CE8      	GOTO       L_user_setup540
;main.c,1033 :: 		Delay_ms(300);
0x2CBE	0x3007      	MOVLW      7
0x2CBF	0x00FB      	MOVWF      R11
0x2CC0	0x3017      	MOVLW      23
0x2CC1	0x00FC      	MOVWF      R12
0x2CC2	0x306A      	MOVLW      106
0x2CC3	0x00FD      	MOVWF      R13
L_user_setup541:
0x2CC4	0x0BFD      	DECFSZ     R13, 1
0x2CC5	0x2CC4      	GOTO       L_user_setup541
0x2CC6	0x0BFC      	DECFSZ     R12, 1
0x2CC7	0x2CC4      	GOTO       L_user_setup541
0x2CC8	0x0BFB      	DECFSZ     R11, 1
0x2CC9	0x2CC4      	GOTO       L_user_setup541
0x2CCA	0x0000      	NOP
;main.c,1034 :: 		asm CLRWDT;
0x2CCB	0x0064      	CLRWDT
;main.c,1035 :: 		if(PORTB.B0==1) { // short press button
0x2CCC	0x0020      	MOVLB      0
0x2CCD	0x1C0D      	BTFSS      PORTB, 0
0x2CCE	0x2CE3      	GOTO       L_user_setup542
;main.c,1036 :: 		usr_set ++;
0x2CCF	0x002B      	MOVLB      11
0x2CD0	0x0AA9      	INCF       user_setup_usr_set_L0, 1
0x2CD1	0x1903      	BTFSC      STATUS, 2
0x2CD2	0x0AAA      	INCF       user_setup_usr_set_L0+1, 1
;main.c,1037 :: 		if (usr_set > 5)
0x2CD3	0x3080      	MOVLW      128
0x2CD4	0x00F0      	MOVWF      R0
0x2CD5	0x3080      	MOVLW      128
0x2CD6	0x062A      	XORWF      user_setup_usr_set_L0+1, 0
0x2CD7	0x0270      	SUBWF      R0, 0
0x2CD8	0x1D03      	BTFSS      STATUS, 2
0x2CD9	0x2CDC      	GOTO       L__user_setup769
0x2CDA	0x0829      	MOVF       user_setup_usr_set_L0, 0
0x2CDB	0x3C05      	SUBLW      5
L__user_setup769:
0x2CDC	0x1803      	BTFSC      STATUS, 0
0x2CDD	0x2CE2      	GOTO       L_user_setup543
;main.c,1038 :: 		usr_set = 1;
0x2CDE	0x3001      	MOVLW      1
0x2CDF	0x00A9      	MOVWF      user_setup_usr_set_L0
0x2CE0	0x3000      	MOVLW      0
0x2CE1	0x00AA      	MOVWF      user_setup_usr_set_L0+1
L_user_setup543:
;main.c,1039 :: 		}
0x2CE2	0x2CE7      	GOTO       L_user_setup544
L_user_setup542:
0x2CE3	0x002B      	MOVLB      11
;main.c,1041 :: 		asm CLRWDT;
0x2CE4	0x0064      	CLRWDT
;main.c,1042 :: 		usr_set = 0; // exit setup
0x2CE5	0x01A9      	CLRF       user_setup_usr_set_L0
0x2CE6	0x01AA      	CLRF       user_setup_usr_set_L0+1
;main.c,1043 :: 		}
L_user_setup544:
;main.c,1044 :: 		asm CLRWDT;
0x2CE7	0x0064      	CLRWDT
;main.c,1045 :: 		}  // END Tune btn
L_user_setup540:
;main.c,1047 :: 		}
0x2CE8	0x288C      	GOTO       L_user_setup473
L_user_setup474:
;main.c,1049 :: 		EEPROM_Write(4, dec2bcd(Auto_delta / 10));
0x2CE9	0x300A      	MOVLW      10
0x2CEA	0x00F4      	MOVWF      R4
0x2CEB	0x3000      	MOVLW      0
0x2CEC	0x00F5      	MOVWF      R5
0x2CED	0x002A      	MOVLB      10
0x2CEE	0x0850      	MOVF       _Auto_delta, 0
0x2CEF	0x00F0      	MOVWF      R0
0x2CF0	0x0851      	MOVF       _Auto_delta+1, 0
0x2CF1	0x00F1      	MOVWF      R1
0x2CF2	0x3198      	MOVLP      24
0x2CF3	0x253F      	CALL       _Div_16x16_S
0x2CF4	0x31A8      	MOVLP      40
0x2CF5	0x0870      	MOVF       R0, 0
0x2CF6	0x002B      	MOVLB      11
0x2CF7	0x00B4      	MOVWF      FARG_Dec2Bcd_decnum
0x2CF8	0x3198      	MOVLP      24
0x2CF9	0x2743      	CALL       _Dec2Bcd
0x2CFA	0x31A8      	MOVLP      40
0x2CFB	0x0870      	MOVF       R0, 0
0x2CFC	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x2CFD	0x3004      	MOVLW      4
0x2CFE	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x2CFF	0x3198      	MOVLP      24
0x2D00	0x2000      	CALL       _EEPROM_Write
0x2D01	0x31A8      	MOVLP      40
;main.c,1050 :: 		EEPROM_Write(6, dec2bcd(max_for_start / 10));
0x2D02	0x300A      	MOVLW      10
0x2D03	0x00F4      	MOVWF      R4
0x2D04	0x3000      	MOVLW      0
0x2D05	0x00F5      	MOVWF      R5
0x2D06	0x0029      	MOVLB      9
0x2D07	0x086C      	MOVF       main_max_for_start, 0
0x2D08	0x00F0      	MOVWF      R0
0x2D09	0x086D      	MOVF       main_max_for_start+1, 0
0x2D0A	0x00F1      	MOVWF      R1
0x2D0B	0x3198      	MOVLP      24
0x2D0C	0x253F      	CALL       _Div_16x16_S
0x2D0D	0x31A8      	MOVLP      40
0x2D0E	0x0870      	MOVF       R0, 0
0x2D0F	0x002B      	MOVLB      11
0x2D10	0x00B4      	MOVWF      FARG_Dec2Bcd_decnum
0x2D11	0x3198      	MOVLP      24
0x2D12	0x2743      	CALL       _Dec2Bcd
0x2D13	0x31A8      	MOVLP      40
0x2D14	0x0870      	MOVF       R0, 0
0x2D15	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x2D16	0x3006      	MOVLW      6
0x2D17	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x2D18	0x3198      	MOVLP      24
0x2D19	0x2000      	CALL       _EEPROM_Write
0x2D1A	0x31A8      	MOVLP      40
;main.c,1051 :: 		EEPROM_Write(50, dec2bcd(Dysp_delay));
0x2D1B	0x0028      	MOVLB      8
0x2D1C	0x082C      	MOVF       _Dysp_delay, 0
0x2D1D	0x002B      	MOVLB      11
0x2D1E	0x00B4      	MOVWF      FARG_Dec2Bcd_decnum
0x2D1F	0x3198      	MOVLP      24
0x2D20	0x2743      	CALL       _Dec2Bcd
0x2D21	0x31A8      	MOVLP      40
0x2D22	0x0870      	MOVF       R0, 0
0x2D23	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x2D24	0x3032      	MOVLW      50
0x2D25	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x2D26	0x3198      	MOVLP      24
0x2D27	0x2000      	CALL       _EEPROM_Write
0x2D28	0x31A8      	MOVLP      40
;main.c,1052 :: 		EEPROM_Write(0x34, dec2bcd(Fid_loss));
0x2D29	0x0028      	MOVLB      8
0x2D2A	0x086F      	MOVF       _Fid_loss, 0
0x2D2B	0x002B      	MOVLB      11
0x2D2C	0x00B4      	MOVWF      FARG_Dec2Bcd_decnum
0x2D2D	0x3198      	MOVLP      24
0x2D2E	0x2743      	CALL       _Dec2Bcd
0x2D2F	0x31A8      	MOVLP      40
0x2D30	0x0870      	MOVF       R0, 0
0x2D31	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x2D32	0x3034      	MOVLW      52
0x2D33	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x2D34	0x3198      	MOVLP      24
0x2D35	0x2000      	CALL       _EEPROM_Write
0x2D36	0x31A8      	MOVLP      40
;main.c,1053 :: 		EEPROM_Write(0x33, dec2bcd(Loss_ind));
0x2D37	0x0024      	MOVLB      4
0x2D38	0x086B      	MOVF       main_Loss_ind, 0
0x2D39	0x002B      	MOVLB      11
0x2D3A	0x00B4      	MOVWF      FARG_Dec2Bcd_decnum
0x2D3B	0x3198      	MOVLP      24
0x2D3C	0x2743      	CALL       _Dec2Bcd
0x2D3D	0x31A8      	MOVLP      40
0x2D3E	0x0870      	MOVF       R0, 0
0x2D3F	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x2D40	0x3033      	MOVLW      51
0x2D41	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x2D42	0x3198      	MOVLP      24
0x2D43	0x2000      	CALL       _EEPROM_Write
0x2D44	0x31A8      	MOVLP      40
;main.c,1054 :: 		dysp_cnt = Dysp_delay * dysp_cnt_mult;
0x2D45	0x0028      	MOVLB      8
0x2D46	0x082C      	MOVF       _Dysp_delay, 0
0x2D47	0x00F0      	MOVWF      R0
0x2D48	0x3180      	MOVLP      0
0x2D49	0x27BE      	CALL       _Byte2Double
0x2D4A	0x31A8      	MOVLP      40
0x2D4B	0x0027      	MOVLB      7
0x2D4C	0x0862      	MOVF       _dysp_cnt_mult, 0
0x2D4D	0x00F4      	MOVWF      R4
0x2D4E	0x0863      	MOVF       _dysp_cnt_mult+1, 0
0x2D4F	0x00F5      	MOVWF      R5
0x2D50	0x0864      	MOVF       _dysp_cnt_mult+2, 0
0x2D51	0x00F6      	MOVWF      R6
0x2D52	0x0865      	MOVF       _dysp_cnt_mult+3, 0
0x2D53	0x00F7      	MOVWF      R7
0x2D54	0x3188      	MOVLP      8
0x2D55	0x2598      	CALL       _Mul_32x32_FP
0x2D56	0x31A8      	MOVLP      40
0x2D57	0x3180      	MOVLP      0
0x2D58	0x2651      	CALL       _Double2Int
0x2D59	0x31A8      	MOVLP      40
0x2D5A	0x0870      	MOVF       R0, 0
0x2D5B	0x0028      	MOVLB      8
0x2D5C	0x00AD      	MOVWF      _dysp_cnt
0x2D5D	0x0871      	MOVF       R1, 0
0x2D5E	0x00AE      	MOVWF      _dysp_cnt+1
;main.c,1056 :: 		asm CLRWDT;
0x2D5F	0x0064      	CLRWDT
;main.c,1057 :: 		lcd_prep_short = 1;
0x2D60	0x3001      	MOVLW      1
0x2D61	0x0024      	MOVLB      4
0x2D62	0x00EA      	MOVWF      _lcd_prep_short
;main.c,1059 :: 		lcd_prep();
0x2D63	0x31A0      	MOVLP      32
0x2D64	0x2357      	CALL       _lcd_prep
0x2D65	0x31A8      	MOVLP      40
;main.c,1060 :: 		delay_ms(500);
0x2D66	0x300B      	MOVLW      11
0x2D67	0x00FB      	MOVWF      R11
0x2D68	0x3026      	MOVLW      38
0x2D69	0x00FC      	MOVWF      R12
0x2D6A	0x305D      	MOVLW      93
0x2D6B	0x00FD      	MOVWF      R13
L_user_setup545:
0x2D6C	0x0BFD      	DECFSZ     R13, 1
0x2D6D	0x2D6C      	GOTO       L_user_setup545
0x2D6E	0x0BFC      	DECFSZ     R12, 1
0x2D6F	0x2D6C      	GOTO       L_user_setup545
0x2D70	0x0BFB      	DECFSZ     R11, 1
0x2D71	0x2D6C      	GOTO       L_user_setup545
0x2D72	0x0000      	NOP
0x2D73	0x0000      	NOP
;main.c,1061 :: 		lcd_ind();
0x2D74	0x3188      	MOVLP      8
0x2D75	0x2000      	CALL       _lcd_ind
0x2D76	0x31A8      	MOVLP      40
;main.c,1062 :: 		return;
;main.c,1063 :: 		}
L_end_user_setup:
0x2D77	0x0008      	RETURN
; end of _user_setup
_oled_init:
;oled_control.c,84 :: 		void oled_init (void) {  // OLED init
;oled_control.c,86 :: 		Soft_I2C_Start();
0x2D78	0x3180      	MOVLP      0
0x2D79	0x2003      	CALL       _Soft_I2C_Start
0x2D7A	0x31A8      	MOVLP      40
;oled_control.c,87 :: 		Soft_I2C_Write(led_addr);             // device addres
0x2D7B	0x002A      	MOVLB      10
0x2D7C	0x083A      	MOVF       oled_control_led_addr, 0
0x2D7D	0x002C      	MOVLB      12
0x2D7E	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2D7F	0x3180      	MOVLP      0
0x2D80	0x2022      	CALL       _Soft_I2C_Write
0x2D81	0x31A8      	MOVLP      40
;oled_control.c,88 :: 		Soft_I2C_Write(0);              // 0 - continious mode, command; 64 - Co, data
0x2D82	0x002C      	MOVLB      12
0x2D83	0x01BD      	CLRF       FARG_Soft_I2C_Write_d
0x2D84	0x3180      	MOVLP      0
0x2D85	0x2022      	CALL       _Soft_I2C_Write
0x2D86	0x31A8      	MOVLP      40
;oled_control.c,89 :: 		Soft_I2C_Write (0xAE); // display OFF
0x2D87	0x30AE      	MOVLW      174
0x2D88	0x002C      	MOVLB      12
0x2D89	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2D8A	0x3180      	MOVLP      0
0x2D8B	0x2022      	CALL       _Soft_I2C_Write
0x2D8C	0x31A8      	MOVLP      40
;oled_control.c,91 :: 		if(led_type==2 | led_type==3) { // 128*32 OLED
0x2D8D	0x002A      	MOVLB      10
0x2D8E	0x083B      	MOVF       oled_control_led_type, 0
0x2D8F	0x3A02      	XORLW      2
0x2D90	0x3001      	MOVLW      1
0x2D91	0x1D03      	BTFSS      STATUS, 2
0x2D92	0x3000      	MOVLW      0
0x2D93	0x00F1      	MOVWF      R1
0x2D94	0x083B      	MOVF       oled_control_led_type, 0
0x2D95	0x3A03      	XORLW      3
0x2D96	0x3001      	MOVLW      1
0x2D97	0x1D03      	BTFSS      STATUS, 2
0x2D98	0x3000      	MOVLW      0
0x2D99	0x00F0      	MOVWF      R0
0x2D9A	0x0871      	MOVF       R1, 0
0x2D9B	0x04F0      	IORWF       R0, 1
0x2D9C	0x1903      	BTFSC      STATUS, 2
0x2D9D	0x2E54      	GOTO       L_oled_init18
;oled_control.c,92 :: 		Soft_I2C_Write (0xD5); // clock division
0x2D9E	0x30D5      	MOVLW      213
0x2D9F	0x002C      	MOVLB      12
0x2DA0	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DA1	0x3180      	MOVLP      0
0x2DA2	0x2022      	CALL       _Soft_I2C_Write
0x2DA3	0x31A8      	MOVLP      40
;oled_control.c,93 :: 		Soft_I2C_Write (0x80); // ratio
0x2DA4	0x3080      	MOVLW      128
0x2DA5	0x002C      	MOVLB      12
0x2DA6	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DA7	0x3180      	MOVLP      0
0x2DA8	0x2022      	CALL       _Soft_I2C_Write
0x2DA9	0x31A8      	MOVLP      40
;oled_control.c,95 :: 		Soft_I2C_Write (0xA8); //  multiplexer
0x2DAA	0x30A8      	MOVLW      168
0x2DAB	0x002C      	MOVLB      12
0x2DAC	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DAD	0x3180      	MOVLP      0
0x2DAE	0x2022      	CALL       _Soft_I2C_Write
0x2DAF	0x31A8      	MOVLP      40
;oled_control.c,96 :: 		Soft_I2C_Write (0x3f); //
0x2DB0	0x303F      	MOVLW      63
0x2DB1	0x002C      	MOVLB      12
0x2DB2	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DB3	0x3180      	MOVLP      0
0x2DB4	0x2022      	CALL       _Soft_I2C_Write
0x2DB5	0x31A8      	MOVLP      40
;oled_control.c,98 :: 		Soft_I2C_Write (0xD3); //  offset
0x2DB6	0x30D3      	MOVLW      211
0x2DB7	0x002C      	MOVLB      12
0x2DB8	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DB9	0x3180      	MOVLP      0
0x2DBA	0x2022      	CALL       _Soft_I2C_Write
0x2DBB	0x31A8      	MOVLP      40
;oled_control.c,99 :: 		if(led_type==2) Soft_I2C_Write (0 + shift_line); // column shift
0x2DBC	0x002A      	MOVLB      10
0x2DBD	0x083B      	MOVF       oled_control_led_type, 0
0x2DBE	0x3A02      	XORLW      2
0x2DBF	0x1D03      	BTFSS      STATUS, 2
0x2DC0	0x2DC8      	GOTO       L_oled_init19
0x2DC1	0x0837      	MOVF       oled_control_shift_line, 0
0x2DC2	0x002C      	MOVLB      12
0x2DC3	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DC4	0x3180      	MOVLP      0
0x2DC5	0x2022      	CALL       _Soft_I2C_Write
0x2DC6	0x31A8      	MOVLP      40
0x2DC7	0x2DD0      	GOTO       L_oled_init20
L_oled_init19:
;oled_control.c,100 :: 		else Soft_I2C_Write (31 + shift_line); // column shift
0x2DC8	0x002A      	MOVLB      10
0x2DC9	0x0837      	MOVF       oled_control_shift_line, 0
0x2DCA	0x3E1F      	ADDLW      31
0x2DCB	0x002C      	MOVLB      12
0x2DCC	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DCD	0x3180      	MOVLP      0
0x2DCE	0x2022      	CALL       _Soft_I2C_Write
0x2DCF	0x31A8      	MOVLP      40
L_oled_init20:
;oled_control.c,102 :: 		Soft_I2C_Write (0x40); // set line, line = 0
0x2DD0	0x3040      	MOVLW      64
0x2DD1	0x002C      	MOVLB      12
0x2DD2	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DD3	0x3180      	MOVLP      0
0x2DD4	0x2022      	CALL       _Soft_I2C_Write
0x2DD5	0x31A8      	MOVLP      40
;oled_control.c,104 :: 		Soft_I2C_Write (0x8D); //  charge pump
0x2DD6	0x308D      	MOVLW      141
0x2DD7	0x002C      	MOVLB      12
0x2DD8	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DD9	0x3180      	MOVLP      0
0x2DDA	0x2022      	CALL       _Soft_I2C_Write
0x2DDB	0x31A8      	MOVLP      40
;oled_control.c,105 :: 		Soft_I2C_Write (0x14); //  0x10 - external, 0x14 - internal
0x2DDC	0x3014      	MOVLW      20
0x2DDD	0x002C      	MOVLB      12
0x2DDE	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DDF	0x3180      	MOVLP      0
0x2DE0	0x2022      	CALL       _Soft_I2C_Write
0x2DE1	0x31A8      	MOVLP      40
;oled_control.c,107 :: 		Soft_I2C_Write (0x81); //  contrast
0x2DE2	0x3081      	MOVLW      129
0x2DE3	0x002C      	MOVLB      12
0x2DE4	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DE5	0x3180      	MOVLP      0
0x2DE6	0x2022      	CALL       _Soft_I2C_Write
0x2DE7	0x31A8      	MOVLP      40
;oled_control.c,108 :: 		Soft_I2C_Write (180); //   0-255
0x2DE8	0x30B4      	MOVLW      180
0x2DE9	0x002C      	MOVLB      12
0x2DEA	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DEB	0x3180      	MOVLP      0
0x2DEC	0x2022      	CALL       _Soft_I2C_Write
0x2DED	0x31A8      	MOVLP      40
;oled_control.c,110 :: 		Soft_I2C_Write (0xD9); //  pre-charge
0x2DEE	0x30D9      	MOVLW      217
0x2DEF	0x002C      	MOVLB      12
0x2DF0	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DF1	0x3180      	MOVLP      0
0x2DF2	0x2022      	CALL       _Soft_I2C_Write
0x2DF3	0x31A8      	MOVLP      40
;oled_control.c,111 :: 		Soft_I2C_Write (0x22); //  0x22 - external, 0xF1 - internal
0x2DF4	0x3022      	MOVLW      34
0x2DF5	0x002C      	MOVLB      12
0x2DF6	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DF7	0x3180      	MOVLP      0
0x2DF8	0x2022      	CALL       _Soft_I2C_Write
0x2DF9	0x31A8      	MOVLP      40
;oled_control.c,113 :: 		Soft_I2C_Write (0x20); //  memory addressing mode
0x2DFA	0x3020      	MOVLW      32
0x2DFB	0x002C      	MOVLB      12
0x2DFC	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2DFD	0x3180      	MOVLP      0
0x2DFE	0x2022      	CALL       _Soft_I2C_Write
0x2DFF	0x31A8      	MOVLP      40
;oled_control.c,114 :: 		Soft_I2C_Write (0x02); //  page addressing mode
0x2E00	0x3002      	MOVLW      2
0x2E01	0x002C      	MOVLB      12
0x2E02	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E03	0x3180      	MOVLP      0
0x2E04	0x2022      	CALL       _Soft_I2C_Write
0x2E05	0x31A8      	MOVLP      40
;oled_control.c,116 :: 		Soft_I2C_Write (0x21); // set column range
0x2E06	0x3021      	MOVLW      33
0x2E07	0x002C      	MOVLB      12
0x2E08	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E09	0x3180      	MOVLP      0
0x2E0A	0x2022      	CALL       _Soft_I2C_Write
0x2E0B	0x31A8      	MOVLP      40
;oled_control.c,117 :: 		Soft_I2C_Write (0);    // column start
0x2E0C	0x002C      	MOVLB      12
0x2E0D	0x01BD      	CLRF       FARG_Soft_I2C_Write_d
0x2E0E	0x3180      	MOVLP      0
0x2E0F	0x2022      	CALL       _Soft_I2C_Write
0x2E10	0x31A8      	MOVLP      40
;oled_control.c,118 :: 		Soft_I2C_Write (127);  // column stop
0x2E11	0x307F      	MOVLW      127
0x2E12	0x002C      	MOVLB      12
0x2E13	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E14	0x3180      	MOVLP      0
0x2E15	0x2022      	CALL       _Soft_I2C_Write
0x2E16	0x31A8      	MOVLP      40
;oled_control.c,120 :: 		Soft_I2C_Write (0x2E); //  stop scrolling
0x2E17	0x302E      	MOVLW      46
0x2E18	0x002C      	MOVLB      12
0x2E19	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E1A	0x3180      	MOVLP      0
0x2E1B	0x2022      	CALL       _Soft_I2C_Write
0x2E1C	0x31A8      	MOVLP      40
;oled_control.c,122 :: 		if(led_type==2) {
0x2E1D	0x002A      	MOVLB      10
0x2E1E	0x083B      	MOVF       oled_control_led_type, 0
0x2E1F	0x3A02      	XORLW      2
0x2E20	0x1D03      	BTFSS      STATUS, 2
0x2E21	0x2E2F      	GOTO       L_oled_init21
;oled_control.c,123 :: 		Soft_I2C_Write (0xA0); //  segment re-map, A0 - normal, A1 - remapped
0x2E22	0x30A0      	MOVLW      160
0x2E23	0x002C      	MOVLB      12
0x2E24	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E25	0x3180      	MOVLP      0
0x2E26	0x2022      	CALL       _Soft_I2C_Write
0x2E27	0x31A8      	MOVLP      40
;oled_control.c,125 :: 		Soft_I2C_Write (0xC0); // scan direction, C0 - normal, C8 - remapped
0x2E28	0x30C0      	MOVLW      192
0x2E29	0x002C      	MOVLB      12
0x2E2A	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E2B	0x3180      	MOVLP      0
0x2E2C	0x2022      	CALL       _Soft_I2C_Write
0x2E2D	0x31A8      	MOVLP      40
;oled_control.c,126 :: 		}
0x2E2E	0x2E3B      	GOTO       L_oled_init22
L_oled_init21:
;oled_control.c,128 :: 		Soft_I2C_Write (0xA1); //  segment re-map, A0 - normal, A1 - remapped
0x2E2F	0x30A1      	MOVLW      161
0x2E30	0x002C      	MOVLB      12
0x2E31	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E32	0x3180      	MOVLP      0
0x2E33	0x2022      	CALL       _Soft_I2C_Write
0x2E34	0x31A8      	MOVLP      40
;oled_control.c,130 :: 		Soft_I2C_Write (0xC8); // scan direction, C0 - normal, C8 - remapped
0x2E35	0x30C8      	MOVLW      200
0x2E36	0x002C      	MOVLB      12
0x2E37	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E38	0x3180      	MOVLP      0
0x2E39	0x2022      	CALL       _Soft_I2C_Write
0x2E3A	0x31A8      	MOVLP      40
;oled_control.c,131 :: 		}
L_oled_init22:
;oled_control.c,133 :: 		Soft_I2C_Write (0xDA); //  COM pins configure
0x2E3B	0x30DA      	MOVLW      218
0x2E3C	0x002C      	MOVLB      12
0x2E3D	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E3E	0x3180      	MOVLP      0
0x2E3F	0x2022      	CALL       _Soft_I2C_Write
0x2E40	0x31A8      	MOVLP      40
;oled_control.c,134 :: 		Soft_I2C_Write (0x02); // 12 for x64
0x2E41	0x3002      	MOVLW      2
0x2E42	0x002C      	MOVLB      12
0x2E43	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E44	0x3180      	MOVLP      0
0x2E45	0x2022      	CALL       _Soft_I2C_Write
0x2E46	0x31A8      	MOVLP      40
;oled_control.c,136 :: 		Soft_I2C_Write (0xDB); //  V-COM detect
0x2E47	0x30DB      	MOVLW      219
0x2E48	0x002C      	MOVLB      12
0x2E49	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E4A	0x3180      	MOVLP      0
0x2E4B	0x2022      	CALL       _Soft_I2C_Write
0x2E4C	0x31A8      	MOVLP      40
;oled_control.c,137 :: 		Soft_I2C_Write (0x40); //
0x2E4D	0x3040      	MOVLW      64
0x2E4E	0x002C      	MOVLB      12
0x2E4F	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E50	0x3180      	MOVLP      0
0x2E51	0x2022      	CALL       _Soft_I2C_Write
0x2E52	0x31A8      	MOVLP      40
;oled_control.c,139 :: 		}
0x2E53	0x2EFC      	GOTO       L_oled_init23
L_oled_init18:
;oled_control.c,141 :: 		Soft_I2C_Write (0xD5); // clock division
0x2E54	0x30D5      	MOVLW      213
0x2E55	0x002C      	MOVLB      12
0x2E56	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E57	0x3180      	MOVLP      0
0x2E58	0x2022      	CALL       _Soft_I2C_Write
0x2E59	0x31A8      	MOVLP      40
;oled_control.c,142 :: 		Soft_I2C_Write (0x80); // ratio
0x2E5A	0x3080      	MOVLW      128
0x2E5B	0x002C      	MOVLB      12
0x2E5C	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E5D	0x3180      	MOVLP      0
0x2E5E	0x2022      	CALL       _Soft_I2C_Write
0x2E5F	0x31A8      	MOVLP      40
;oled_control.c,144 :: 		Soft_I2C_Write (0xA8); //  multiplexer
0x2E60	0x30A8      	MOVLW      168
0x2E61	0x002C      	MOVLB      12
0x2E62	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E63	0x3180      	MOVLP      0
0x2E64	0x2022      	CALL       _Soft_I2C_Write
0x2E65	0x31A8      	MOVLP      40
;oled_control.c,145 :: 		Soft_I2C_Write (63); //
0x2E66	0x303F      	MOVLW      63
0x2E67	0x002C      	MOVLB      12
0x2E68	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E69	0x3180      	MOVLP      0
0x2E6A	0x2022      	CALL       _Soft_I2C_Write
0x2E6B	0x31A8      	MOVLP      40
;oled_control.c,147 :: 		Soft_I2C_Write (0xD3); //  offset
0x2E6C	0x30D3      	MOVLW      211
0x2E6D	0x002C      	MOVLB      12
0x2E6E	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E6F	0x3180      	MOVLP      0
0x2E70	0x2022      	CALL       _Soft_I2C_Write
0x2E71	0x31A8      	MOVLP      40
;oled_control.c,148 :: 		Soft_I2C_Write (shift_line); // no offset for x64 !
0x2E72	0x002A      	MOVLB      10
0x2E73	0x0837      	MOVF       oled_control_shift_line, 0
0x2E74	0x002C      	MOVLB      12
0x2E75	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E76	0x3180      	MOVLP      0
0x2E77	0x2022      	CALL       _Soft_I2C_Write
0x2E78	0x31A8      	MOVLP      40
;oled_control.c,150 :: 		Soft_I2C_Write (0x40); // set line, line = 0
0x2E79	0x3040      	MOVLW      64
0x2E7A	0x002C      	MOVLB      12
0x2E7B	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E7C	0x3180      	MOVLP      0
0x2E7D	0x2022      	CALL       _Soft_I2C_Write
0x2E7E	0x31A8      	MOVLP      40
;oled_control.c,152 :: 		Soft_I2C_Write (0x8D); //  charge pump
0x2E7F	0x308D      	MOVLW      141
0x2E80	0x002C      	MOVLB      12
0x2E81	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E82	0x3180      	MOVLP      0
0x2E83	0x2022      	CALL       _Soft_I2C_Write
0x2E84	0x31A8      	MOVLP      40
;oled_control.c,153 :: 		Soft_I2C_Write (0x14); //  0x10 - external, 0x14 - internal
0x2E85	0x3014      	MOVLW      20
0x2E86	0x002C      	MOVLB      12
0x2E87	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E88	0x3180      	MOVLP      0
0x2E89	0x2022      	CALL       _Soft_I2C_Write
0x2E8A	0x31A8      	MOVLP      40
;oled_control.c,155 :: 		Soft_I2C_Write (0x81); //  contrast
0x2E8B	0x3081      	MOVLW      129
0x2E8C	0x002C      	MOVLB      12
0x2E8D	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E8E	0x3180      	MOVLP      0
0x2E8F	0x2022      	CALL       _Soft_I2C_Write
0x2E90	0x31A8      	MOVLP      40
;oled_control.c,156 :: 		Soft_I2C_Write (255); //   0-255
0x2E91	0x30FF      	MOVLW      255
0x2E92	0x002C      	MOVLB      12
0x2E93	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E94	0x3180      	MOVLP      0
0x2E95	0x2022      	CALL       _Soft_I2C_Write
0x2E96	0x31A8      	MOVLP      40
;oled_control.c,158 :: 		Soft_I2C_Write (0xD9); //  pre-charge
0x2E97	0x30D9      	MOVLW      217
0x2E98	0x002C      	MOVLB      12
0x2E99	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2E9A	0x3180      	MOVLP      0
0x2E9B	0x2022      	CALL       _Soft_I2C_Write
0x2E9C	0x31A8      	MOVLP      40
;oled_control.c,159 :: 		Soft_I2C_Write (0xf1); //  0x22 - external, 0xF1 - internal
0x2E9D	0x30F1      	MOVLW      241
0x2E9E	0x002C      	MOVLB      12
0x2E9F	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EA0	0x3180      	MOVLP      0
0x2EA1	0x2022      	CALL       _Soft_I2C_Write
0x2EA2	0x31A8      	MOVLP      40
;oled_control.c,161 :: 		Soft_I2C_Write (0x20); //  memory addressing mode
0x2EA3	0x3020      	MOVLW      32
0x2EA4	0x002C      	MOVLB      12
0x2EA5	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EA6	0x3180      	MOVLP      0
0x2EA7	0x2022      	CALL       _Soft_I2C_Write
0x2EA8	0x31A8      	MOVLP      40
;oled_control.c,162 :: 		Soft_I2C_Write (0x02); //  page addressing mode   02
0x2EA9	0x3002      	MOVLW      2
0x2EAA	0x002C      	MOVLB      12
0x2EAB	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EAC	0x3180      	MOVLP      0
0x2EAD	0x2022      	CALL       _Soft_I2C_Write
0x2EAE	0x31A8      	MOVLP      40
;oled_control.c,164 :: 		Soft_I2C_Write (0x21); // set column range
0x2EAF	0x3021      	MOVLW      33
0x2EB0	0x002C      	MOVLB      12
0x2EB1	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EB2	0x3180      	MOVLP      0
0x2EB3	0x2022      	CALL       _Soft_I2C_Write
0x2EB4	0x31A8      	MOVLP      40
;oled_control.c,165 :: 		Soft_I2C_Write (0);    // column start
0x2EB5	0x002C      	MOVLB      12
0x2EB6	0x01BD      	CLRF       FARG_Soft_I2C_Write_d
0x2EB7	0x3180      	MOVLP      0
0x2EB8	0x2022      	CALL       _Soft_I2C_Write
0x2EB9	0x31A8      	MOVLP      40
;oled_control.c,166 :: 		Soft_I2C_Write (127);  // column stop
0x2EBA	0x307F      	MOVLW      127
0x2EBB	0x002C      	MOVLB      12
0x2EBC	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EBD	0x3180      	MOVLP      0
0x2EBE	0x2022      	CALL       _Soft_I2C_Write
0x2EBF	0x31A8      	MOVLP      40
;oled_control.c,168 :: 		Soft_I2C_Write (0x2E); //  stop scrolling
0x2EC0	0x302E      	MOVLW      46
0x2EC1	0x002C      	MOVLB      12
0x2EC2	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EC3	0x3180      	MOVLP      0
0x2EC4	0x2022      	CALL       _Soft_I2C_Write
0x2EC5	0x31A8      	MOVLP      40
;oled_control.c,170 :: 		if(led_type==4) {
0x2EC6	0x002A      	MOVLB      10
0x2EC7	0x083B      	MOVF       oled_control_led_type, 0
0x2EC8	0x3A04      	XORLW      4
0x2EC9	0x1D03      	BTFSS      STATUS, 2
0x2ECA	0x2ED8      	GOTO       L_oled_init24
;oled_control.c,171 :: 		Soft_I2C_Write (0xA0); //  segment re-map, A0 - normal, A1 - remapped
0x2ECB	0x30A0      	MOVLW      160
0x2ECC	0x002C      	MOVLB      12
0x2ECD	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2ECE	0x3180      	MOVLP      0
0x2ECF	0x2022      	CALL       _Soft_I2C_Write
0x2ED0	0x31A8      	MOVLP      40
;oled_control.c,173 :: 		Soft_I2C_Write (0xC0); // scan direction, C0 - normal, C8 - remapped
0x2ED1	0x30C0      	MOVLW      192
0x2ED2	0x002C      	MOVLB      12
0x2ED3	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2ED4	0x3180      	MOVLP      0
0x2ED5	0x2022      	CALL       _Soft_I2C_Write
0x2ED6	0x31A8      	MOVLP      40
;oled_control.c,174 :: 		}
0x2ED7	0x2EE4      	GOTO       L_oled_init25
L_oled_init24:
;oled_control.c,176 :: 		Soft_I2C_Write (0xA1); //  segment re-map, A0 - normal, A1 - remapped
0x2ED8	0x30A1      	MOVLW      161
0x2ED9	0x002C      	MOVLB      12
0x2EDA	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EDB	0x3180      	MOVLP      0
0x2EDC	0x2022      	CALL       _Soft_I2C_Write
0x2EDD	0x31A8      	MOVLP      40
;oled_control.c,178 :: 		Soft_I2C_Write (0xC8); // scan direction, C0 - normal, C8 - remapped
0x2EDE	0x30C8      	MOVLW      200
0x2EDF	0x002C      	MOVLB      12
0x2EE0	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EE1	0x3180      	MOVLP      0
0x2EE2	0x2022      	CALL       _Soft_I2C_Write
0x2EE3	0x31A8      	MOVLP      40
;oled_control.c,179 :: 		}
L_oled_init25:
;oled_control.c,181 :: 		Soft_I2C_Write (0xDA); //  COM pins configure
0x2EE4	0x30DA      	MOVLW      218
0x2EE5	0x002C      	MOVLB      12
0x2EE6	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EE7	0x3180      	MOVLP      0
0x2EE8	0x2022      	CALL       _Soft_I2C_Write
0x2EE9	0x31A8      	MOVLP      40
;oled_control.c,182 :: 		Soft_I2C_Write (0x12); // 12 for x64
0x2EEA	0x3012      	MOVLW      18
0x2EEB	0x002C      	MOVLB      12
0x2EEC	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EED	0x3180      	MOVLP      0
0x2EEE	0x2022      	CALL       _Soft_I2C_Write
0x2EEF	0x31A8      	MOVLP      40
;oled_control.c,184 :: 		Soft_I2C_Write (0xDB); //  V-COM detect
0x2EF0	0x30DB      	MOVLW      219
0x2EF1	0x002C      	MOVLB      12
0x2EF2	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EF3	0x3180      	MOVLP      0
0x2EF4	0x2022      	CALL       _Soft_I2C_Write
0x2EF5	0x31A8      	MOVLP      40
;oled_control.c,185 :: 		Soft_I2C_Write (0x40); //
0x2EF6	0x3040      	MOVLW      64
0x2EF7	0x002C      	MOVLB      12
0x2EF8	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EF9	0x3180      	MOVLP      0
0x2EFA	0x2022      	CALL       _Soft_I2C_Write
0x2EFB	0x31A8      	MOVLP      40
;oled_control.c,186 :: 		}
L_oled_init23:
;oled_control.c,187 :: 		Soft_I2C_Write (0xA4); //  display entire ON
0x2EFC	0x30A4      	MOVLW      164
0x2EFD	0x002C      	MOVLB      12
0x2EFE	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2EFF	0x3180      	MOVLP      0
0x2F00	0x2022      	CALL       _Soft_I2C_Write
0x2F01	0x31A8      	MOVLP      40
;oled_control.c,189 :: 		Soft_I2C_Write (0xA6); // 0xA6 - normal, 0xA7 - inverse
0x2F02	0x30A6      	MOVLW      166
0x2F03	0x002C      	MOVLB      12
0x2F04	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2F05	0x3180      	MOVLP      0
0x2F06	0x2022      	CALL       _Soft_I2C_Write
0x2F07	0x31A8      	MOVLP      40
;oled_control.c,191 :: 		Soft_I2C_Stop ();
0x2F08	0x3180      	MOVLP      0
0x2F09	0x2075      	CALL       _Soft_I2C_Stop
0x2F0A	0x31A8      	MOVLP      40
;oled_control.c,195 :: 		Delay_ms(100);
0x2F0B	0x3003      	MOVLW      3
0x2F0C	0x00FB      	MOVWF      R11
0x2F0D	0x3008      	MOVLW      8
0x2F0E	0x00FC      	MOVWF      R12
0x2F0F	0x3077      	MOVLW      119
0x2F10	0x00FD      	MOVWF      R13
L_oled_init26:
0x2F11	0x0BFD      	DECFSZ     R13, 1
0x2F12	0x2F11      	GOTO       L_oled_init26
0x2F13	0x0BFC      	DECFSZ     R12, 1
0x2F14	0x2F11      	GOTO       L_oled_init26
0x2F15	0x0BFB      	DECFSZ     R11, 1
0x2F16	0x2F11      	GOTO       L_oled_init26
;oled_control.c,196 :: 		Soft_I2C_Start();
0x2F17	0x3180      	MOVLP      0
0x2F18	0x2003      	CALL       _Soft_I2C_Start
0x2F19	0x31A8      	MOVLP      40
;oled_control.c,197 :: 		Soft_I2C_Write(led_addr);             // device addres
0x2F1A	0x002A      	MOVLB      10
0x2F1B	0x083A      	MOVF       oled_control_led_addr, 0
0x2F1C	0x002C      	MOVLB      12
0x2F1D	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2F1E	0x3180      	MOVLP      0
0x2F1F	0x2022      	CALL       _Soft_I2C_Write
0x2F20	0x31A8      	MOVLP      40
;oled_control.c,198 :: 		Soft_I2C_Write(64);              // 0 - continious mode, command; 64 - Co, data
0x2F21	0x3040      	MOVLW      64
0x2F22	0x002C      	MOVLB      12
0x2F23	0x00BD      	MOVWF      FARG_Soft_I2C_Write_d
0x2F24	0x3180      	MOVLP      0
0x2F25	0x2022      	CALL       _Soft_I2C_Write
0x2F26	0x31A8      	MOVLP      40
;oled_control.c,200 :: 		if(led_type==2 | led_type==3) {  // 128*32 OLED
0x2F27	0x002A      	MOVLB      10
0x2F28	0x083B      	MOVF       oled_control_led_type, 0
0x2F29	0x3A02      	XORLW      2
0x2F2A	0x3001      	MOVLW      1
0x2F2B	0x1D03      	BTFSS      STATUS, 2
0x2F2C	0x3000      	MOVLW      0
0x2F2D	0x00F1      	MOVWF      R1
0x2F2E	0x083B      	MOVF       oled_control_led_type, 0
0x2F2F	0x3A03      	XORLW      3
0x2F30	0x3001      	MOVLW      1
0x2F31	0x1D03      	BTFSS      STATUS, 2
0x2F32	0x3000      	MOVLW      0
0x2F33	0x00F0      	MOVWF      R0
0x2F34	0x0871      	MOVF       R1, 0
0x2F35	0x04F0      	IORWF       R0, 1
0x2F36	0x1903      	BTFSC      STATUS, 2
0x2F37	0x2F57      	GOTO       L_oled_init27
;oled_control.c,201 :: 		for (r = 0; r <=3; r++) {
0x2F38	0x002B      	MOVLB      11
0x2F39	0x01AA      	CLRF       oled_init_r_L0
L_oled_init28:
0x2F3A	0x082A      	MOVF       oled_init_r_L0, 0
0x2F3B	0x3C03      	SUBLW      3
0x2F3C	0x1C03      	BTFSS      STATUS, 0
0x2F3D	0x2F56      	GOTO       L_oled_init29
;oled_control.c,202 :: 		set_addressing (r, 0);    // clear all 4 pages
0x2F3E	0x082A      	MOVF       oled_init_r_L0, 0
0x2F3F	0x002C      	MOVLB      12
0x2F40	0x00B8      	MOVWF      FARG_set_addressing_pagenum
0x2F41	0x01B9      	CLRF       FARG_set_addressing_c_start
0x2F42	0x3180      	MOVLP      0
0x2F43	0x208E      	CALL       _set_addressing
0x2F44	0x31A8      	MOVLP      40
;oled_control.c,203 :: 		for (i = 0; i < 128; i++, Soft_I2C_Write(0)); // clear one page pixels
0x2F45	0x002B      	MOVLB      11
0x2F46	0x01A9      	CLRF       oled_init_i_L0
L_oled_init31:
0x2F47	0x002B      	MOVLB      11
0x2F48	0x3080      	MOVLW      128
0x2F49	0x0229      	SUBWF      oled_init_i_L0, 0
0x2F4A	0x1803      	BTFSC      STATUS, 0
0x2F4B	0x2F53      	GOTO       L_oled_init32
0x2F4C	0x0AA9      	INCF       oled_init_i_L0, 1
0x2F4D	0x002C      	MOVLB      12
0x2F4E	0x01BD      	CLRF       FARG_Soft_I2C_Write_d
0x2F4F	0x3180      	MOVLP      0
0x2F50	0x2022      	CALL       _Soft_I2C_Write
0x2F51	0x31A8      	MOVLP      40
0x2F52	0x2F47      	GOTO       L_oled_init31
L_oled_init32:
;oled_control.c,201 :: 		for (r = 0; r <=3; r++) {
0x2F53	0x002B      	MOVLB      11
0x2F54	0x0AAA      	INCF       oled_init_r_L0, 1
;oled_control.c,204 :: 		}
0x2F55	0x2F3A      	GOTO       L_oled_init28
L_oled_init29:
;oled_control.c,205 :: 		}
0x2F56	0x2F75      	GOTO       L_oled_init34
L_oled_init27:
0x2F57	0x002B      	MOVLB      11
;oled_control.c,207 :: 		for (r = 0; r <=7; r++) {
0x2F58	0x01AA      	CLRF       oled_init_r_L0
L_oled_init35:
0x2F59	0x082A      	MOVF       oled_init_r_L0, 0
0x2F5A	0x3C07      	SUBLW      7
0x2F5B	0x1C03      	BTFSS      STATUS, 0
0x2F5C	0x2F75      	GOTO       L_oled_init36
;oled_control.c,208 :: 		set_addressing (r, 0);    // clear all 8 pages
0x2F5D	0x082A      	MOVF       oled_init_r_L0, 0
0x2F5E	0x002C      	MOVLB      12
0x2F5F	0x00B8      	MOVWF      FARG_set_addressing_pagenum
0x2F60	0x01B9      	CLRF       FARG_set_addressing_c_start
0x2F61	0x3180      	MOVLP      0
0x2F62	0x208E      	CALL       _set_addressing
0x2F63	0x31A8      	MOVLP      40
;oled_control.c,209 :: 		for (i = 0; i < 128; i++, Soft_I2C_Write(0x00)); // clear one page pixels
0x2F64	0x002B      	MOVLB      11
0x2F65	0x01A9      	CLRF       oled_init_i_L0
L_oled_init38:
0x2F66	0x002B      	MOVLB      11
0x2F67	0x3080      	MOVLW      128
0x2F68	0x0229      	SUBWF      oled_init_i_L0, 0
0x2F69	0x1803      	BTFSC      STATUS, 0
0x2F6A	0x2F72      	GOTO       L_oled_init39
0x2F6B	0x0AA9      	INCF       oled_init_i_L0, 1
0x2F6C	0x002C      	MOVLB      12
0x2F6D	0x01BD      	CLRF       FARG_Soft_I2C_Write_d
0x2F6E	0x3180      	MOVLP      0
0x2F6F	0x2022      	CALL       _Soft_I2C_Write
0x2F70	0x31A8      	MOVLP      40
0x2F71	0x2F66      	GOTO       L_oled_init38
L_oled_init39:
;oled_control.c,207 :: 		for (r = 0; r <=7; r++) {
0x2F72	0x002B      	MOVLB      11
0x2F73	0x0AAA      	INCF       oled_init_r_L0, 1
;oled_control.c,210 :: 		}
0x2F74	0x2F59      	GOTO       L_oled_init35
L_oled_init36:
;oled_control.c,212 :: 		}
L_oled_init34:
;oled_control.c,214 :: 		Soft_I2C_Stop ();
0x2F75	0x3180      	MOVLP      0
0x2F76	0x2075      	CALL       _Soft_I2C_Stop
0x2F77	0x31A8      	MOVLP      40
;oled_control.c,215 :: 		send_command (0xAF); //  display ON
0x2F78	0x30AF      	MOVLW      175
0x2F79	0x002B      	MOVLB      11
0x2F7A	0x00EB      	MOVWF      FARG_send_command_oled_command
0x2F7B	0x3180      	MOVLP      0
0x2F7C	0x274C      	CALL       _send_command
0x2F7D	0x31A8      	MOVLP      40
;oled_control.c,218 :: 		}
L_end_oled_init:
0x2F7E	0x0008      	RETURN
; end of _oled_init
_button_proc:
;main.c,195 :: 		void button_proc(void) {
;main.c,196 :: 		if(Button(&PORTB, 0, 50, 0) | Soft_tune){
0x3000	0x300D      	MOVLW      PORTB
0x3001	0x002B      	MOVLB      11
0x3002	0x00EB      	MOVWF      FARG_Button_port
0x3003	0x3000      	MOVLW      hi_addr(PORTB)
0x3004	0x00EC      	MOVWF      FARG_Button_port+1
0x3005	0x01ED      	CLRF       FARG_Button_pin
0x3006	0x3032      	MOVLW      50
0x3007	0x00EE      	MOVWF      FARG_Button_time_ms
0x3008	0x01EF      	CLRF       FARG_Button_active_state
0x3009	0x3188      	MOVLP      8
0x300A	0x24C0      	CALL       _Button
0x300B	0x31B0      	MOVLP      48
0x300C	0x0027      	MOVLB      7
0x300D	0x086F      	MOVF       _Soft_tune, 0
0x300E	0x04F0      	IORWF       R0, 1
0x300F	0x1903      	BTFSC      STATUS, 2
0x3010	0x2883      	GOTO       L_button_proc226
;main.c,197 :: 		dysp_on();
0x3011	0x3188      	MOVLP      8
0x3012	0x2782      	CALL       _dysp_on
0x3013	0x31B0      	MOVLP      48
;main.c,198 :: 		dysp_cnt = Dysp_delay * dysp_cnt_mult;
0x3014	0x0028      	MOVLB      8
0x3015	0x082C      	MOVF       _Dysp_delay, 0
0x3016	0x00F0      	MOVWF      R0
0x3017	0x3180      	MOVLP      0
0x3018	0x27BE      	CALL       _Byte2Double
0x3019	0x31B0      	MOVLP      48
0x301A	0x0027      	MOVLB      7
0x301B	0x0862      	MOVF       _dysp_cnt_mult, 0
0x301C	0x00F4      	MOVWF      R4
0x301D	0x0863      	MOVF       _dysp_cnt_mult+1, 0
0x301E	0x00F5      	MOVWF      R5
0x301F	0x0864      	MOVF       _dysp_cnt_mult+2, 0
0x3020	0x00F6      	MOVWF      R6
0x3021	0x0865      	MOVF       _dysp_cnt_mult+3, 0
0x3022	0x00F7      	MOVWF      R7
0x3023	0x3188      	MOVLP      8
0x3024	0x2598      	CALL       _Mul_32x32_FP
0x3025	0x31B0      	MOVLP      48
0x3026	0x3180      	MOVLP      0
0x3027	0x2651      	CALL       _Double2Int
0x3028	0x31B0      	MOVLP      48
0x3029	0x0870      	MOVF       R0, 0
0x302A	0x0028      	MOVLB      8
0x302B	0x00AD      	MOVWF      _dysp_cnt
0x302C	0x0871      	MOVF       R1, 0
0x302D	0x00AE      	MOVWF      _dysp_cnt+1
;main.c,199 :: 		Delay_ms(250);
0x302E	0x3006      	MOVLW      6
0x302F	0x00FB      	MOVWF      R11
0x3030	0x3013      	MOVLW      19
0x3031	0x00FC      	MOVWF      R12
0x3032	0x30AD      	MOVLW      173
0x3033	0x00FD      	MOVWF      R13
L_button_proc227:
0x3034	0x0BFD      	DECFSZ     R13, 1
0x3035	0x2834      	GOTO       L_button_proc227
0x3036	0x0BFC      	DECFSZ     R12, 1
0x3037	0x2834      	GOTO       L_button_proc227
0x3038	0x0BFB      	DECFSZ     R11, 1
0x3039	0x2834      	GOTO       L_button_proc227
0x303A	0x0000      	NOP
0x303B	0x0000      	NOP
;main.c,200 :: 		asm CLRWDT;
0x303C	0x0064      	CLRWDT
;main.c,201 :: 		if(Soft_tune == 0 & PORTB.B0==1) { // short press button
0x303D	0x0027      	MOVLB      7
0x303E	0x086F      	MOVF       _Soft_tune, 0
0x303F	0x3A00      	XORLW      0
0x3040	0x3001      	MOVLW      1
0x3041	0x1D03      	BTFSS      STATUS, 2
0x3042	0x3000      	MOVLW      0
0x3043	0x00F1      	MOVWF      R1
0x3044	0x0020      	MOVLB      0
0x3045	0x180D      	BTFSC      PORTB, 0
0x3046	0x2849      	GOTO       L__button_proc695
0x3047	0x1003      	BCF        STATUS, 0
0x3048	0x284A      	GOTO       L__button_proc696
L__button_proc695:
0x3049	0x1403      	BSF        STATUS, 0
L__button_proc696:
0x304A	0x01F0      	CLRF       R0
0x304B	0x1803      	BTFSC      STATUS, 0
0x304C	0x0AF0      	INCF       R0, 1
0x304D	0x0871      	MOVF       R1, 0
0x304E	0x05F0      	ANDWF      R0, 1
0x304F	0x1903      	BTFSC      STATUS, 2
0x3050	0x2857      	GOTO       L_button_proc228
;main.c,202 :: 		show_reset();
0x3051	0x3198      	MOVLP      24
0x3052	0x23C1      	CALL       _show_reset
0x3053	0x31B0      	MOVLP      48
;main.c,203 :: 		bypas =0;
0x3054	0x0026      	MOVLB      6
0x3055	0x01E4      	CLRF       _bypas
;main.c,204 :: 		}
0x3056	0x2883      	GOTO       L_button_proc229
L_button_proc228:
;main.c,206 :: 		p_Tx = 1;         //
0x3057	0x0022      	MOVLB      2
0x3058	0x178C      	BSF        LATA7_bit, BitPos(LATA7_bit+0)
;main.c,207 :: 		n_Tx = 0;         // TX request
0x3059	0x130C      	BCF        LATA6_bit, BitPos(LATA6_bit+0)
;main.c,208 :: 		Delay_ms(250);    //
0x305A	0x3006      	MOVLW      6
0x305B	0x00FB      	MOVWF      R11
0x305C	0x3013      	MOVLW      19
0x305D	0x00FC      	MOVWF      R12
0x305E	0x30AD      	MOVLW      173
0x305F	0x00FD      	MOVWF      R13
L_button_proc230:
0x3060	0x0BFD      	DECFSZ     R13, 1
0x3061	0x2860      	GOTO       L_button_proc230
0x3062	0x0BFC      	DECFSZ     R12, 1
0x3063	0x2860      	GOTO       L_button_proc230
0x3064	0x0BFB      	DECFSZ     R11, 1
0x3065	0x2860      	GOTO       L_button_proc230
0x3066	0x0000      	NOP
0x3067	0x0000      	NOP
;main.c,209 :: 		btn_push();
0x3068	0x31A0      	MOVLP      32
0x3069	0x259B      	CALL       _btn_push
0x306A	0x31B0      	MOVLP      48
;main.c,210 :: 		bypas = 0;
0x306B	0x0026      	MOVLB      6
0x306C	0x01E4      	CLRF       _bypas
;main.c,211 :: 		while(Button(&PORTB, 0, 50, 0)) {lcd_pwr(); asm CLRWDT; }
L_button_proc231:
0x306D	0x300D      	MOVLW      PORTB
0x306E	0x002B      	MOVLB      11
0x306F	0x00EB      	MOVWF      FARG_Button_port
0x3070	0x3000      	MOVLW      hi_addr(PORTB)
0x3071	0x00EC      	MOVWF      FARG_Button_port+1
0x3072	0x01ED      	CLRF       FARG_Button_pin
0x3073	0x3032      	MOVLW      50
0x3074	0x00EE      	MOVWF      FARG_Button_time_ms
0x3075	0x01EF      	CLRF       FARG_Button_active_state
0x3076	0x3188      	MOVLP      8
0x3077	0x24C0      	CALL       _Button
0x3078	0x31B0      	MOVLP      48
0x3079	0x0870      	MOVF       R0, 0
0x307A	0x1903      	BTFSC      STATUS, 2
0x307B	0x2881      	GOTO       L_button_proc232
0x307C	0x3198      	MOVLP      24
0x307D	0x203A      	CALL       _lcd_pwr
0x307E	0x31B0      	MOVLP      48
0x307F	0x0064      	CLRWDT
0x3080	0x286D      	GOTO       L_button_proc231
L_button_proc232:
;main.c,212 :: 		Soft_tune = 0;
0x3081	0x0027      	MOVLB      7
0x3082	0x01EF      	CLRF       _Soft_tune
;main.c,213 :: 		}
L_button_proc229:
;main.c,214 :: 		}
L_button_proc226:
;main.c,216 :: 		if(Button(&PORTB, 2, 50, 0)){   // BYP button
0x3083	0x300D      	MOVLW      PORTB
0x3084	0x002B      	MOVLB      11
0x3085	0x00EB      	MOVWF      FARG_Button_port
0x3086	0x3000      	MOVLW      hi_addr(PORTB)
0x3087	0x00EC      	MOVWF      FARG_Button_port+1
0x3088	0x3002      	MOVLW      2
0x3089	0x00ED      	MOVWF      FARG_Button_pin
0x308A	0x3032      	MOVLW      50
0x308B	0x00EE      	MOVWF      FARG_Button_time_ms
0x308C	0x01EF      	CLRF       FARG_Button_active_state
0x308D	0x3188      	MOVLP      8
0x308E	0x24C0      	CALL       _Button
0x308F	0x31B0      	MOVLP      48
0x3090	0x0870      	MOVF       R0, 0
0x3091	0x1903      	BTFSC      STATUS, 2
0x3092	0x2A91      	GOTO       L_button_proc233
;main.c,217 :: 		Delay_ms(450);
0x3093	0x300A      	MOVLW      10
0x3094	0x00FB      	MOVWF      R11
0x3095	0x3022      	MOVLW      34
0x3096	0x00FC      	MOVWF      R12
0x3097	0x30A1      	MOVLW      161
0x3098	0x00FD      	MOVWF      R13
L_button_proc234:
0x3099	0x0BFD      	DECFSZ     R13, 1
0x309A	0x2899      	GOTO       L_button_proc234
0x309B	0x0BFC      	DECFSZ     R12, 1
0x309C	0x2899      	GOTO       L_button_proc234
0x309D	0x0BFB      	DECFSZ     R11, 1
0x309E	0x2899      	GOTO       L_button_proc234
;main.c,218 :: 		if(PORTB.B2==1) { // short press button
0x309F	0x0020      	MOVLB      0
0x30A0	0x1D0D      	BTFSS      PORTB, 2
0x30A1	0x29CF      	GOTO       L_button_proc235
;main.c,219 :: 		dysp_on();
0x30A2	0x3188      	MOVLP      8
0x30A3	0x2782      	CALL       _dysp_on
0x30A4	0x31B0      	MOVLP      48
;main.c,220 :: 		dysp_cnt = Dysp_delay * dysp_cnt_mult;
0x30A5	0x0028      	MOVLB      8
0x30A6	0x082C      	MOVF       _Dysp_delay, 0
0x30A7	0x00F0      	MOVWF      R0
0x30A8	0x3180      	MOVLP      0
0x30A9	0x27BE      	CALL       _Byte2Double
0x30AA	0x31B0      	MOVLP      48
0x30AB	0x0027      	MOVLB      7
0x30AC	0x0862      	MOVF       _dysp_cnt_mult, 0
0x30AD	0x00F4      	MOVWF      R4
0x30AE	0x0863      	MOVF       _dysp_cnt_mult+1, 0
0x30AF	0x00F5      	MOVWF      R5
0x30B0	0x0864      	MOVF       _dysp_cnt_mult+2, 0
0x30B1	0x00F6      	MOVWF      R6
0x30B2	0x0865      	MOVF       _dysp_cnt_mult+3, 0
0x30B3	0x00F7      	MOVWF      R7
0x30B4	0x3188      	MOVLP      8
0x30B5	0x2598      	CALL       _Mul_32x32_FP
0x30B6	0x31B0      	MOVLP      48
0x30B7	0x3180      	MOVLP      0
0x30B8	0x2651      	CALL       _Double2Int
0x30B9	0x31B0      	MOVLP      48
0x30BA	0x0870      	MOVF       R0, 0
0x30BB	0x0028      	MOVLB      8
0x30BC	0x00AD      	MOVWF      _dysp_cnt
0x30BD	0x0871      	MOVF       R1, 0
0x30BE	0x00AE      	MOVWF      _dysp_cnt+1
;main.c,221 :: 		asm CLRWDT;
0x30BF	0x0064      	CLRWDT
;main.c,222 :: 		if(bypas == 0) {
0x30C0	0x0026      	MOVLB      6
0x30C1	0x0864      	MOVF       _bypas, 0
0x30C2	0x3A00      	XORLW      0
0x30C3	0x1D03      	BTFSS      STATUS, 2
0x30C4	0x28F7      	GOTO       L_button_proc236
;main.c,223 :: 		bypas = 1;
0x30C5	0x3001      	MOVLW      1
0x30C6	0x00E4      	MOVWF      _bypas
;main.c,224 :: 		cap_mem = cap;
0x30C7	0x0027      	MOVLB      7
0x30C8	0x085B      	MOVF       main_cap, 0
0x30C9	0x00CB      	MOVWF      _cap_mem
;main.c,225 :: 		ind_mem = ind;
0x30CA	0x0028      	MOVLB      8
0x30CB	0x0831      	MOVF       main_ind, 0
0x30CC	0x0027      	MOVLB      7
0x30CD	0x00CE      	MOVWF      _ind_mem
;main.c,226 :: 		SW_mem = SW;
0x30CE	0x0028      	MOVLB      8
0x30CF	0x0847      	MOVF       main_SW, 0
0x30D0	0x0027      	MOVLB      7
0x30D1	0x00CD      	MOVWF      _SW_mem
;main.c,227 :: 		cap = 0;
0x30D2	0x01DB      	CLRF       main_cap
;main.c,228 :: 		ind = 0;
0x30D3	0x0028      	MOVLB      8
0x30D4	0x01B1      	CLRF       main_ind
;main.c,229 :: 		SW = 1;
0x30D5	0x3001      	MOVLW      1
0x30D6	0x00C7      	MOVWF      main_SW
;main.c,230 :: 		set_ind(ind);
0x30D7	0x002B      	MOVLB      11
0x30D8	0x01CF      	CLRF       FARG_set_ind_Ind
0x30D9	0x3188      	MOVLP      8
0x30DA	0x2700      	CALL       _set_ind
0x30DB	0x31B0      	MOVLP      48
;main.c,231 :: 		set_cap(cap);
0x30DC	0x0027      	MOVLB      7
0x30DD	0x085B      	MOVF       main_cap, 0
0x30DE	0x002B      	MOVLB      11
0x30DF	0x00CF      	MOVWF      FARG_set_cap_Cap
0x30E0	0x3188      	MOVLP      8
0x30E1	0x27A1      	CALL       _set_cap
0x30E2	0x31B0      	MOVLP      48
;main.c,232 :: 		set_SW(SW);
0x30E3	0x0028      	MOVLB      8
0x30E4	0x0847      	MOVF       main_SW, 0
0x30E5	0x002B      	MOVLB      11
0x30E6	0x00C7      	MOVWF      FARG_set_sw_SW
0x30E7	0x3188      	MOVLP      8
0x30E8	0x27E5      	CALL       _set_sw
0x30E9	0x31B0      	MOVLP      48
;main.c,233 :: 		if(Loss_mode==0) lcd_ind();
0x30EA	0x0020      	MOVLB      0
0x30EB	0x0848      	MOVF       _Loss_mode, 0
0x30EC	0x3A00      	XORLW      0
0x30ED	0x1D03      	BTFSS      STATUS, 2
0x30EE	0x28F2      	GOTO       L_button_proc237
0x30EF	0x3188      	MOVLP      8
0x30F0	0x2000      	CALL       _lcd_ind
0x30F1	0x31B0      	MOVLP      48
L_button_proc237:
;main.c,234 :: 		Auto_mem = Auto;
0x30F2	0x0027      	MOVLB      7
0x30F3	0x0861      	MOVF       _Auto, 0
0x30F4	0x00CC      	MOVWF      _Auto_mem
;main.c,235 :: 		Auto = 0;
0x30F5	0x01E1      	CLRF       _Auto
;main.c,236 :: 		}
0x30F6	0x2923      	GOTO       L_button_proc238
L_button_proc236:
;main.c,238 :: 		bypas = 0;
0x30F7	0x0026      	MOVLB      6
0x30F8	0x01E4      	CLRF       _bypas
;main.c,239 :: 		cap = cap_mem;
0x30F9	0x0027      	MOVLB      7
0x30FA	0x084B      	MOVF       _cap_mem, 0
0x30FB	0x00DB      	MOVWF      main_cap
;main.c,240 :: 		ind = ind_mem;
0x30FC	0x084E      	MOVF       _ind_mem, 0
0x30FD	0x0028      	MOVLB      8
0x30FE	0x00B1      	MOVWF      main_ind
;main.c,241 :: 		SW = SW_mem;
0x30FF	0x0027      	MOVLB      7
0x3100	0x084D      	MOVF       _SW_mem, 0
0x3101	0x0028      	MOVLB      8
0x3102	0x00C7      	MOVWF      main_SW
;main.c,242 :: 		set_cap(cap);
0x3103	0x0027      	MOVLB      7
0x3104	0x084B      	MOVF       _cap_mem, 0
0x3105	0x002B      	MOVLB      11
0x3106	0x00CF      	MOVWF      FARG_set_cap_Cap
0x3107	0x3188      	MOVLP      8
0x3108	0x27A1      	CALL       _set_cap
0x3109	0x31B0      	MOVLP      48
;main.c,243 :: 		set_ind(ind);
0x310A	0x0028      	MOVLB      8
0x310B	0x0831      	MOVF       main_ind, 0
0x310C	0x002B      	MOVLB      11
0x310D	0x00CF      	MOVWF      FARG_set_ind_Ind
0x310E	0x3188      	MOVLP      8
0x310F	0x2700      	CALL       _set_ind
0x3110	0x31B0      	MOVLP      48
;main.c,244 :: 		set_SW(SW);
0x3111	0x0028      	MOVLB      8
0x3112	0x0847      	MOVF       main_SW, 0
0x3113	0x002B      	MOVLB      11
0x3114	0x00C7      	MOVWF      FARG_set_sw_SW
0x3115	0x3188      	MOVLP      8
0x3116	0x27E5      	CALL       _set_sw
0x3117	0x31B0      	MOVLP      48
;main.c,245 :: 		if(Loss_mode==0) lcd_ind();
0x3118	0x0020      	MOVLB      0
0x3119	0x0848      	MOVF       _Loss_mode, 0
0x311A	0x3A00      	XORLW      0
0x311B	0x1D03      	BTFSS      STATUS, 2
0x311C	0x2920      	GOTO       L_button_proc239
0x311D	0x3188      	MOVLP      8
0x311E	0x2000      	CALL       _lcd_ind
0x311F	0x31B0      	MOVLP      48
L_button_proc239:
;main.c,246 :: 		Auto = Auto_mem;
0x3120	0x0027      	MOVLB      7
0x3121	0x084C      	MOVF       _Auto_mem, 0
0x3122	0x00E1      	MOVWF      _Auto
;main.c,247 :: 		}
L_button_proc238:
;main.c,248 :: 		if(type==4 | type==5) {      // 128*64 OLED
0x3123	0x002A      	MOVLB      10
0x3124	0x086D      	MOVF       _type, 0
0x3125	0x3A04      	XORLW      4
0x3126	0x3001      	MOVLW      1
0x3127	0x1D03      	BTFSS      STATUS, 2
0x3128	0x3000      	MOVLW      0
0x3129	0x00F1      	MOVWF      R1
0x312A	0x086D      	MOVF       _type, 0
0x312B	0x3A05      	XORLW      5
0x312C	0x3001      	MOVLW      1
0x312D	0x1D03      	BTFSS      STATUS, 2
0x312E	0x3000      	MOVLW      0
0x312F	0x00F0      	MOVWF      R0
0x3130	0x0871      	MOVF       R1, 0
0x3131	0x04F0      	IORWF       R0, 1
0x3132	0x1903      	BTFSC      STATUS, 2
0x3133	0x2974      	GOTO       L_button_proc240
;main.c,249 :: 		if(Auto & !Bypas) led_wr_str (0, 16+8*12, ".", 1);
0x3134	0x0026      	MOVLB      6
0x3135	0x0864      	MOVF       _bypas, 0
0x3136	0x3001      	MOVLW      1
0x3137	0x1D03      	BTFSS      STATUS, 2
0x3138	0x3000      	MOVLW      0
0x3139	0x00F0      	MOVWF      R0
0x313A	0x0027      	MOVLB      7
0x313B	0x0861      	MOVF       _Auto, 0
0x313C	0x05F0      	ANDWF      R0, 1
0x313D	0x1903      	BTFSC      STATUS, 2
0x313E	0x294D      	GOTO       L_button_proc241
0x313F	0x002C      	MOVLB      12
0x3140	0x01A4      	CLRF       FARG_led_wr_str_col
0x3141	0x3070      	MOVLW      112
0x3142	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3143	0x30C8      	MOVLW      ?lstr13_main
0x3144	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3145	0x3003      	MOVLW      hi_addr(?lstr13_main)
0x3146	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3147	0x3001      	MOVLW      1
0x3148	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x3149	0x3180      	MOVLP      0
0x314A	0x24B4      	CALL       _led_wr_str
0x314B	0x31B0      	MOVLP      48
0x314C	0x2973      	GOTO       L_button_proc242
L_button_proc241:
;main.c,250 :: 		else if(!Auto & Bypas) led_wr_str (0, 16+8*12, "_", 1);
0x314D	0x0027      	MOVLB      7
0x314E	0x0861      	MOVF       _Auto, 0
0x314F	0x3001      	MOVLW      1
0x3150	0x1D03      	BTFSS      STATUS, 2
0x3151	0x3000      	MOVLW      0
0x3152	0x00F0      	MOVWF      R0
0x3153	0x0026      	MOVLB      6
0x3154	0x0864      	MOVF       _bypas, 0
0x3155	0x05F0      	ANDWF      R0, 1
0x3156	0x1903      	BTFSC      STATUS, 2
0x3157	0x2966      	GOTO       L_button_proc243
0x3158	0x002C      	MOVLB      12
0x3159	0x01A4      	CLRF       FARG_led_wr_str_col
0x315A	0x3070      	MOVLW      112
0x315B	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x315C	0x30B0      	MOVLW      ?lstr14_main
0x315D	0x00A6      	MOVWF      FARG_led_wr_str_str
0x315E	0x3003      	MOVLW      hi_addr(?lstr14_main)
0x315F	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3160	0x3001      	MOVLW      1
0x3161	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x3162	0x3180      	MOVLP      0
0x3163	0x24B4      	CALL       _led_wr_str
0x3164	0x31B0      	MOVLP      48
0x3165	0x2973      	GOTO       L_button_proc244
L_button_proc243:
;main.c,251 :: 		else led_wr_str (0, 16+8*12, " ", 1);
0x3166	0x002C      	MOVLB      12
0x3167	0x01A4      	CLRF       FARG_led_wr_str_col
0x3168	0x3070      	MOVLW      112
0x3169	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x316A	0x30AE      	MOVLW      ?lstr15_main
0x316B	0x00A6      	MOVWF      FARG_led_wr_str_str
0x316C	0x3003      	MOVLW      hi_addr(?lstr15_main)
0x316D	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x316E	0x3001      	MOVLW      1
0x316F	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x3170	0x3180      	MOVLP      0
0x3171	0x24B4      	CALL       _led_wr_str
0x3172	0x31B0      	MOVLP      48
L_button_proc244:
L_button_proc242:
;main.c,252 :: 		}
0x3173	0x29B8      	GOTO       L_button_proc245
L_button_proc240:
;main.c,253 :: 		else if(type!=0) { //  1602 LCD  or 128*32 OLED
0x3174	0x002A      	MOVLB      10
0x3175	0x086D      	MOVF       _type, 0
0x3176	0x3A00      	XORLW      0
0x3177	0x1903      	BTFSC      STATUS, 2
0x3178	0x29B8      	GOTO       L_button_proc246
;main.c,254 :: 		if(Auto & !Bypas) led_wr_str (0, 8, ".", 1);
0x3179	0x0026      	MOVLB      6
0x317A	0x0864      	MOVF       _bypas, 0
0x317B	0x3001      	MOVLW      1
0x317C	0x1D03      	BTFSS      STATUS, 2
0x317D	0x3000      	MOVLW      0
0x317E	0x00F0      	MOVWF      R0
0x317F	0x0027      	MOVLB      7
0x3180	0x0861      	MOVF       _Auto, 0
0x3181	0x05F0      	ANDWF      R0, 1
0x3182	0x1903      	BTFSC      STATUS, 2
0x3183	0x2992      	GOTO       L_button_proc247
0x3184	0x002C      	MOVLB      12
0x3185	0x01A4      	CLRF       FARG_led_wr_str_col
0x3186	0x3008      	MOVLW      8
0x3187	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3188	0x30AC      	MOVLW      ?lstr16_main
0x3189	0x00A6      	MOVWF      FARG_led_wr_str_str
0x318A	0x3003      	MOVLW      hi_addr(?lstr16_main)
0x318B	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x318C	0x3001      	MOVLW      1
0x318D	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x318E	0x3180      	MOVLP      0
0x318F	0x24B4      	CALL       _led_wr_str
0x3190	0x31B0      	MOVLP      48
0x3191	0x29B8      	GOTO       L_button_proc248
L_button_proc247:
;main.c,255 :: 		else if(!Auto & Bypas) led_wr_str (0, 8, "_", 1);
0x3192	0x0027      	MOVLB      7
0x3193	0x0861      	MOVF       _Auto, 0
0x3194	0x3001      	MOVLW      1
0x3195	0x1D03      	BTFSS      STATUS, 2
0x3196	0x3000      	MOVLW      0
0x3197	0x00F0      	MOVWF      R0
0x3198	0x0026      	MOVLB      6
0x3199	0x0864      	MOVF       _bypas, 0
0x319A	0x05F0      	ANDWF      R0, 1
0x319B	0x1903      	BTFSC      STATUS, 2
0x319C	0x29AB      	GOTO       L_button_proc249
0x319D	0x002C      	MOVLB      12
0x319E	0x01A4      	CLRF       FARG_led_wr_str_col
0x319F	0x3008      	MOVLW      8
0x31A0	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x31A1	0x30B2      	MOVLW      ?lstr17_main
0x31A2	0x00A6      	MOVWF      FARG_led_wr_str_str
0x31A3	0x3003      	MOVLW      hi_addr(?lstr17_main)
0x31A4	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x31A5	0x3001      	MOVLW      1
0x31A6	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x31A7	0x3180      	MOVLP      0
0x31A8	0x24B4      	CALL       _led_wr_str
0x31A9	0x31B0      	MOVLP      48
0x31AA	0x29B8      	GOTO       L_button_proc250
L_button_proc249:
;main.c,256 :: 		else led_wr_str (0, 8, " ", 1);
0x31AB	0x002C      	MOVLB      12
0x31AC	0x01A4      	CLRF       FARG_led_wr_str_col
0x31AD	0x3008      	MOVLW      8
0x31AE	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x31AF	0x30C6      	MOVLW      ?lstr18_main
0x31B0	0x00A6      	MOVWF      FARG_led_wr_str_str
0x31B1	0x3003      	MOVLW      hi_addr(?lstr18_main)
0x31B2	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x31B3	0x3001      	MOVLW      1
0x31B4	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x31B5	0x3180      	MOVLP      0
0x31B6	0x24B4      	CALL       _led_wr_str
0x31B7	0x31B0      	MOVLP      48
L_button_proc250:
L_button_proc248:
;main.c,257 :: 		}
L_button_proc246:
L_button_proc245:
;main.c,258 :: 		asm CLRWDT;
0x31B8	0x0064      	CLRWDT
;main.c,259 :: 		while(Button(&PORTB, 2, 50, 0)) {lcd_pwr(); asm CLRWDT;   }
L_button_proc251:
0x31B9	0x300D      	MOVLW      PORTB
0x31BA	0x002B      	MOVLB      11
0x31BB	0x00EB      	MOVWF      FARG_Button_port
0x31BC	0x3000      	MOVLW      hi_addr(PORTB)
0x31BD	0x00EC      	MOVWF      FARG_Button_port+1
0x31BE	0x3002      	MOVLW      2
0x31BF	0x00ED      	MOVWF      FARG_Button_pin
0x31C0	0x3032      	MOVLW      50
0x31C1	0x00EE      	MOVWF      FARG_Button_time_ms
0x31C2	0x01EF      	CLRF       FARG_Button_active_state
0x31C3	0x3188      	MOVLP      8
0x31C4	0x24C0      	CALL       _Button
0x31C5	0x31B0      	MOVLP      48
0x31C6	0x0870      	MOVF       R0, 0
0x31C7	0x1903      	BTFSC      STATUS, 2
0x31C8	0x29CE      	GOTO       L_button_proc252
0x31C9	0x3198      	MOVLP      24
0x31CA	0x203A      	CALL       _lcd_pwr
0x31CB	0x31B0      	MOVLP      48
0x31CC	0x0064      	CLRWDT
0x31CD	0x29B9      	GOTO       L_button_proc251
L_button_proc252:
;main.c,260 :: 		}
0x31CE	0x2A91      	GOTO       L_button_proc253
L_button_proc235:
;main.c,262 :: 		if (bypas==0 & type!=0) {   // long press button
0x31CF	0x0026      	MOVLB      6
0x31D0	0x0864      	MOVF       _bypas, 0
0x31D1	0x3A00      	XORLW      0
0x31D2	0x3001      	MOVLW      1
0x31D3	0x1D03      	BTFSS      STATUS, 2
0x31D4	0x3000      	MOVLW      0
0x31D5	0x00F1      	MOVWF      R1
0x31D6	0x002A      	MOVLB      10
0x31D7	0x086D      	MOVF       _type, 0
0x31D8	0x3A00      	XORLW      0
0x31D9	0x3001      	MOVLW      1
0x31DA	0x1903      	BTFSC      STATUS, 2
0x31DB	0x3000      	MOVLW      0
0x31DC	0x00F0      	MOVWF      R0
0x31DD	0x0871      	MOVF       R1, 0
0x31DE	0x05F0      	ANDWF      R0, 1
0x31DF	0x1903      	BTFSC      STATUS, 2
0x31E0	0x2A91      	GOTO       L_button_proc254
;main.c,263 :: 		Test = 1;
0x31E1	0x3001      	MOVLW      1
0x31E2	0x0020      	MOVLB      0
0x31E3	0x00C9      	MOVWF      _Test
;main.c,264 :: 		Auto = 0;
0x31E4	0x0027      	MOVLB      7
0x31E5	0x01E1      	CLRF       _Auto
;main.c,265 :: 		if(type==4 | type==5) {    // 128*64 OLED
0x31E6	0x002A      	MOVLB      10
0x31E7	0x086D      	MOVF       _type, 0
0x31E8	0x3A04      	XORLW      4
0x31E9	0x3001      	MOVLW      1
0x31EA	0x1D03      	BTFSS      STATUS, 2
0x31EB	0x3000      	MOVLW      0
0x31EC	0x00F1      	MOVWF      R1
0x31ED	0x086D      	MOVF       _type, 0
0x31EE	0x3A05      	XORLW      5
0x31EF	0x3001      	MOVLW      1
0x31F0	0x1D03      	BTFSS      STATUS, 2
0x31F1	0x3000      	MOVLW      0
0x31F2	0x00F0      	MOVWF      R0
0x31F3	0x0871      	MOVF       R1, 0
0x31F4	0x04F0      	IORWF       R0, 1
0x31F5	0x1903      	BTFSC      STATUS, 2
0x31F6	0x2A43      	GOTO       L_button_proc255
;main.c,266 :: 		led_wr_str (2, 16, "MANUAL  ", 8);
0x31F7	0x3002      	MOVLW      2
0x31F8	0x002C      	MOVLB      12
0x31F9	0x00A4      	MOVWF      FARG_led_wr_str_col
0x31FA	0x3010      	MOVLW      16
0x31FB	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x31FC	0x30BD      	MOVLW      ?lstr19_main
0x31FD	0x00A6      	MOVWF      FARG_led_wr_str_str
0x31FE	0x3003      	MOVLW      hi_addr(?lstr19_main)
0x31FF	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3200	0x3008      	MOVLW      8
0x3201	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x3202	0x3180      	MOVLP      0
0x3203	0x24B4      	CALL       _led_wr_str
0x3204	0x31B0      	MOVLP      48
;main.c,267 :: 		asm CLRWDT;
0x3205	0x0064      	CLRWDT
;main.c,268 :: 		delay_ms(1000);
0x3206	0x3015      	MOVLW      21
0x3207	0x00FB      	MOVWF      R11
0x3208	0x304B      	MOVLW      75
0x3209	0x00FC      	MOVWF      R12
0x320A	0x30BE      	MOVLW      190
0x320B	0x00FD      	MOVWF      R13
L_button_proc256:
0x320C	0x0BFD      	DECFSZ     R13, 1
0x320D	0x2A0C      	GOTO       L_button_proc256
0x320E	0x0BFC      	DECFSZ     R12, 1
0x320F	0x2A0C      	GOTO       L_button_proc256
0x3210	0x0BFB      	DECFSZ     R11, 1
0x3211	0x2A0C      	GOTO       L_button_proc256
0x3212	0x0000      	NOP
;main.c,269 :: 		led_wr_str (2, 16, "SWR=0.00", 8);
0x3213	0x3002      	MOVLW      2
0x3214	0x002C      	MOVLB      12
0x3215	0x00A4      	MOVWF      FARG_led_wr_str_col
0x3216	0x3010      	MOVLW      16
0x3217	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3218	0x30B4      	MOVLW      ?lstr20_main
0x3219	0x00A6      	MOVWF      FARG_led_wr_str_str
0x321A	0x3003      	MOVLW      hi_addr(?lstr20_main)
0x321B	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x321C	0x3008      	MOVLW      8
0x321D	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x321E	0x3180      	MOVLP      0
0x321F	0x24B4      	CALL       _led_wr_str
0x3220	0x31B0      	MOVLP      48
;main.c,270 :: 		if(L==1) led_wr_str (0, 16+8*12, "l", 1); else led_wr_str (0, 16+8*12, "c", 1);
0x3221	0x0020      	MOVLB      0
0x3222	0x086F      	MOVF       _L, 0
0x3223	0x3A01      	XORLW      1
0x3224	0x1D03      	BTFSS      STATUS, 2
0x3225	0x2A34      	GOTO       L_button_proc257
0x3226	0x002C      	MOVLB      12
0x3227	0x01A4      	CLRF       FARG_led_wr_str_col
0x3228	0x3070      	MOVLW      112
0x3229	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x322A	0x3030      	MOVLW      ?lstr21_main
0x322B	0x00A6      	MOVWF      FARG_led_wr_str_str
0x322C	0x3003      	MOVLW      hi_addr(?lstr21_main)
0x322D	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x322E	0x3001      	MOVLW      1
0x322F	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x3230	0x3180      	MOVLP      0
0x3231	0x24B4      	CALL       _led_wr_str
0x3232	0x31B0      	MOVLP      48
0x3233	0x2A41      	GOTO       L_button_proc258
L_button_proc257:
0x3234	0x002C      	MOVLB      12
0x3235	0x01A4      	CLRF       FARG_led_wr_str_col
0x3236	0x3070      	MOVLW      112
0x3237	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3238	0x302E      	MOVLW      ?lstr22_main
0x3239	0x00A6      	MOVWF      FARG_led_wr_str_str
0x323A	0x3003      	MOVLW      hi_addr(?lstr22_main)
0x323B	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x323C	0x3001      	MOVLW      1
0x323D	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x323E	0x3180      	MOVLP      0
0x323F	0x24B4      	CALL       _led_wr_str
0x3240	0x31B0      	MOVLP      48
L_button_proc258:
;main.c,271 :: 		asm CLRWDT;
0x3241	0x0064      	CLRWDT
;main.c,272 :: 		}
0x3242	0x2A91      	GOTO       L_button_proc259
L_button_proc255:
;main.c,273 :: 		else if(type!=0) {// 1602 LCD & 128*32 OLED
0x3243	0x002A      	MOVLB      10
0x3244	0x086D      	MOVF       _type, 0
0x3245	0x3A00      	XORLW      0
0x3246	0x1903      	BTFSC      STATUS, 2
0x3247	0x2A91      	GOTO       L_button_proc260
;main.c,274 :: 		led_wr_str (1, 0, "MANUAL  ", 8);
0x3248	0x3001      	MOVLW      1
0x3249	0x002C      	MOVLB      12
0x324A	0x00A4      	MOVWF      FARG_led_wr_str_col
0x324B	0x01A5      	CLRF       FARG_led_wr_str_pos
0x324C	0x3025      	MOVLW      ?lstr23_main
0x324D	0x00A6      	MOVWF      FARG_led_wr_str_str
0x324E	0x3003      	MOVLW      hi_addr(?lstr23_main)
0x324F	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3250	0x3008      	MOVLW      8
0x3251	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x3252	0x3180      	MOVLP      0
0x3253	0x24B4      	CALL       _led_wr_str
0x3254	0x31B0      	MOVLP      48
;main.c,275 :: 		asm CLRWDT;
0x3255	0x0064      	CLRWDT
;main.c,276 :: 		delay_ms(1000);
0x3256	0x3015      	MOVLW      21
0x3257	0x00FB      	MOVWF      R11
0x3258	0x304B      	MOVLW      75
0x3259	0x00FC      	MOVWF      R12
0x325A	0x30BE      	MOVLW      190
0x325B	0x00FD      	MOVWF      R13
L_button_proc261:
0x325C	0x0BFD      	DECFSZ     R13, 1
0x325D	0x2A5C      	GOTO       L_button_proc261
0x325E	0x0BFC      	DECFSZ     R12, 1
0x325F	0x2A5C      	GOTO       L_button_proc261
0x3260	0x0BFB      	DECFSZ     R11, 1
0x3261	0x2A5C      	GOTO       L_button_proc261
0x3262	0x0000      	NOP
;main.c,277 :: 		led_wr_str (1, 0, "SWR=0.00", 8);
0x3263	0x3001      	MOVLW      1
0x3264	0x002C      	MOVLB      12
0x3265	0x00A4      	MOVWF      FARG_led_wr_str_col
0x3266	0x01A5      	CLRF       FARG_led_wr_str_pos
0x3267	0x3032      	MOVLW      ?lstr24_main
0x3268	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3269	0x3003      	MOVLW      hi_addr(?lstr24_main)
0x326A	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x326B	0x3008      	MOVLW      8
0x326C	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x326D	0x3180      	MOVLP      0
0x326E	0x24B4      	CALL       _led_wr_str
0x326F	0x31B0      	MOVLP      48
;main.c,278 :: 		if(L==1) led_wr_str (0, 8, "l", 1); else led_wr_str (0, 8, "c", 1);
0x3270	0x0020      	MOVLB      0
0x3271	0x086F      	MOVF       _L, 0
0x3272	0x3A01      	XORLW      1
0x3273	0x1D03      	BTFSS      STATUS, 2
0x3274	0x2A83      	GOTO       L_button_proc262
0x3275	0x002C      	MOVLB      12
0x3276	0x01A4      	CLRF       FARG_led_wr_str_col
0x3277	0x3008      	MOVLW      8
0x3278	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3279	0x303F      	MOVLW      ?lstr25_main
0x327A	0x00A6      	MOVWF      FARG_led_wr_str_str
0x327B	0x3003      	MOVLW      hi_addr(?lstr25_main)
0x327C	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x327D	0x3001      	MOVLW      1
0x327E	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x327F	0x3180      	MOVLP      0
0x3280	0x24B4      	CALL       _led_wr_str
0x3281	0x31B0      	MOVLP      48
0x3282	0x2A90      	GOTO       L_button_proc263
L_button_proc262:
0x3283	0x002C      	MOVLB      12
0x3284	0x01A4      	CLRF       FARG_led_wr_str_col
0x3285	0x3008      	MOVLW      8
0x3286	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3287	0x303D      	MOVLW      ?lstr26_main
0x3288	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3289	0x3003      	MOVLW      hi_addr(?lstr26_main)
0x328A	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x328B	0x3001      	MOVLW      1
0x328C	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x328D	0x3180      	MOVLP      0
0x328E	0x24B4      	CALL       _led_wr_str
0x328F	0x31B0      	MOVLP      48
L_button_proc263:
;main.c,279 :: 		asm CLRWDT;
0x3290	0x0064      	CLRWDT
;main.c,280 :: 		}
L_button_proc260:
L_button_proc259:
;main.c,281 :: 		}
L_button_proc254:
;main.c,282 :: 		}
L_button_proc253:
;main.c,283 :: 		}
L_button_proc233:
;main.c,285 :: 		if(Button(&PORTB, 1, 50, 0) & Bypas==0){   // Auto button
0x3291	0x300D      	MOVLW      PORTB
0x3292	0x002B      	MOVLB      11
0x3293	0x00EB      	MOVWF      FARG_Button_port
0x3294	0x3000      	MOVLW      hi_addr(PORTB)
0x3295	0x00EC      	MOVWF      FARG_Button_port+1
0x3296	0x3001      	MOVLW      1
0x3297	0x00ED      	MOVWF      FARG_Button_pin
0x3298	0x3032      	MOVLW      50
0x3299	0x00EE      	MOVWF      FARG_Button_time_ms
0x329A	0x01EF      	CLRF       FARG_Button_active_state
0x329B	0x3188      	MOVLP      8
0x329C	0x24C0      	CALL       _Button
0x329D	0x31B0      	MOVLP      48
0x329E	0x0026      	MOVLB      6
0x329F	0x0864      	MOVF       _bypas, 0
0x32A0	0x3A00      	XORLW      0
0x32A1	0x3001      	MOVLW      1
0x32A2	0x1D03      	BTFSS      STATUS, 2
0x32A3	0x3000      	MOVLW      0
0x32A4	0x00F1      	MOVWF      R1
0x32A5	0x0871      	MOVF       R1, 0
0x32A6	0x05F0      	ANDWF      R0, 1
0x32A7	0x1903      	BTFSC      STATUS, 2
0x32A8	0x2B9D      	GOTO       L_button_proc264
;main.c,286 :: 		Delay_ms(450);
0x32A9	0x300A      	MOVLW      10
0x32AA	0x00FB      	MOVWF      R11
0x32AB	0x3022      	MOVLW      34
0x32AC	0x00FC      	MOVWF      R12
0x32AD	0x30A1      	MOVLW      161
0x32AE	0x00FD      	MOVWF      R13
L_button_proc265:
0x32AF	0x0BFD      	DECFSZ     R13, 1
0x32B0	0x2AAF      	GOTO       L_button_proc265
0x32B1	0x0BFC      	DECFSZ     R12, 1
0x32B2	0x2AAF      	GOTO       L_button_proc265
0x32B3	0x0BFB      	DECFSZ     R11, 1
0x32B4	0x2AAF      	GOTO       L_button_proc265
;main.c,287 :: 		if(PORTB.B1==1) { // short press button
0x32B5	0x0020      	MOVLB      0
0x32B6	0x1C8D      	BTFSS      PORTB, 1
0x32B7	0x2B95      	GOTO       L_button_proc266
;main.c,288 :: 		dysp_on();
0x32B8	0x3188      	MOVLP      8
0x32B9	0x2782      	CALL       _dysp_on
0x32BA	0x31B0      	MOVLP      48
;main.c,289 :: 		dysp_cnt = Dysp_delay * dysp_cnt_mult;
0x32BB	0x0028      	MOVLB      8
0x32BC	0x082C      	MOVF       _Dysp_delay, 0
0x32BD	0x00F0      	MOVWF      R0
0x32BE	0x3180      	MOVLP      0
0x32BF	0x27BE      	CALL       _Byte2Double
0x32C0	0x31B0      	MOVLP      48
0x32C1	0x0027      	MOVLB      7
0x32C2	0x0862      	MOVF       _dysp_cnt_mult, 0
0x32C3	0x00F4      	MOVWF      R4
0x32C4	0x0863      	MOVF       _dysp_cnt_mult+1, 0
0x32C5	0x00F5      	MOVWF      R5
0x32C6	0x0864      	MOVF       _dysp_cnt_mult+2, 0
0x32C7	0x00F6      	MOVWF      R6
0x32C8	0x0865      	MOVF       _dysp_cnt_mult+3, 0
0x32C9	0x00F7      	MOVWF      R7
0x32CA	0x3188      	MOVLP      8
0x32CB	0x2598      	CALL       _Mul_32x32_FP
0x32CC	0x31B0      	MOVLP      48
0x32CD	0x3180      	MOVLP      0
0x32CE	0x2651      	CALL       _Double2Int
0x32CF	0x31B0      	MOVLP      48
0x32D0	0x0870      	MOVF       R0, 0
0x32D1	0x0028      	MOVLB      8
0x32D2	0x00AD      	MOVWF      _dysp_cnt
0x32D3	0x0871      	MOVF       R1, 0
0x32D4	0x00AE      	MOVWF      _dysp_cnt+1
;main.c,290 :: 		asm CLRWDT;
0x32D5	0x0064      	CLRWDT
;main.c,291 :: 		if(Auto == 0) Auto = 1;
0x32D6	0x0027      	MOVLB      7
0x32D7	0x0861      	MOVF       _Auto, 0
0x32D8	0x3A00      	XORLW      0
0x32D9	0x1D03      	BTFSS      STATUS, 2
0x32DA	0x2ADE      	GOTO       L_button_proc267
0x32DB	0x3001      	MOVLW      1
0x32DC	0x00E1      	MOVWF      _Auto
0x32DD	0x2ADF      	GOTO       L_button_proc268
L_button_proc267:
;main.c,292 :: 		else Auto = 0;
0x32DE	0x01E1      	CLRF       _Auto
L_button_proc268:
;main.c,293 :: 		EEPROM_Write(2, Auto);
0x32DF	0x3002      	MOVLW      2
0x32E0	0x002B      	MOVLB      11
0x32E1	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x32E2	0x0027      	MOVLB      7
0x32E3	0x0861      	MOVF       _Auto, 0
0x32E4	0x002B      	MOVLB      11
0x32E5	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x32E6	0x3198      	MOVLP      24
0x32E7	0x2000      	CALL       _EEPROM_Write
0x32E8	0x31B0      	MOVLP      48
;main.c,294 :: 		if(type==4 | type==5) {      // 128*64 OLED
0x32E9	0x002A      	MOVLB      10
0x32EA	0x086D      	MOVF       _type, 0
0x32EB	0x3A04      	XORLW      4
0x32EC	0x3001      	MOVLW      1
0x32ED	0x1D03      	BTFSS      STATUS, 2
0x32EE	0x3000      	MOVLW      0
0x32EF	0x00F1      	MOVWF      R1
0x32F0	0x086D      	MOVF       _type, 0
0x32F1	0x3A05      	XORLW      5
0x32F2	0x3001      	MOVLW      1
0x32F3	0x1D03      	BTFSS      STATUS, 2
0x32F4	0x3000      	MOVLW      0
0x32F5	0x00F0      	MOVWF      R0
0x32F6	0x0871      	MOVF       R1, 0
0x32F7	0x04F0      	IORWF       R0, 1
0x32F8	0x1903      	BTFSC      STATUS, 2
0x32F9	0x2B3A      	GOTO       L_button_proc269
;main.c,295 :: 		if(Auto & !Bypas) led_wr_str (0, 16+8*12, ".", 1);
0x32FA	0x0026      	MOVLB      6
0x32FB	0x0864      	MOVF       _bypas, 0
0x32FC	0x3001      	MOVLW      1
0x32FD	0x1D03      	BTFSS      STATUS, 2
0x32FE	0x3000      	MOVLW      0
0x32FF	0x00F0      	MOVWF      R0
0x3300	0x0027      	MOVLB      7
0x3301	0x0861      	MOVF       _Auto, 0
0x3302	0x05F0      	ANDWF      R0, 1
0x3303	0x1903      	BTFSC      STATUS, 2
0x3304	0x2B13      	GOTO       L_button_proc270
0x3305	0x002C      	MOVLB      12
0x3306	0x01A4      	CLRF       FARG_led_wr_str_col
0x3307	0x3070      	MOVLW      112
0x3308	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3309	0x303B      	MOVLW      ?lstr27_main
0x330A	0x00A6      	MOVWF      FARG_led_wr_str_str
0x330B	0x3003      	MOVLW      hi_addr(?lstr27_main)
0x330C	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x330D	0x3001      	MOVLW      1
0x330E	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x330F	0x3180      	MOVLP      0
0x3310	0x24B4      	CALL       _led_wr_str
0x3311	0x31B0      	MOVLP      48
0x3312	0x2B39      	GOTO       L_button_proc271
L_button_proc270:
;main.c,296 :: 		else if(!Auto & Bypas) led_wr_str (0, 16+8*12, "_", 1);
0x3313	0x0027      	MOVLB      7
0x3314	0x0861      	MOVF       _Auto, 0
0x3315	0x3001      	MOVLW      1
0x3316	0x1D03      	BTFSS      STATUS, 2
0x3317	0x3000      	MOVLW      0
0x3318	0x00F0      	MOVWF      R0
0x3319	0x0026      	MOVLB      6
0x331A	0x0864      	MOVF       _bypas, 0
0x331B	0x05F0      	ANDWF      R0, 1
0x331C	0x1903      	BTFSC      STATUS, 2
0x331D	0x2B2C      	GOTO       L_button_proc272
0x331E	0x002C      	MOVLB      12
0x331F	0x01A4      	CLRF       FARG_led_wr_str_col
0x3320	0x3070      	MOVLW      112
0x3321	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3322	0x30ED      	MOVLW      ?lstr28_main
0x3323	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3324	0x3002      	MOVLW      hi_addr(?lstr28_main)
0x3325	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3326	0x3001      	MOVLW      1
0x3327	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x3328	0x3180      	MOVLP      0
0x3329	0x24B4      	CALL       _led_wr_str
0x332A	0x31B0      	MOVLP      48
0x332B	0x2B39      	GOTO       L_button_proc273
L_button_proc272:
;main.c,297 :: 		else led_wr_str (0, 16+8*12, " ", 1);
0x332C	0x002C      	MOVLB      12
0x332D	0x01A4      	CLRF       FARG_led_wr_str_col
0x332E	0x3070      	MOVLW      112
0x332F	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3330	0x30DB      	MOVLW      ?lstr29_main
0x3331	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3332	0x3002      	MOVLW      hi_addr(?lstr29_main)
0x3333	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3334	0x3001      	MOVLW      1
0x3335	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x3336	0x3180      	MOVLP      0
0x3337	0x24B4      	CALL       _led_wr_str
0x3338	0x31B0      	MOVLP      48
L_button_proc273:
L_button_proc271:
;main.c,298 :: 		}
0x3339	0x2B7E      	GOTO       L_button_proc274
L_button_proc269:
;main.c,299 :: 		else if(type!=0) { //  1602 LCD  or 128*32 OLED
0x333A	0x002A      	MOVLB      10
0x333B	0x086D      	MOVF       _type, 0
0x333C	0x3A00      	XORLW      0
0x333D	0x1903      	BTFSC      STATUS, 2
0x333E	0x2B7E      	GOTO       L_button_proc275
;main.c,300 :: 		if(Auto & !Bypas) led_wr_str (0, 8, ".", 1);
0x333F	0x0026      	MOVLB      6
0x3340	0x0864      	MOVF       _bypas, 0
0x3341	0x3001      	MOVLW      1
0x3342	0x1D03      	BTFSS      STATUS, 2
0x3343	0x3000      	MOVLW      0
0x3344	0x00F0      	MOVWF      R0
0x3345	0x0027      	MOVLB      7
0x3346	0x0861      	MOVF       _Auto, 0
0x3347	0x05F0      	ANDWF      R0, 1
0x3348	0x1903      	BTFSC      STATUS, 2
0x3349	0x2B58      	GOTO       L_button_proc276
0x334A	0x002C      	MOVLB      12
0x334B	0x01A4      	CLRF       FARG_led_wr_str_col
0x334C	0x3008      	MOVLW      8
0x334D	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x334E	0x306E      	MOVLW      ?lstr30_main
0x334F	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3350	0x3002      	MOVLW      hi_addr(?lstr30_main)
0x3351	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3352	0x3001      	MOVLW      1
0x3353	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x3354	0x3180      	MOVLP      0
0x3355	0x24B4      	CALL       _led_wr_str
0x3356	0x31B0      	MOVLP      48
0x3357	0x2B7E      	GOTO       L_button_proc277
L_button_proc276:
;main.c,301 :: 		else if(!Auto & Bypas) led_wr_str (0, 8, "_", 1);
0x3358	0x0027      	MOVLB      7
0x3359	0x0861      	MOVF       _Auto, 0
0x335A	0x3001      	MOVLW      1
0x335B	0x1D03      	BTFSS      STATUS, 2
0x335C	0x3000      	MOVLW      0
0x335D	0x00F0      	MOVWF      R0
0x335E	0x0026      	MOVLB      6
0x335F	0x0864      	MOVF       _bypas, 0
0x3360	0x05F0      	ANDWF      R0, 1
0x3361	0x1903      	BTFSC      STATUS, 2
0x3362	0x2B71      	GOTO       L_button_proc278
0x3363	0x002C      	MOVLB      12
0x3364	0x01A4      	CLRF       FARG_led_wr_str_col
0x3365	0x3008      	MOVLW      8
0x3366	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3367	0x306C      	MOVLW      ?lstr31_main
0x3368	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3369	0x3002      	MOVLW      hi_addr(?lstr31_main)
0x336A	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x336B	0x3001      	MOVLW      1
0x336C	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x336D	0x3180      	MOVLP      0
0x336E	0x24B4      	CALL       _led_wr_str
0x336F	0x31B0      	MOVLP      48
0x3370	0x2B7E      	GOTO       L_button_proc279
L_button_proc278:
;main.c,302 :: 		else led_wr_str (0, 8, " ", 1);
0x3371	0x002C      	MOVLB      12
0x3372	0x01A4      	CLRF       FARG_led_wr_str_col
0x3373	0x3008      	MOVLW      8
0x3374	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3375	0x30DD      	MOVLW      ?lstr32_main
0x3376	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3377	0x3002      	MOVLW      hi_addr(?lstr32_main)
0x3378	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3379	0x3001      	MOVLW      1
0x337A	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x337B	0x3180      	MOVLP      0
0x337C	0x24B4      	CALL       _led_wr_str
0x337D	0x31B0      	MOVLP      48
L_button_proc279:
L_button_proc277:
;main.c,303 :: 		}
L_button_proc275:
L_button_proc274:
;main.c,304 :: 		asm CLRWDT;
0x337E	0x0064      	CLRWDT
;main.c,305 :: 		while(Button(&PORTB, 1, 50, 0)) {lcd_pwr(); asm CLRWDT; }
L_button_proc280:
0x337F	0x300D      	MOVLW      PORTB
0x3380	0x002B      	MOVLB      11
0x3381	0x00EB      	MOVWF      FARG_Button_port
0x3382	0x3000      	MOVLW      hi_addr(PORTB)
0x3383	0x00EC      	MOVWF      FARG_Button_port+1
0x3384	0x3001      	MOVLW      1
0x3385	0x00ED      	MOVWF      FARG_Button_pin
0x3386	0x3032      	MOVLW      50
0x3387	0x00EE      	MOVWF      FARG_Button_time_ms
0x3388	0x01EF      	CLRF       FARG_Button_active_state
0x3389	0x3188      	MOVLP      8
0x338A	0x24C0      	CALL       _Button
0x338B	0x31B0      	MOVLP      48
0x338C	0x0870      	MOVF       R0, 0
0x338D	0x1903      	BTFSC      STATUS, 2
0x338E	0x2B94      	GOTO       L_button_proc281
0x338F	0x3198      	MOVLP      24
0x3390	0x203A      	CALL       _lcd_pwr
0x3391	0x31B0      	MOVLP      48
0x3392	0x0064      	CLRWDT
0x3393	0x2B7F      	GOTO       L_button_proc280
L_button_proc281:
;main.c,306 :: 		}
0x3394	0x2B9D      	GOTO       L_button_proc282
L_button_proc266:
;main.c,309 :: 		if(type!=0) user_setup();
0x3395	0x002A      	MOVLB      10
0x3396	0x086D      	MOVF       _type, 0
0x3397	0x3A00      	XORLW      0
0x3398	0x1903      	BTFSC      STATUS, 2
0x3399	0x2B9D      	GOTO       L_button_proc283
0x339A	0x31A8      	MOVLP      40
0x339B	0x2000      	CALL       _user_setup
0x339C	0x31B0      	MOVLP      48
L_button_proc283:
;main.c,310 :: 		}
L_button_proc282:
;main.c,312 :: 		}
L_button_proc264:
;main.c,313 :: 		return;
;main.c,314 :: 		}
L_end_button_proc:
0x339D	0x0008      	RETURN
; end of _button_proc
_button_proc_test:
;main.c,95 :: 		void button_proc_test(void) {
;main.c,96 :: 		if(Button(&PORTB, 0, 50, 0)){    // Tune btn
0x339E	0x300D      	MOVLW      PORTB
0x339F	0x002B      	MOVLB      11
0x33A0	0x00EB      	MOVWF      FARG_Button_port
0x33A1	0x3000      	MOVLW      hi_addr(PORTB)
0x33A2	0x00EC      	MOVWF      FARG_Button_port+1
0x33A3	0x01ED      	CLRF       FARG_Button_pin
0x33A4	0x3032      	MOVLW      50
0x33A5	0x00EE      	MOVWF      FARG_Button_time_ms
0x33A6	0x01EF      	CLRF       FARG_Button_active_state
0x33A7	0x3188      	MOVLP      8
0x33A8	0x24C0      	CALL       _Button
0x33A9	0x31B0      	MOVLP      48
0x33AA	0x0870      	MOVF       R0, 0
0x33AB	0x1903      	BTFSC      STATUS, 2
0x33AC	0x2D73      	GOTO       L_button_proc_test182
;main.c,97 :: 		Delay_ms(250);
0x33AD	0x3006      	MOVLW      6
0x33AE	0x00FB      	MOVWF      R11
0x33AF	0x3013      	MOVLW      19
0x33B0	0x00FC      	MOVWF      R12
0x33B1	0x30AD      	MOVLW      173
0x33B2	0x00FD      	MOVWF      R13
L_button_proc_test183:
0x33B3	0x0BFD      	DECFSZ     R13, 1
0x33B4	0x2BB3      	GOTO       L_button_proc_test183
0x33B5	0x0BFC      	DECFSZ     R12, 1
0x33B6	0x2BB3      	GOTO       L_button_proc_test183
0x33B7	0x0BFB      	DECFSZ     R11, 1
0x33B8	0x2BB3      	GOTO       L_button_proc_test183
0x33B9	0x0000      	NOP
0x33BA	0x0000      	NOP
;main.c,98 :: 		asm CLRWDT;
0x33BB	0x0064      	CLRWDT
;main.c,99 :: 		if(PORTB.B0==1) { // short press button
0x33BC	0x0020      	MOVLB      0
0x33BD	0x1C0D      	BTFSS      PORTB, 0
0x33BE	0x2BD2      	GOTO       L_button_proc_test184
;main.c,100 :: 		if(SW==0) SW = 1; else SW = 0;
0x33BF	0x0028      	MOVLB      8
0x33C0	0x0847      	MOVF       main_SW, 0
0x33C1	0x3A00      	XORLW      0
0x33C2	0x1D03      	BTFSS      STATUS, 2
0x33C3	0x2BC7      	GOTO       L_button_proc_test185
0x33C4	0x3001      	MOVLW      1
0x33C5	0x00C7      	MOVWF      main_SW
0x33C6	0x2BC8      	GOTO       L_button_proc_test186
L_button_proc_test185:
0x33C7	0x01C7      	CLRF       main_SW
L_button_proc_test186:
;main.c,101 :: 		set_sw(SW);
0x33C8	0x0847      	MOVF       main_SW, 0
0x33C9	0x002B      	MOVLB      11
0x33CA	0x00C7      	MOVWF      FARG_set_sw_SW
0x33CB	0x3188      	MOVLP      8
0x33CC	0x27E5      	CALL       _set_sw
0x33CD	0x31B0      	MOVLP      48
;main.c,102 :: 		lcd_ind();
0x33CE	0x3188      	MOVLP      8
0x33CF	0x2000      	CALL       _lcd_ind
0x33D0	0x31B0      	MOVLP      48
;main.c,103 :: 		}
0x33D1	0x2D5F      	GOTO       L_button_proc_test187
L_button_proc_test184:
;main.c,105 :: 		if(L==1) L = 0; else L = 1;
0x33D2	0x0020      	MOVLB      0
0x33D3	0x086F      	MOVF       _L, 0
0x33D4	0x3A01      	XORLW      1
0x33D5	0x1D03      	BTFSS      STATUS, 2
0x33D6	0x2BD9      	GOTO       L_button_proc_test188
0x33D7	0x01EF      	CLRF       _L
0x33D8	0x2BDB      	GOTO       L_button_proc_test189
L_button_proc_test188:
0x33D9	0x3001      	MOVLW      1
0x33DA	0x00EF      	MOVWF      _L
L_button_proc_test189:
;main.c,106 :: 		if(L==1) {
0x33DB	0x086F      	MOVF       _L, 0
0x33DC	0x3A01      	XORLW      1
0x33DD	0x1D03      	BTFSS      STATUS, 2
0x33DE	0x2C11      	GOTO       L_button_proc_test190
;main.c,107 :: 		if(type==4 |type==5)   // 128*64 OLED
0x33DF	0x002A      	MOVLB      10
0x33E0	0x086D      	MOVF       _type, 0
0x33E1	0x3A04      	XORLW      4
0x33E2	0x3001      	MOVLW      1
0x33E3	0x1D03      	BTFSS      STATUS, 2
0x33E4	0x3000      	MOVLW      0
0x33E5	0x00F1      	MOVWF      R1
0x33E6	0x086D      	MOVF       _type, 0
0x33E7	0x3A05      	XORLW      5
0x33E8	0x3001      	MOVLW      1
0x33E9	0x1D03      	BTFSS      STATUS, 2
0x33EA	0x3000      	MOVLW      0
0x33EB	0x00F0      	MOVWF      R0
0x33EC	0x0871      	MOVF       R1, 0
0x33ED	0x04F0      	IORWF       R0, 1
0x33EE	0x1903      	BTFSC      STATUS, 2
0x33EF	0x2BFE      	GOTO       L_button_proc_test191
;main.c,108 :: 		led_wr_str (0, 16+12*8, "l", 1);
0x33F0	0x002C      	MOVLB      12
0x33F1	0x01A4      	CLRF       FARG_led_wr_str_col
0x33F2	0x3070      	MOVLW      112
0x33F3	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x33F4	0x30CD      	MOVLW      ?lstr1_main
0x33F5	0x00A6      	MOVWF      FARG_led_wr_str_str
0x33F6	0x3000      	MOVLW      hi_addr(?lstr1_main)
0x33F7	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x33F8	0x3001      	MOVLW      1
0x33F9	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x33FA	0x3180      	MOVLP      0
0x33FB	0x24B4      	CALL       _led_wr_str
0x33FC	0x31B0      	MOVLP      48
0x33FD	0x2C10      	GOTO       L_button_proc_test192
L_button_proc_test191:
;main.c,109 :: 		else if(type!=0)              // 1602 LCD & 128*32 OLED
0x33FE	0x002A      	MOVLB      10
0x33FF	0x086D      	MOVF       _type, 0
0x3400	0x3A00      	XORLW      0
0x3401	0x1903      	BTFSC      STATUS, 2
0x3402	0x2C10      	GOTO       L_button_proc_test193
;main.c,110 :: 		led_wr_str (0, 8, "l", 1);
0x3403	0x002C      	MOVLB      12
0x3404	0x01A4      	CLRF       FARG_led_wr_str_col
0x3405	0x3008      	MOVLW      8
0x3406	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3407	0x30CF      	MOVLW      ?lstr2_main
0x3408	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3409	0x3000      	MOVLW      hi_addr(?lstr2_main)
0x340A	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x340B	0x3001      	MOVLW      1
0x340C	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x340D	0x3180      	MOVLP      0
0x340E	0x24B4      	CALL       _led_wr_str
0x340F	0x31B0      	MOVLP      48
L_button_proc_test193:
L_button_proc_test192:
;main.c,111 :: 		}
0x3410	0x2C42      	GOTO       L_button_proc_test194
L_button_proc_test190:
;main.c,114 :: 		if(type==4 |type==5)   // 128*64 OLED
0x3411	0x002A      	MOVLB      10
0x3412	0x086D      	MOVF       _type, 0
0x3413	0x3A04      	XORLW      4
0x3414	0x3001      	MOVLW      1
0x3415	0x1D03      	BTFSS      STATUS, 2
0x3416	0x3000      	MOVLW      0
0x3417	0x00F1      	MOVWF      R1
0x3418	0x086D      	MOVF       _type, 0
0x3419	0x3A05      	XORLW      5
0x341A	0x3001      	MOVLW      1
0x341B	0x1D03      	BTFSS      STATUS, 2
0x341C	0x3000      	MOVLW      0
0x341D	0x00F0      	MOVWF      R0
0x341E	0x0871      	MOVF       R1, 0
0x341F	0x04F0      	IORWF       R0, 1
0x3420	0x1903      	BTFSC      STATUS, 2
0x3421	0x2C30      	GOTO       L_button_proc_test195
;main.c,115 :: 		led_wr_str (0, 16+12*8, "c", 1);
0x3422	0x002C      	MOVLB      12
0x3423	0x01A4      	CLRF       FARG_led_wr_str_col
0x3424	0x3070      	MOVLW      112
0x3425	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3426	0x30DC      	MOVLW      ?lstr3_main
0x3427	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3428	0x3000      	MOVLW      hi_addr(?lstr3_main)
0x3429	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x342A	0x3001      	MOVLW      1
0x342B	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x342C	0x3180      	MOVLP      0
0x342D	0x24B4      	CALL       _led_wr_str
0x342E	0x31B0      	MOVLP      48
0x342F	0x2C42      	GOTO       L_button_proc_test196
L_button_proc_test195:
;main.c,116 :: 		else if(type!=0)              // 1602 LCD & 128*32 OLED
0x3430	0x002A      	MOVLB      10
0x3431	0x086D      	MOVF       _type, 0
0x3432	0x3A00      	XORLW      0
0x3433	0x1903      	BTFSC      STATUS, 2
0x3434	0x2C42      	GOTO       L_button_proc_test197
;main.c,117 :: 		led_wr_str (0, 8, "c", 1);
0x3435	0x002C      	MOVLB      12
0x3436	0x01A4      	CLRF       FARG_led_wr_str_col
0x3437	0x3008      	MOVLW      8
0x3438	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3439	0x30DA      	MOVLW      ?lstr4_main
0x343A	0x00A6      	MOVWF      FARG_led_wr_str_str
0x343B	0x3000      	MOVLW      hi_addr(?lstr4_main)
0x343C	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x343D	0x3001      	MOVLW      1
0x343E	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x343F	0x3180      	MOVLP      0
0x3440	0x24B4      	CALL       _led_wr_str
0x3441	0x31B0      	MOVLP      48
L_button_proc_test197:
L_button_proc_test196:
;main.c,118 :: 		}
L_button_proc_test194:
;main.c,119 :: 		Delay_ms(1500);
0x3442	0x301F      	MOVLW      31
0x3443	0x00FB      	MOVWF      R11
0x3444	0x3071      	MOVLW      113
0x3445	0x00FC      	MOVWF      R12
0x3446	0x301E      	MOVLW      30
0x3447	0x00FD      	MOVWF      R13
L_button_proc_test198:
0x3448	0x0BFD      	DECFSZ     R13, 1
0x3449	0x2C48      	GOTO       L_button_proc_test198
0x344A	0x0BFC      	DECFSZ     R12, 1
0x344B	0x2C48      	GOTO       L_button_proc_test198
0x344C	0x0BFB      	DECFSZ     R11, 1
0x344D	0x2C48      	GOTO       L_button_proc_test198
0x344E	0x0000      	NOP
;main.c,120 :: 		asm CLRWDT;
0x344F	0x0064      	CLRWDT
;main.c,121 :: 		if(PORTB.B0==0) {     // long press button
0x3450	0x0020      	MOVLB      0
0x3451	0x180D      	BTFSC      PORTB, 0
0x3452	0x2D5F      	GOTO       L_button_proc_test199
;main.c,122 :: 		Test = 0; // wery long press button
0x3453	0x01C9      	CLRF       _Test
;main.c,123 :: 		if(EEPROM_Read(2) == 1) Auto = 1;
0x3454	0x3002      	MOVLW      2
0x3455	0x002B      	MOVLB      11
0x3456	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3457	0x3190      	MOVLP      16
0x3458	0x27F5      	CALL       _EEPROM_Read
0x3459	0x31B0      	MOVLP      48
0x345A	0x0870      	MOVF       R0, 0
0x345B	0x3A01      	XORLW      1
0x345C	0x1D03      	BTFSS      STATUS, 2
0x345D	0x2C61      	GOTO       L_button_proc_test200
0x345E	0x3001      	MOVLW      1
0x345F	0x0027      	MOVLB      7
0x3460	0x00E1      	MOVWF      _Auto
L_button_proc_test200:
;main.c,125 :: 		EEPROM_Write(255, cap);
0x3461	0x30FF      	MOVLW      255
0x3462	0x002B      	MOVLB      11
0x3463	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x3464	0x0027      	MOVLB      7
0x3465	0x085B      	MOVF       main_cap, 0
0x3466	0x002B      	MOVLB      11
0x3467	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x3468	0x3198      	MOVLP      24
0x3469	0x2000      	CALL       _EEPROM_Write
0x346A	0x31B0      	MOVLP      48
;main.c,126 :: 		EEPROM_Write(254, ind);
0x346B	0x30FE      	MOVLW      254
0x346C	0x002B      	MOVLB      11
0x346D	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x346E	0x0028      	MOVLB      8
0x346F	0x0831      	MOVF       main_ind, 0
0x3470	0x002B      	MOVLB      11
0x3471	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x3472	0x3198      	MOVLP      24
0x3473	0x2000      	CALL       _EEPROM_Write
0x3474	0x31B0      	MOVLP      48
;main.c,127 :: 		EEPROM_Write(253, SW);
0x3475	0x30FD      	MOVLW      253
0x3476	0x002B      	MOVLB      11
0x3477	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x3478	0x0028      	MOVLB      8
0x3479	0x0847      	MOVF       main_SW, 0
0x347A	0x002B      	MOVLB      11
0x347B	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x347C	0x3198      	MOVLP      24
0x347D	0x2000      	CALL       _EEPROM_Write
0x347E	0x31B0      	MOVLP      48
;main.c,128 :: 		EEPROM_Write(252, swr_a/256);
0x347F	0x30FC      	MOVLW      252
0x3480	0x002B      	MOVLB      11
0x3481	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x3482	0x0029      	MOVLB      9
0x3483	0x086B      	MOVF       _swr_a+1, 0
0x3484	0x00F0      	MOVWF      R0
0x3485	0x3000      	MOVLW      0
0x3486	0x1BEB      	BTFSC      _swr_a+1, 7
0x3487	0x30FF      	MOVLW      255
0x3488	0x00F1      	MOVWF      R1
0x3489	0x0870      	MOVF       R0, 0
0x348A	0x002B      	MOVLB      11
0x348B	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x348C	0x3198      	MOVLP      24
0x348D	0x2000      	CALL       _EEPROM_Write
0x348E	0x31B0      	MOVLP      48
;main.c,129 :: 		EEPROM_Write(251, swr_a%256);
0x348F	0x30FB      	MOVLW      251
0x3490	0x002B      	MOVLB      11
0x3491	0x00C7      	MOVWF      FARG_EEPROM_Write_Address
0x3492	0x3000      	MOVLW      0
0x3493	0x00F4      	MOVWF      R4
0x3494	0x3001      	MOVLW      1
0x3495	0x00F5      	MOVWF      R5
0x3496	0x0029      	MOVLB      9
0x3497	0x086A      	MOVF       _swr_a, 0
0x3498	0x00F0      	MOVWF      R0
0x3499	0x086B      	MOVF       _swr_a+1, 0
0x349A	0x00F1      	MOVWF      R1
0x349B	0x3198      	MOVLP      24
0x349C	0x253F      	CALL       _Div_16x16_S
0x349D	0x31B0      	MOVLP      48
0x349E	0x0878      	MOVF       R8, 0
0x349F	0x00F0      	MOVWF      R0
0x34A0	0x0879      	MOVF       R9, 0
0x34A1	0x00F1      	MOVWF      R1
0x34A2	0x0870      	MOVF       R0, 0
0x34A3	0x002B      	MOVLB      11
0x34A4	0x00C8      	MOVWF      FARG_EEPROM_Write_data_
0x34A5	0x3198      	MOVLP      24
0x34A6	0x2000      	CALL       _EEPROM_Write
0x34A7	0x31B0      	MOVLP      48
;main.c,131 :: 		if(type==4 | type==5) {    // 128*64 OLED
0x34A8	0x002A      	MOVLB      10
0x34A9	0x086D      	MOVF       _type, 0
0x34AA	0x3A04      	XORLW      4
0x34AB	0x3001      	MOVLW      1
0x34AC	0x1D03      	BTFSS      STATUS, 2
0x34AD	0x3000      	MOVLW      0
0x34AE	0x00F1      	MOVWF      R1
0x34AF	0x086D      	MOVF       _type, 0
0x34B0	0x3A05      	XORLW      5
0x34B1	0x3001      	MOVLW      1
0x34B2	0x1D03      	BTFSS      STATUS, 2
0x34B3	0x3000      	MOVLW      0
0x34B4	0x00F0      	MOVWF      R0
0x34B5	0x0871      	MOVF       R1, 0
0x34B6	0x04F0      	IORWF       R0, 1
0x34B7	0x1903      	BTFSC      STATUS, 2
0x34B8	0x2D0B      	GOTO       L_button_proc_test201
;main.c,132 :: 		led_wr_str (2, 16, "AUTO    ", 8);
0x34B9	0x3002      	MOVLW      2
0x34BA	0x002C      	MOVLB      12
0x34BB	0x00A4      	MOVWF      FARG_led_wr_str_col
0x34BC	0x3010      	MOVLW      16
0x34BD	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x34BE	0x30D1      	MOVLW      ?lstr5_main
0x34BF	0x00A6      	MOVWF      FARG_led_wr_str_str
0x34C0	0x3000      	MOVLW      hi_addr(?lstr5_main)
0x34C1	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x34C2	0x3008      	MOVLW      8
0x34C3	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x34C4	0x3180      	MOVLP      0
0x34C5	0x24B4      	CALL       _led_wr_str
0x34C6	0x31B0      	MOVLP      48
;main.c,133 :: 		asm CLRWDT;
0x34C7	0x0064      	CLRWDT
;main.c,134 :: 		delay_ms(1000);
0x34C8	0x3015      	MOVLW      21
0x34C9	0x00FB      	MOVWF      R11
0x34CA	0x304B      	MOVLW      75
0x34CB	0x00FC      	MOVWF      R12
0x34CC	0x30BE      	MOVLW      190
0x34CD	0x00FD      	MOVWF      R13
L_button_proc_test202:
0x34CE	0x0BFD      	DECFSZ     R13, 1
0x34CF	0x2CCE      	GOTO       L_button_proc_test202
0x34D0	0x0BFC      	DECFSZ     R12, 1
0x34D1	0x2CCE      	GOTO       L_button_proc_test202
0x34D2	0x0BFB      	DECFSZ     R11, 1
0x34D3	0x2CCE      	GOTO       L_button_proc_test202
0x34D4	0x0000      	NOP
;main.c,135 :: 		led_wr_str (2, 16, "SWR=0.00", 8);
0x34D5	0x3002      	MOVLW      2
0x34D6	0x002C      	MOVLB      12
0x34D7	0x00A4      	MOVWF      FARG_led_wr_str_col
0x34D8	0x3010      	MOVLW      16
0x34D9	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x34DA	0x30D2      	MOVLW      ?lstr6_main
0x34DB	0x00A6      	MOVWF      FARG_led_wr_str_str
0x34DC	0x3002      	MOVLW      hi_addr(?lstr6_main)
0x34DD	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x34DE	0x3008      	MOVLW      8
0x34DF	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x34E0	0x3180      	MOVLP      0
0x34E1	0x24B4      	CALL       _led_wr_str
0x34E2	0x31B0      	MOVLP      48
;main.c,136 :: 		if(Auto & !Bypas) led_wr_str (0, 16+8*12, ".", 1);
0x34E3	0x0026      	MOVLB      6
0x34E4	0x0864      	MOVF       _bypas, 0
0x34E5	0x3001      	MOVLW      1
0x34E6	0x1D03      	BTFSS      STATUS, 2
0x34E7	0x3000      	MOVLW      0
0x34E8	0x00F0      	MOVWF      R0
0x34E9	0x0027      	MOVLB      7
0x34EA	0x0861      	MOVF       _Auto, 0
0x34EB	0x05F0      	ANDWF      R0, 1
0x34EC	0x1903      	BTFSC      STATUS, 2
0x34ED	0x2CFC      	GOTO       L_button_proc_test203
0x34EE	0x002C      	MOVLB      12
0x34EF	0x01A4      	CLRF       FARG_led_wr_str_col
0x34F0	0x3070      	MOVLW      112
0x34F1	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x34F2	0x3062      	MOVLW      ?lstr7_main
0x34F3	0x00A6      	MOVWF      FARG_led_wr_str_str
0x34F4	0x3003      	MOVLW      hi_addr(?lstr7_main)
0x34F5	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x34F6	0x3001      	MOVLW      1
0x34F7	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x34F8	0x3180      	MOVLP      0
0x34F9	0x24B4      	CALL       _led_wr_str
0x34FA	0x31B0      	MOVLP      48
0x34FB	0x2D09      	GOTO       L_button_proc_test204
L_button_proc_test203:
;main.c,138 :: 		else led_wr_str (0, 16+8*12, " ", 1);
0x34FC	0x002C      	MOVLB      12
0x34FD	0x01A4      	CLRF       FARG_led_wr_str_col
0x34FE	0x3070      	MOVLW      112
0x34FF	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3500	0x3060      	MOVLW      ?lstr8_main
0x3501	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3502	0x3003      	MOVLW      hi_addr(?lstr8_main)
0x3503	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3504	0x3001      	MOVLW      1
0x3505	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x3506	0x3180      	MOVLP      0
0x3507	0x24B4      	CALL       _led_wr_str
0x3508	0x31B0      	MOVLP      48
L_button_proc_test204:
;main.c,139 :: 		asm CLRWDT;
0x3509	0x0064      	CLRWDT
;main.c,140 :: 		}
0x350A	0x2D5F      	GOTO       L_button_proc_test205
L_button_proc_test201:
;main.c,141 :: 		else if(type!=0) {// 1602 LCD & 128*32 OLED
0x350B	0x002A      	MOVLB      10
0x350C	0x086D      	MOVF       _type, 0
0x350D	0x3A00      	XORLW      0
0x350E	0x1903      	BTFSC      STATUS, 2
0x350F	0x2D5F      	GOTO       L_button_proc_test206
;main.c,142 :: 		led_wr_str (1, 0, "AUTO    ", 8);
0x3510	0x3001      	MOVLW      1
0x3511	0x002C      	MOVLB      12
0x3512	0x00A4      	MOVWF      FARG_led_wr_str_col
0x3513	0x01A5      	CLRF       FARG_led_wr_str_pos
0x3514	0x3065      	MOVLW      ?lstr9_main
0x3515	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3516	0x3003      	MOVLW      hi_addr(?lstr9_main)
0x3517	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3518	0x3008      	MOVLW      8
0x3519	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x351A	0x3180      	MOVLP      0
0x351B	0x24B4      	CALL       _led_wr_str
0x351C	0x31B0      	MOVLP      48
;main.c,143 :: 		asm CLRWDT;
0x351D	0x0064      	CLRWDT
;main.c,144 :: 		delay_ms(1000);
0x351E	0x3015      	MOVLW      21
0x351F	0x00FB      	MOVWF      R11
0x3520	0x304B      	MOVLW      75
0x3521	0x00FC      	MOVWF      R12
0x3522	0x30BE      	MOVLW      190
0x3523	0x00FD      	MOVWF      R13
L_button_proc_test207:
0x3524	0x0BFD      	DECFSZ     R13, 1
0x3525	0x2D24      	GOTO       L_button_proc_test207
0x3526	0x0BFC      	DECFSZ     R12, 1
0x3527	0x2D24      	GOTO       L_button_proc_test207
0x3528	0x0BFB      	DECFSZ     R11, 1
0x3529	0x2D24      	GOTO       L_button_proc_test207
0x352A	0x0000      	NOP
;main.c,145 :: 		led_wr_str (1, 0, "SWR=0.00", 8);
0x352B	0x3001      	MOVLW      1
0x352C	0x002C      	MOVLB      12
0x352D	0x00A4      	MOVWF      FARG_led_wr_str_col
0x352E	0x01A5      	CLRF       FARG_led_wr_str_pos
0x352F	0x30A2      	MOVLW      ?lstr10_main
0x3530	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3531	0x3003      	MOVLW      hi_addr(?lstr10_main)
0x3532	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3533	0x3008      	MOVLW      8
0x3534	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x3535	0x3180      	MOVLP      0
0x3536	0x24B4      	CALL       _led_wr_str
0x3537	0x31B0      	MOVLP      48
;main.c,146 :: 		if(Auto & !Bypas) led_wr_str (0, 8, ".", 1);
0x3538	0x0026      	MOVLB      6
0x3539	0x0864      	MOVF       _bypas, 0
0x353A	0x3001      	MOVLW      1
0x353B	0x1D03      	BTFSS      STATUS, 2
0x353C	0x3000      	MOVLW      0
0x353D	0x00F0      	MOVWF      R0
0x353E	0x0027      	MOVLB      7
0x353F	0x0861      	MOVF       _Auto, 0
0x3540	0x05F0      	ANDWF      R0, 1
0x3541	0x1903      	BTFSC      STATUS, 2
0x3542	0x2D51      	GOTO       L_button_proc_test208
0x3543	0x002C      	MOVLB      12
0x3544	0x01A4      	CLRF       FARG_led_wr_str_col
0x3545	0x3008      	MOVLW      8
0x3546	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3547	0x30A0      	MOVLW      ?lstr11_main
0x3548	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3549	0x3003      	MOVLW      hi_addr(?lstr11_main)
0x354A	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x354B	0x3001      	MOVLW      1
0x354C	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x354D	0x3180      	MOVLP      0
0x354E	0x24B4      	CALL       _led_wr_str
0x354F	0x31B0      	MOVLP      48
0x3550	0x2D5E      	GOTO       L_button_proc_test209
L_button_proc_test208:
;main.c,148 :: 		else led_wr_str (0, 8, " ", 1);
0x3551	0x002C      	MOVLB      12
0x3552	0x01A4      	CLRF       FARG_led_wr_str_col
0x3553	0x3008      	MOVLW      8
0x3554	0x00A5      	MOVWF      FARG_led_wr_str_pos
0x3555	0x306E      	MOVLW      ?lstr12_main
0x3556	0x00A6      	MOVWF      FARG_led_wr_str_str
0x3557	0x3003      	MOVLW      hi_addr(?lstr12_main)
0x3558	0x00A7      	MOVWF      FARG_led_wr_str_str+1
0x3559	0x3001      	MOVLW      1
0x355A	0x00A8      	MOVWF      FARG_led_wr_str_leng
0x355B	0x3180      	MOVLP      0
0x355C	0x24B4      	CALL       _led_wr_str
0x355D	0x31B0      	MOVLP      48
L_button_proc_test209:
;main.c,149 :: 		asm CLRWDT;
0x355E	0x0064      	CLRWDT
;main.c,150 :: 		}
L_button_proc_test206:
L_button_proc_test205:
;main.c,151 :: 		}
L_button_proc_test199:
;main.c,152 :: 		}
L_button_proc_test187:
;main.c,153 :: 		while(Button(&PORTB, 0, 50, 0)) {lcd_pwr(); asm CLRWDT ;   }
L_button_proc_test210:
0x355F	0x300D      	MOVLW      PORTB
0x3560	0x002B      	MOVLB      11
0x3561	0x00EB      	MOVWF      FARG_Button_port
0x3562	0x3000      	MOVLW      hi_addr(PORTB)
0x3563	0x00EC      	MOVWF      FARG_Button_port+1
0x3564	0x01ED      	CLRF       FARG_Button_pin
0x3565	0x3032      	MOVLW      50
0x3566	0x00EE      	MOVWF      FARG_Button_time_ms
0x3567	0x01EF      	CLRF       FARG_Button_active_state
0x3568	0x3188      	MOVLP      8
0x3569	0x24C0      	CALL       _Button
0x356A	0x31B0      	MOVLP      48
0x356B	0x0870      	MOVF       R0, 0
0x356C	0x1903      	BTFSC      STATUS, 2
0x356D	0x2D73      	GOTO       L_button_proc_test211
0x356E	0x3198      	MOVLP      24
0x356F	0x203A      	CALL       _lcd_pwr
0x3570	0x31B0      	MOVLP      48
0x3571	0x0064      	CLRWDT
0x3572	0x2D5F      	GOTO       L_button_proc_test210
L_button_proc_test211:
;main.c,154 :: 		}  // END Tune btn
L_button_proc_test182:
;main.c,156 :: 		if(Button(&PORTB, 2, 50, 0)){   // BYP button
0x3573	0x300D      	MOVLW      PORTB
0x3574	0x002B      	MOVLB      11
0x3575	0x00EB      	MOVWF      FARG_Button_port
0x3576	0x3000      	MOVLW      hi_addr(PORTB)
0x3577	0x00EC      	MOVWF      FARG_Button_port+1
0x3578	0x3002      	MOVLW      2
0x3579	0x00ED      	MOVWF      FARG_Button_pin
0x357A	0x3032      	MOVLW      50
0x357B	0x00EE      	MOVWF      FARG_Button_time_ms
0x357C	0x01EF      	CLRF       FARG_Button_active_state
0x357D	0x3188      	MOVLP      8
0x357E	0x24C0      	CALL       _Button
0x357F	0x31B0      	MOVLP      48
0x3580	0x0870      	MOVF       R0, 0
0x3581	0x1903      	BTFSC      STATUS, 2
0x3582	0x2DF9      	GOTO       L_button_proc_test212
;main.c,157 :: 		asm CLRWDT;
0x3583	0x0064      	CLRWDT
;main.c,158 :: 		while(PORTB.B2==0) {
L_button_proc_test213:
0x3584	0x0020      	MOVLB      0
0x3585	0x190D      	BTFSC      PORTB, 2
0x3586	0x2DF9      	GOTO       L_button_proc_test214
;main.c,159 :: 		if(L & ind<32*L_mult-1) {
0x3587	0x3005      	MOVLW      5
0x3588	0x00F2      	MOVWF      R2
0x3589	0x0021      	MOVLB      1
0x358A	0x086F      	MOVF       main_L_mult, 0
0x358B	0x00F0      	MOVWF      R0
0x358C	0x01F1      	CLRF       R1
0x358D	0x0872      	MOVF       R2, 0
L__button_proc_test688:
0x358E	0x1903      	BTFSC      STATUS, 2
0x358F	0x2D94      	GOTO       L__button_proc_test689
0x3590	0x35F0      	LSLF       R0, 1
0x3591	0x0DF1      	RLF        R1, 1
0x3592	0x3EFF      	ADDLW      255
0x3593	0x2D8E      	GOTO       L__button_proc_test688
L__button_proc_test689:
0x3594	0x3001      	MOVLW      1
0x3595	0x0270      	SUBWF      R0, 0
0x3596	0x00F2      	MOVWF      R2
0x3597	0x3000      	MOVLW      0
0x3598	0x3B71      	SUBWFB     R1, 0
0x3599	0x00F3      	MOVWF      R3
0x359A	0x3080      	MOVLW      128
0x359B	0x00F0      	MOVWF      R0
0x359C	0x3080      	MOVLW      128
0x359D	0x0673      	XORWF      R3, 0
0x359E	0x0270      	SUBWF      R0, 0
0x359F	0x1D03      	BTFSS      STATUS, 2
0x35A0	0x2DA4      	GOTO       L__button_proc_test690
0x35A1	0x0872      	MOVF       R2, 0
0x35A2	0x0028      	MOVLB      8
0x35A3	0x0231      	SUBWF      main_ind, 0
L__button_proc_test690:
0x35A4	0x3001      	MOVLW      1
0x35A5	0x1803      	BTFSC      STATUS, 0
0x35A6	0x3000      	MOVLW      0
0x35A7	0x00F0      	MOVWF      R0
0x35A8	0x0020      	MOVLB      0
0x35A9	0x086F      	MOVF       _L, 0
0x35AA	0x05F0      	ANDWF      R0, 1
0x35AB	0x1903      	BTFSC      STATUS, 2
0x35AC	0x2DB6      	GOTO       L_button_proc_test215
;main.c,160 :: 		ind ++;
0x35AD	0x0028      	MOVLB      8
0x35AE	0x0AB1      	INCF       main_ind, 1
;main.c,161 :: 		set_ind(ind);
0x35AF	0x0831      	MOVF       main_ind, 0
0x35B0	0x002B      	MOVLB      11
0x35B1	0x00CF      	MOVWF      FARG_set_ind_Ind
0x35B2	0x3188      	MOVLP      8
0x35B3	0x2700      	CALL       _set_ind
0x35B4	0x31B0      	MOVLP      48
;main.c,162 :: 		}
0x35B5	0x2DE9      	GOTO       L_button_proc_test216
L_button_proc_test215:
;main.c,163 :: 		else if(!L & cap<32*L_mult-1) {
0x35B6	0x0020      	MOVLB      0
0x35B7	0x086F      	MOVF       _L, 0
0x35B8	0x3001      	MOVLW      1
0x35B9	0x1D03      	BTFSS      STATUS, 2
0x35BA	0x3000      	MOVLW      0
0x35BB	0x00F4      	MOVWF      R4
0x35BC	0x3005      	MOVLW      5
0x35BD	0x00F2      	MOVWF      R2
0x35BE	0x0021      	MOVLB      1
0x35BF	0x086F      	MOVF       main_L_mult, 0
0x35C0	0x00F0      	MOVWF      R0
0x35C1	0x01F1      	CLRF       R1
0x35C2	0x0872      	MOVF       R2, 0
L__button_proc_test691:
0x35C3	0x1903      	BTFSC      STATUS, 2
0x35C4	0x2DC9      	GOTO       L__button_proc_test692
0x35C5	0x35F0      	LSLF       R0, 1
0x35C6	0x0DF1      	RLF        R1, 1
0x35C7	0x3EFF      	ADDLW      255
0x35C8	0x2DC3      	GOTO       L__button_proc_test691
L__button_proc_test692:
0x35C9	0x3001      	MOVLW      1
0x35CA	0x0270      	SUBWF      R0, 0
0x35CB	0x00F2      	MOVWF      R2
0x35CC	0x3000      	MOVLW      0
0x35CD	0x3B71      	SUBWFB     R1, 0
0x35CE	0x00F3      	MOVWF      R3
0x35CF	0x3080      	MOVLW      128
0x35D0	0x00F0      	MOVWF      R0
0x35D1	0x3080      	MOVLW      128
0x35D2	0x0673      	XORWF      R3, 0
0x35D3	0x0270      	SUBWF      R0, 0
0x35D4	0x1D03      	BTFSS      STATUS, 2
0x35D5	0x2DD9      	GOTO       L__button_proc_test693
0x35D6	0x0872      	MOVF       R2, 0
0x35D7	0x0027      	MOVLB      7
0x35D8	0x025B      	SUBWF      main_cap, 0
L__button_proc_test693:
0x35D9	0x3001      	MOVLW      1
0x35DA	0x1803      	BTFSC      STATUS, 0
0x35DB	0x3000      	MOVLW      0
0x35DC	0x00F0      	MOVWF      R0
0x35DD	0x0874      	MOVF       R4, 0
0x35DE	0x05F0      	ANDWF      R0, 1
0x35DF	0x1903      	BTFSC      STATUS, 2
0x35E0	0x2DE9      	GOTO       L_button_proc_test217
;main.c,164 :: 		cap ++;
0x35E1	0x0027      	MOVLB      7
0x35E2	0x0ADB      	INCF       main_cap, 1
;main.c,165 :: 		set_cap(cap);
0x35E3	0x085B      	MOVF       main_cap, 0
0x35E4	0x002B      	MOVLB      11
0x35E5	0x00CF      	MOVWF      FARG_set_cap_Cap
0x35E6	0x3188      	MOVLP      8
0x35E7	0x27A1      	CALL       _set_cap
0x35E8	0x31B0      	MOVLP      48
;main.c,166 :: 		}
L_button_proc_test217:
L_button_proc_test216:
;main.c,167 :: 		lcd_ind();
0x35E9	0x3188      	MOVLP      8
0x35EA	0x2000      	CALL       _lcd_ind
0x35EB	0x31B0      	MOVLP      48
;main.c,168 :: 		lcd_pwr();
0x35EC	0x3198      	MOVLP      24
0x35ED	0x203A      	CALL       _lcd_pwr
0x35EE	0x31B0      	MOVLP      48
;main.c,169 :: 		Delay_ms(30);
0x35EF	0x309C      	MOVLW      156
0x35F0	0x00FC      	MOVWF      R12
0x35F1	0x30D7      	MOVLW      215
0x35F2	0x00FD      	MOVWF      R13
L_button_proc_test218:
0x35F3	0x0BFD      	DECFSZ     R13, 1
0x35F4	0x2DF3      	GOTO       L_button_proc_test218
0x35F5	0x0BFC      	DECFSZ     R12, 1
0x35F6	0x2DF3      	GOTO       L_button_proc_test218
;main.c,170 :: 		asm CLRWDT;
0x35F7	0x0064      	CLRWDT
;main.c,171 :: 		}
0x35F8	0x2D84      	GOTO       L_button_proc_test213
L_button_proc_test214:
;main.c,172 :: 		}
L_button_proc_test212:
;main.c,175 :: 		if(Button(&PORTB, 1, 50, 0) & Bypas==0){   // Auto button
0x35F9	0x300D      	MOVLW      PORTB
0x35FA	0x002B      	MOVLB      11
0x35FB	0x00EB      	MOVWF      FARG_Button_port
0x35FC	0x3000      	MOVLW      hi_addr(PORTB)
0x35FD	0x00EC      	MOVWF      FARG_Button_port+1
0x35FE	0x3001      	MOVLW      1
0x35FF	0x00ED      	MOVWF      FARG_Button_pin
0x3600	0x3032      	MOVLW      50
0x3601	0x00EE      	MOVWF      FARG_Button_time_ms
0x3602	0x01EF      	CLRF       FARG_Button_active_state
0x3603	0x3188      	MOVLP      8
0x3604	0x24C0      	CALL       _Button
0x3605	0x31B0      	MOVLP      48
0x3606	0x0026      	MOVLB      6
0x3607	0x0864      	MOVF       _bypas, 0
0x3608	0x3A00      	XORLW      0
0x3609	0x3001      	MOVLW      1
0x360A	0x1D03      	BTFSS      STATUS, 2
0x360B	0x3000      	MOVLW      0
0x360C	0x00F1      	MOVWF      R1
0x360D	0x0871      	MOVF       R1, 0
0x360E	0x05F0      	ANDWF      R0, 1
0x360F	0x1903      	BTFSC      STATUS, 2
0x3610	0x2E52      	GOTO       L_button_proc_test219
;main.c,176 :: 		asm CLRWDT;
0x3611	0x0064      	CLRWDT
;main.c,177 :: 		while(PORTB.B1==0) {
L_button_proc_test220:
0x3612	0x0020      	MOVLB      0
0x3613	0x188D      	BTFSC      PORTB, 1
0x3614	0x2E52      	GOTO       L_button_proc_test221
;main.c,178 :: 		if(L & ind>0) {
0x3615	0x0028      	MOVLB      8
0x3616	0x0831      	MOVF       main_ind, 0
0x3617	0x3C00      	SUBLW      0
0x3618	0x3001      	MOVLW      1
0x3619	0x1803      	BTFSC      STATUS, 0
0x361A	0x3000      	MOVLW      0
0x361B	0x00F0      	MOVWF      R0
0x361C	0x0020      	MOVLB      0
0x361D	0x086F      	MOVF       _L, 0
0x361E	0x05F0      	ANDWF      R0, 1
0x361F	0x1903      	BTFSC      STATUS, 2
0x3620	0x2E2A      	GOTO       L_button_proc_test222
;main.c,179 :: 		ind --;
0x3621	0x0028      	MOVLB      8
0x3622	0x03B1      	DECF       main_ind, 1
;main.c,180 :: 		set_ind(ind);
0x3623	0x0831      	MOVF       main_ind, 0
0x3624	0x002B      	MOVLB      11
0x3625	0x00CF      	MOVWF      FARG_set_ind_Ind
0x3626	0x3188      	MOVLP      8
0x3627	0x2700      	CALL       _set_ind
0x3628	0x31B0      	MOVLP      48
;main.c,181 :: 		}
0x3629	0x2E42      	GOTO       L_button_proc_test223
L_button_proc_test222:
;main.c,182 :: 		else if(!L & cap>0) {
0x362A	0x0020      	MOVLB      0
0x362B	0x086F      	MOVF       _L, 0
0x362C	0x3001      	MOVLW      1
0x362D	0x1D03      	BTFSS      STATUS, 2
0x362E	0x3000      	MOVLW      0
0x362F	0x00F1      	MOVWF      R1
0x3630	0x0027      	MOVLB      7
0x3631	0x085B      	MOVF       main_cap, 0
0x3632	0x3C00      	SUBLW      0
0x3633	0x3001      	MOVLW      1
0x3634	0x1803      	BTFSC      STATUS, 0
0x3635	0x3000      	MOVLW      0
0x3636	0x00F0      	MOVWF      R0
0x3637	0x0871      	MOVF       R1, 0
0x3638	0x05F0      	ANDWF      R0, 1
0x3639	0x1903      	BTFSC      STATUS, 2
0x363A	0x2E42      	GOTO       L_button_proc_test224
;main.c,183 :: 		cap --;
0x363B	0x03DB      	DECF       main_cap, 1
;main.c,184 :: 		set_cap(cap);
0x363C	0x085B      	MOVF       main_cap, 0
0x363D	0x002B      	MOVLB      11
0x363E	0x00CF      	MOVWF      FARG_set_cap_Cap
0x363F	0x3188      	MOVLP      8
0x3640	0x27A1      	CALL       _set_cap
0x3641	0x31B0      	MOVLP      48
;main.c,185 :: 		}
L_button_proc_test224:
L_button_proc_test223:
;main.c,186 :: 		lcd_ind();
0x3642	0x3188      	MOVLP      8
0x3643	0x2000      	CALL       _lcd_ind
0x3644	0x31B0      	MOVLP      48
;main.c,187 :: 		lcd_pwr();
0x3645	0x3198      	MOVLP      24
0x3646	0x203A      	CALL       _lcd_pwr
0x3647	0x31B0      	MOVLP      48
;main.c,188 :: 		Delay_ms(30);
0x3648	0x309C      	MOVLW      156
0x3649	0x00FC      	MOVWF      R12
0x364A	0x30D7      	MOVLW      215
0x364B	0x00FD      	MOVWF      R13
L_button_proc_test225:
0x364C	0x0BFD      	DECFSZ     R13, 1
0x364D	0x2E4C      	GOTO       L_button_proc_test225
0x364E	0x0BFC      	DECFSZ     R12, 1
0x364F	0x2E4C      	GOTO       L_button_proc_test225
;main.c,189 :: 		asm CLRWDT;
0x3650	0x0064      	CLRWDT
;main.c,190 :: 		}
0x3651	0x2E12      	GOTO       L_button_proc_test220
L_button_proc_test221:
;main.c,191 :: 		}
L_button_proc_test219:
;main.c,192 :: 		return;
;main.c,193 :: 		}
L_end_button_proc_test:
0x3652	0x0008      	RETURN
; end of _button_proc_test
_main:
0x3653	0x31B8      	MOVLP      56
0x3654	0x2620      	CALL       15904
0x3655	0x31B0      	MOVLP      48
;main.c,32 :: 		void main() {
;main.c,33 :: 		if(STATUS.B4==0) Restart = 1;
0x3656	0x1A03      	BTFSC      STATUS, 4
0x3657	0x2E5B      	GOTO       L_main159
0x3658	0x3001      	MOVLW      1
0x3659	0x0026      	MOVLB      6
0x365A	0x00DF      	MOVWF      _Restart
L_main159:
;main.c,34 :: 		pic_init();
0x365B	0x3198      	MOVLP      24
0x365C	0x27CE      	CALL       _pic_init
0x365D	0x31B0      	MOVLP      48
;main.c,36 :: 		Delay_ms (100);
0x365E	0x3003      	MOVLW      3
0x365F	0x00FB      	MOVWF      R11
0x3660	0x3008      	MOVLW      8
0x3661	0x00FC      	MOVWF      R12
0x3662	0x3077      	MOVLW      119
0x3663	0x00FD      	MOVWF      R13
L_main160:
0x3664	0x0BFD      	DECFSZ     R13, 1
0x3665	0x2E64      	GOTO       L_main160
0x3666	0x0BFC      	DECFSZ     R12, 1
0x3667	0x2E64      	GOTO       L_main160
0x3668	0x0BFB      	DECFSZ     R11, 1
0x3669	0x2E64      	GOTO       L_main160
;main.c,37 :: 		asm CLRWDT;
0x366A	0x0064      	CLRWDT
;main.c,38 :: 		cells_init();
0x366B	0x31B8      	MOVLP      56
0x366C	0x2000      	CALL       _cells_init
0x366D	0x31B0      	MOVLP      48
;main.c,39 :: 		Soft_I2C_Init();
0x366E	0x3198      	MOVLP      24
0x366F	0x278D      	CALL       _Soft_I2C_Init
0x3670	0x31B0      	MOVLP      48
;main.c,40 :: 		if(type==0) { // 2-colors led  reset
0x3671	0x002A      	MOVLB      10
0x3672	0x086D      	MOVF       _type, 0
0x3673	0x3A00      	XORLW      0
0x3674	0x1D03      	BTFSS      STATUS, 2
0x3675	0x2E79      	GOTO       L_main161
;main.c,41 :: 		LATB.B6 = 1;
0x3676	0x0022      	MOVLB      2
0x3677	0x170D      	BSF        LATB, 6
;main.c,42 :: 		LATB.B7 = 1;
0x3678	0x178D      	BSF        LATB, 7
;main.c,43 :: 		}
L_main161:
;main.c,44 :: 		dysp_cnt = Dysp_delay * dysp_cnt_mult;
0x3679	0x0028      	MOVLB      8
0x367A	0x082C      	MOVF       _Dysp_delay, 0
0x367B	0x00F0      	MOVWF      R0
0x367C	0x3180      	MOVLP      0
0x367D	0x27BE      	CALL       _Byte2Double
0x367E	0x31B0      	MOVLP      48
0x367F	0x0027      	MOVLB      7
0x3680	0x0862      	MOVF       _dysp_cnt_mult, 0
0x3681	0x00F4      	MOVWF      R4
0x3682	0x0863      	MOVF       _dysp_cnt_mult+1, 0
0x3683	0x00F5      	MOVWF      R5
0x3684	0x0864      	MOVF       _dysp_cnt_mult+2, 0
0x3685	0x00F6      	MOVWF      R6
0x3686	0x0865      	MOVF       _dysp_cnt_mult+3, 0
0x3687	0x00F7      	MOVWF      R7
0x3688	0x3188      	MOVLP      8
0x3689	0x2598      	CALL       _Mul_32x32_FP
0x368A	0x31B0      	MOVLP      48
0x368B	0x3180      	MOVLP      0
0x368C	0x2651      	CALL       _Double2Int
0x368D	0x31B0      	MOVLP      48
0x368E	0x0870      	MOVF       R0, 0
0x368F	0x0028      	MOVLB      8
0x3690	0x00AD      	MOVWF      _dysp_cnt
0x3691	0x0871      	MOVF       R1, 0
0x3692	0x00AE      	MOVWF      _dysp_cnt+1
;main.c,46 :: 		Delay_ms(200);
0x3693	0x3005      	MOVLW      5
0x3694	0x00FB      	MOVWF      R11
0x3695	0x300F      	MOVLW      15
0x3696	0x00FC      	MOVWF      R12
0x3697	0x30F1      	MOVLW      241
0x3698	0x00FD      	MOVWF      R13
L_main162:
0x3699	0x0BFD      	DECFSZ     R13, 1
0x369A	0x2E99      	GOTO       L_main162
0x369B	0x0BFC      	DECFSZ     R12, 1
0x369C	0x2E99      	GOTO       L_main162
0x369D	0x0BFB      	DECFSZ     R11, 1
0x369E	0x2E99      	GOTO       L_main162
;main.c,47 :: 		asm CLRWDT;
0x369F	0x0064      	CLRWDT
;main.c,49 :: 		if(L_q==5)L_mult = 1;
0x36A0	0x0026      	MOVLB      6
0x36A1	0x085D      	MOVF       main_L_q, 0
0x36A2	0x3A05      	XORLW      5
0x36A3	0x1D03      	BTFSS      STATUS, 2
0x36A4	0x2EA9      	GOTO       L_main163
0x36A5	0x3001      	MOVLW      1
0x36A6	0x0021      	MOVLB      1
0x36A7	0x00EF      	MOVWF      main_L_mult
0x36A8	0x2EBA      	GOTO       L_main164
L_main163:
;main.c,50 :: 		else if(L_q==6) L_mult = 2;
0x36A9	0x0026      	MOVLB      6
0x36AA	0x085D      	MOVF       main_L_q, 0
0x36AB	0x3A06      	XORLW      6
0x36AC	0x1D03      	BTFSS      STATUS, 2
0x36AD	0x2EB2      	GOTO       L_main165
0x36AE	0x3002      	MOVLW      2
0x36AF	0x0021      	MOVLB      1
0x36B0	0x00EF      	MOVWF      main_L_mult
0x36B1	0x2EBA      	GOTO       L_main166
L_main165:
;main.c,51 :: 		else if(L_q==7) L_mult = 4;
0x36B2	0x0026      	MOVLB      6
0x36B3	0x085D      	MOVF       main_L_q, 0
0x36B4	0x3A07      	XORLW      7
0x36B5	0x1D03      	BTFSS      STATUS, 2
0x36B6	0x2EBA      	GOTO       L_main167
0x36B7	0x3004      	MOVLW      4
0x36B8	0x0021      	MOVLB      1
0x36B9	0x00EF      	MOVWF      main_L_mult
L_main167:
L_main166:
L_main164:
;main.c,52 :: 		if(C_q==5) C_mult =1;
0x36BA	0x0026      	MOVLB      6
0x36BB	0x085C      	MOVF       main_C_q, 0
0x36BC	0x3A05      	XORLW      5
0x36BD	0x1D03      	BTFSS      STATUS, 2
0x36BE	0x2EC3      	GOTO       L_main168
0x36BF	0x3001      	MOVLW      1
0x36C0	0x0028      	MOVLB      8
0x36C1	0x00C9      	MOVWF      main_C_mult
0x36C2	0x2ED4      	GOTO       L_main169
L_main168:
;main.c,53 :: 		else if(C_q==6) C_mult = 2;
0x36C3	0x0026      	MOVLB      6
0x36C4	0x085C      	MOVF       main_C_q, 0
0x36C5	0x3A06      	XORLW      6
0x36C6	0x1D03      	BTFSS      STATUS, 2
0x36C7	0x2ECC      	GOTO       L_main170
0x36C8	0x3002      	MOVLW      2
0x36C9	0x0028      	MOVLB      8
0x36CA	0x00C9      	MOVWF      main_C_mult
0x36CB	0x2ED4      	GOTO       L_main171
L_main170:
;main.c,54 :: 		else if(C_q==7) C_mult = 4;
0x36CC	0x0026      	MOVLB      6
0x36CD	0x085C      	MOVF       main_C_q, 0
0x36CE	0x3A07      	XORLW      7
0x36CF	0x1D03      	BTFSS      STATUS, 2
0x36D0	0x2ED4      	GOTO       L_main172
0x36D1	0x3004      	MOVLW      4
0x36D2	0x0028      	MOVLB      8
0x36D3	0x00C9      	MOVWF      main_C_mult
L_main172:
L_main171:
L_main169:
;main.c,56 :: 		led_init();
0x36D4	0x31A0      	MOVLP      32
0x36D5	0x2672      	CALL       _led_init
0x36D6	0x31B0      	MOVLP      48
;main.c,58 :: 		if(Test==0) {
0x36D7	0x0020      	MOVLB      0
0x36D8	0x0849      	MOVF       _Test, 0
0x36D9	0x3A00      	XORLW      0
0x36DA	0x1D03      	BTFSS      STATUS, 2
0x36DB	0x2F2C      	GOTO       L_main173
;main.c,59 :: 		cap = EEPROM_Read(255);
0x36DC	0x30FF      	MOVLW      255
0x36DD	0x002B      	MOVLB      11
0x36DE	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x36DF	0x3190      	MOVLP      16
0x36E0	0x27F5      	CALL       _EEPROM_Read
0x36E1	0x31B0      	MOVLP      48
0x36E2	0x0870      	MOVF       R0, 0
0x36E3	0x0027      	MOVLB      7
0x36E4	0x00DB      	MOVWF      main_cap
;main.c,60 :: 		ind = EEPROM_Read(254);
0x36E5	0x30FE      	MOVLW      254
0x36E6	0x002B      	MOVLB      11
0x36E7	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x36E8	0x3190      	MOVLP      16
0x36E9	0x27F5      	CALL       _EEPROM_Read
0x36EA	0x31B0      	MOVLP      48
0x36EB	0x0870      	MOVF       R0, 0
0x36EC	0x0028      	MOVLB      8
0x36ED	0x00B1      	MOVWF      main_ind
;main.c,61 :: 		SW = EEPROM_Read(253);
0x36EE	0x30FD      	MOVLW      253
0x36EF	0x002B      	MOVLB      11
0x36F0	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x36F1	0x3190      	MOVLP      16
0x36F2	0x27F5      	CALL       _EEPROM_Read
0x36F3	0x31B0      	MOVLP      48
0x36F4	0x0870      	MOVF       R0, 0
0x36F5	0x0028      	MOVLB      8
0x36F6	0x00C7      	MOVWF      main_SW
;main.c,62 :: 		swr_a = EEPROM_Read(252) * 256;
0x36F7	0x30FC      	MOVLW      252
0x36F8	0x002B      	MOVLB      11
0x36F9	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x36FA	0x3190      	MOVLP      16
0x36FB	0x27F5      	CALL       _EEPROM_Read
0x36FC	0x31B0      	MOVLP      48
0x36FD	0x0870      	MOVF       R0, 0
0x36FE	0x0029      	MOVLB      9
0x36FF	0x00EB      	MOVWF      _swr_a+1
0x3700	0x01EA      	CLRF       _swr_a
;main.c,63 :: 		swr_a += EEPROM_Read(251);
0x3701	0x30FB      	MOVLW      251
0x3702	0x002B      	MOVLB      11
0x3703	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3704	0x3190      	MOVLP      16
0x3705	0x27F5      	CALL       _EEPROM_Read
0x3706	0x31B0      	MOVLP      48
0x3707	0x0870      	MOVF       R0, 0
0x3708	0x0029      	MOVLB      9
0x3709	0x07EA      	ADDWF      _swr_a, 1
0x370A	0x3000      	MOVLW      0
0x370B	0x3DEB      	ADDWFC     _swr_a+1, 1
;main.c,64 :: 		set_ind(ind);
0x370C	0x0028      	MOVLB      8
0x370D	0x0831      	MOVF       main_ind, 0
0x370E	0x002B      	MOVLB      11
0x370F	0x00CF      	MOVWF      FARG_set_ind_Ind
0x3710	0x3188      	MOVLP      8
0x3711	0x2700      	CALL       _set_ind
0x3712	0x31B0      	MOVLP      48
;main.c,65 :: 		set_cap(cap);
0x3713	0x0027      	MOVLB      7
0x3714	0x085B      	MOVF       main_cap, 0
0x3715	0x002B      	MOVLB      11
0x3716	0x00CF      	MOVWF      FARG_set_cap_Cap
0x3717	0x3188      	MOVLP      8
0x3718	0x27A1      	CALL       _set_cap
0x3719	0x31B0      	MOVLP      48
;main.c,66 :: 		set_sw(SW);
0x371A	0x0028      	MOVLB      8
0x371B	0x0847      	MOVF       main_SW, 0
0x371C	0x002B      	MOVLB      11
0x371D	0x00C7      	MOVWF      FARG_set_sw_SW
0x371E	0x3188      	MOVLP      8
0x371F	0x27E5      	CALL       _set_sw
0x3720	0x31B0      	MOVLP      48
;main.c,67 :: 		if(Restart==1 ) lcd_prep_short = 1;
0x3721	0x0026      	MOVLB      6
0x3722	0x085F      	MOVF       _Restart, 0
0x3723	0x3A01      	XORLW      1
0x3724	0x1D03      	BTFSS      STATUS, 2
0x3725	0x2F29      	GOTO       L_main174
0x3726	0x3001      	MOVLW      1
0x3727	0x0024      	MOVLB      4
0x3728	0x00EA      	MOVWF      _lcd_prep_short
L_main174:
;main.c,68 :: 		lcd_prep();
0x3729	0x31A0      	MOVLP      32
0x372A	0x2357      	CALL       _lcd_prep
0x372B	0x31B0      	MOVLP      48
;main.c,69 :: 		}
L_main173:
;main.c,71 :: 		lcd_ind();
0x372C	0x3188      	MOVLP      8
0x372D	0x2000      	CALL       _lcd_ind
0x372E	0x31B0      	MOVLP      48
;main.c,77 :: 		while(1) {
L_main175:
;main.c,78 :: 		asm CLRWDT;
0x372F	0x0064      	CLRWDT
;main.c,79 :: 		lcd_pwr();
0x3730	0x3198      	MOVLP      24
0x3731	0x203A      	CALL       _lcd_pwr
0x3732	0x31B0      	MOVLP      48
;main.c,81 :: 		if(Test==0) button_proc();
0x3733	0x0020      	MOVLB      0
0x3734	0x0849      	MOVF       _Test, 0
0x3735	0x3A00      	XORLW      0
0x3736	0x1D03      	BTFSS      STATUS, 2
0x3737	0x2F3A      	GOTO       L_main177
0x3738	0x2000      	CALL       _button_proc
0x3739	0x2F3B      	GOTO       L_main178
L_main177:
;main.c,82 :: 		else button_proc_test();
0x373A	0x239E      	CALL       _button_proc_test
L_main178:
;main.c,84 :: 		if(dysp_cnt!=0) dysp_cnt --;
0x373B	0x3000      	MOVLW      0
0x373C	0x0028      	MOVLB      8
0x373D	0x062E      	XORWF      _dysp_cnt+1, 0
0x373E	0x1D03      	BTFSS      STATUS, 2
0x373F	0x2F42      	GOTO       L__main686
0x3740	0x3000      	MOVLW      0
0x3741	0x062D      	XORWF      _dysp_cnt, 0
L__main686:
0x3742	0x1903      	BTFSC      STATUS, 2
0x3743	0x2F49      	GOTO       L_main179
0x3744	0x3001      	MOVLW      1
0x3745	0x02AD      	SUBWF      _dysp_cnt, 1
0x3746	0x3000      	MOVLW      0
0x3747	0x3BAE      	SUBWFB     _dysp_cnt+1, 1
0x3748	0x2F5E      	GOTO       L_main180
L_main179:
;main.c,85 :: 		else if(Test==0 & Dysp_delay!=0) dysp_off();
0x3749	0x0020      	MOVLB      0
0x374A	0x0849      	MOVF       _Test, 0
0x374B	0x3A00      	XORLW      0
0x374C	0x3001      	MOVLW      1
0x374D	0x1D03      	BTFSS      STATUS, 2
0x374E	0x3000      	MOVLW      0
0x374F	0x00F1      	MOVWF      R1
0x3750	0x0028      	MOVLB      8
0x3751	0x082C      	MOVF       _Dysp_delay, 0
0x3752	0x3A00      	XORLW      0
0x3753	0x3001      	MOVLW      1
0x3754	0x1903      	BTFSC      STATUS, 2
0x3755	0x3000      	MOVLW      0
0x3756	0x00F0      	MOVWF      R0
0x3757	0x0871      	MOVF       R1, 0
0x3758	0x05F0      	ANDWF      R0, 1
0x3759	0x1903      	BTFSC      STATUS, 2
0x375A	0x2F5E      	GOTO       L_main181
0x375B	0x3198      	MOVLP      24
0x375C	0x27B0      	CALL       _dysp_off
0x375D	0x31B0      	MOVLP      48
L_main181:
L_main180:
;main.c,89 :: 		}
0x375E	0x2F2F      	GOTO       L_main175
;main.c,90 :: 		}
L_end_main:
0x375F	0x2F5F      	GOTO       $+0
; end of _main
_cells_init:
;main.c,782 :: 		void cells_init(void) {
;main.c,784 :: 		asm CLRWDT;
0x3800	0x0064      	CLRWDT
;main.c,786 :: 		type = EEPROM_Read(1); // type of display
0x3801	0x3001      	MOVLW      1
0x3802	0x002B      	MOVLB      11
0x3803	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3804	0x3190      	MOVLP      16
0x3805	0x27F5      	CALL       _EEPROM_Read
0x3806	0x31B8      	MOVLP      56
0x3807	0x0870      	MOVF       R0, 0
0x3808	0x002A      	MOVLB      10
0x3809	0x00ED      	MOVWF      _type
;main.c,787 :: 		if(EEPROM_Read(2) == 1) Auto = 1;
0x380A	0x3002      	MOVLW      2
0x380B	0x002B      	MOVLB      11
0x380C	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x380D	0x3190      	MOVLP      16
0x380E	0x27F5      	CALL       _EEPROM_Read
0x380F	0x31B8      	MOVLP      56
0x3810	0x0870      	MOVF       R0, 0
0x3811	0x3A01      	XORLW      1
0x3812	0x1D03      	BTFSS      STATUS, 2
0x3813	0x2817      	GOTO       L_cells_init467
0x3814	0x3001      	MOVLW      1
0x3815	0x0027      	MOVLB      7
0x3816	0x00E1      	MOVWF      _Auto
L_cells_init467:
;main.c,788 :: 		Rel_Del = Bcd2Dec(EEPROM_Read(3)); // Relay's Delay
0x3817	0x3003      	MOVLW      3
0x3818	0x002B      	MOVLB      11
0x3819	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x381A	0x3190      	MOVLP      16
0x381B	0x27F5      	CALL       _EEPROM_Read
0x381C	0x31B8      	MOVLP      56
0x381D	0x0870      	MOVF       R0, 0
0x381E	0x002B      	MOVLB      11
0x381F	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3820	0x3198      	MOVLP      24
0x3821	0x276B      	CALL       _Bcd2Dec
0x3822	0x31B8      	MOVLP      56
0x3823	0x0870      	MOVF       R0, 0
0x3824	0x002A      	MOVLB      10
0x3825	0x00EE      	MOVWF      main_Rel_Del
0x3826	0x01EF      	CLRF       main_Rel_Del+1
;main.c,789 :: 		Auto_delta = Bcd2Dec(EEPROM_Read(4)) * 10;  // Auto_delta
0x3827	0x3004      	MOVLW      4
0x3828	0x002B      	MOVLB      11
0x3829	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x382A	0x3190      	MOVLP      16
0x382B	0x27F5      	CALL       _EEPROM_Read
0x382C	0x31B8      	MOVLP      56
0x382D	0x0870      	MOVF       R0, 0
0x382E	0x002B      	MOVLB      11
0x382F	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3830	0x3198      	MOVLP      24
0x3831	0x276B      	CALL       _Bcd2Dec
0x3832	0x31B8      	MOVLP      56
0x3833	0x300A      	MOVLW      10
0x3834	0x00F4      	MOVWF      R4
0x3835	0x3180      	MOVLP      0
0x3836	0x205D      	CALL       _Mul_8x8_U
0x3837	0x31B8      	MOVLP      56
0x3838	0x0870      	MOVF       R0, 0
0x3839	0x002A      	MOVLB      10
0x383A	0x00D0      	MOVWF      _Auto_delta
0x383B	0x0871      	MOVF       R1, 0
0x383C	0x00D1      	MOVWF      _Auto_delta+1
;main.c,790 :: 		min_for_start = Bcd2Dec(EEPROM_Read(5)) * 10; // P_min_for_start
0x383D	0x3005      	MOVLW      5
0x383E	0x002B      	MOVLB      11
0x383F	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3840	0x3190      	MOVLP      16
0x3841	0x27F5      	CALL       _EEPROM_Read
0x3842	0x31B8      	MOVLP      56
0x3843	0x0870      	MOVF       R0, 0
0x3844	0x002B      	MOVLB      11
0x3845	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3846	0x3198      	MOVLP      24
0x3847	0x276B      	CALL       _Bcd2Dec
0x3848	0x31B8      	MOVLP      56
0x3849	0x300A      	MOVLW      10
0x384A	0x00F4      	MOVWF      R4
0x384B	0x3180      	MOVLP      0
0x384C	0x205D      	CALL       _Mul_8x8_U
0x384D	0x31B8      	MOVLP      56
0x384E	0x0870      	MOVF       R0, 0
0x384F	0x002A      	MOVLB      10
0x3850	0x00BE      	MOVWF      main_min_for_start
0x3851	0x0871      	MOVF       R1, 0
0x3852	0x00BF      	MOVWF      main_min_for_start+1
;main.c,791 :: 		max_for_start = Bcd2Dec(EEPROM_Read(6)) * 10; // P_max_for_start
0x3853	0x3006      	MOVLW      6
0x3854	0x002B      	MOVLB      11
0x3855	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3856	0x3190      	MOVLP      16
0x3857	0x27F5      	CALL       _EEPROM_Read
0x3858	0x31B8      	MOVLP      56
0x3859	0x0870      	MOVF       R0, 0
0x385A	0x002B      	MOVLB      11
0x385B	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x385C	0x3198      	MOVLP      24
0x385D	0x276B      	CALL       _Bcd2Dec
0x385E	0x31B8      	MOVLP      56
0x385F	0x300A      	MOVLW      10
0x3860	0x00F4      	MOVWF      R4
0x3861	0x3180      	MOVLP      0
0x3862	0x205D      	CALL       _Mul_8x8_U
0x3863	0x31B8      	MOVLP      56
0x3864	0x0870      	MOVF       R0, 0
0x3865	0x0029      	MOVLB      9
0x3866	0x00EC      	MOVWF      main_max_for_start
0x3867	0x0871      	MOVF       R1, 0
0x3868	0x00ED      	MOVWF      main_max_for_start+1
;main.c,794 :: 		max_swr = Bcd2Dec(EEPROM_Read(9)) * 10; // Max SWR
0x3869	0x3009      	MOVLW      9
0x386A	0x002B      	MOVLB      11
0x386B	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x386C	0x3190      	MOVLP      16
0x386D	0x27F5      	CALL       _EEPROM_Read
0x386E	0x31B8      	MOVLP      56
0x386F	0x0870      	MOVF       R0, 0
0x3870	0x002B      	MOVLB      11
0x3871	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3872	0x3198      	MOVLP      24
0x3873	0x276B      	CALL       _Bcd2Dec
0x3874	0x31B8      	MOVLP      56
0x3875	0x300A      	MOVLW      10
0x3876	0x00F4      	MOVWF      R4
0x3877	0x3180      	MOVLP      0
0x3878	0x205D      	CALL       _Mul_8x8_U
0x3879	0x31B8      	MOVLP      56
0x387A	0x0870      	MOVF       R0, 0
0x387B	0x002A      	MOVLB      10
0x387C	0x00C0      	MOVWF      main_max_swr
0x387D	0x0871      	MOVF       R1, 0
0x387E	0x00C1      	MOVWF      main_max_swr+1
;main.c,795 :: 		L_q = EEPROM_Read(10);
0x387F	0x300A      	MOVLW      10
0x3880	0x002B      	MOVLB      11
0x3881	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3882	0x3190      	MOVLP      16
0x3883	0x27F5      	CALL       _EEPROM_Read
0x3884	0x31B8      	MOVLP      56
0x3885	0x0870      	MOVF       R0, 0
0x3886	0x0026      	MOVLB      6
0x3887	0x00DD      	MOVWF      main_L_q
;main.c,796 :: 		L_linear = EEPROM_Read(11);
0x3888	0x300B      	MOVLW      11
0x3889	0x002B      	MOVLB      11
0x388A	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x388B	0x3190      	MOVLP      16
0x388C	0x27F5      	CALL       _EEPROM_Read
0x388D	0x31B8      	MOVLP      56
0x388E	0x0870      	MOVF       R0, 0
0x388F	0x0027      	MOVLB      7
0x3890	0x00AB      	MOVWF      main_L_linear
;main.c,797 :: 		C_q = EEPROM_Read(12);
0x3891	0x300C      	MOVLW      12
0x3892	0x002B      	MOVLB      11
0x3893	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3894	0x3190      	MOVLP      16
0x3895	0x27F5      	CALL       _EEPROM_Read
0x3896	0x31B8      	MOVLP      56
0x3897	0x0870      	MOVF       R0, 0
0x3898	0x0026      	MOVLB      6
0x3899	0x00DC      	MOVWF      main_C_q
;main.c,798 :: 		C_linear = EEPROM_Read(13);
0x389A	0x300D      	MOVLW      13
0x389B	0x002B      	MOVLB      11
0x389C	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x389D	0x3190      	MOVLP      16
0x389E	0x27F5      	CALL       _EEPROM_Read
0x389F	0x31B8      	MOVLP      56
0x38A0	0x0870      	MOVF       R0, 0
0x38A1	0x0027      	MOVLB      7
0x38A2	0x00CA      	MOVWF      main_C_linear
;main.c,799 :: 		D_correction = EEPROM_Read(14);
0x38A3	0x300E      	MOVLW      14
0x38A4	0x002B      	MOVLB      11
0x38A5	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x38A6	0x3190      	MOVLP      16
0x38A7	0x27F5      	CALL       _EEPROM_Read
0x38A8	0x31B8      	MOVLP      56
0x38A9	0x0870      	MOVF       R0, 0
0x38AA	0x0028      	MOVLB      8
0x38AB	0x00B4      	MOVWF      main_D_correction
;main.c,800 :: 		L_invert = EEPROM_Read(15);
0x38AC	0x300F      	MOVLW      15
0x38AD	0x002B      	MOVLB      11
0x38AE	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x38AF	0x3190      	MOVLP      16
0x38B0	0x27F5      	CALL       _EEPROM_Read
0x38B1	0x31B8      	MOVLP      56
0x38B2	0x0870      	MOVF       R0, 0
0x38B3	0x0028      	MOVLB      8
0x38B4	0x00C8      	MOVWF      main_L_invert
;main.c,802 :: 		asm CLRWDT;
0x38B5	0x0064      	CLRWDT
;main.c,803 :: 		Ind1 =  Bcd2Dec(EEPROM_Read(16)) * 100 + Bcd2Dec(EEPROM_Read(17));  // Ind1
0x38B6	0x3010      	MOVLW      16
0x38B7	0x002B      	MOVLB      11
0x38B8	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x38B9	0x3190      	MOVLP      16
0x38BA	0x27F5      	CALL       _EEPROM_Read
0x38BB	0x31B8      	MOVLP      56
0x38BC	0x0870      	MOVF       R0, 0
0x38BD	0x002B      	MOVLB      11
0x38BE	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x38BF	0x3198      	MOVLP      24
0x38C0	0x276B      	CALL       _Bcd2Dec
0x38C1	0x31B8      	MOVLP      56
0x38C2	0x3064      	MOVLW      100
0x38C3	0x00F4      	MOVWF      R4
0x38C4	0x3180      	MOVLP      0
0x38C5	0x205D      	CALL       _Mul_8x8_U
0x38C6	0x31B8      	MOVLP      56
0x38C7	0x0870      	MOVF       R0, 0
0x38C8	0x002B      	MOVLB      11
0x38C9	0x00A7      	MOVWF      FLOC__cells_init
0x38CA	0x0871      	MOVF       R1, 0
0x38CB	0x00A8      	MOVWF      FLOC__cells_init+1
0x38CC	0x3011      	MOVLW      17
0x38CD	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x38CE	0x3190      	MOVLP      16
0x38CF	0x27F5      	CALL       _EEPROM_Read
0x38D0	0x31B8      	MOVLP      56
0x38D1	0x0870      	MOVF       R0, 0
0x38D2	0x002B      	MOVLB      11
0x38D3	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x38D4	0x3198      	MOVLP      24
0x38D5	0x276B      	CALL       _Bcd2Dec
0x38D6	0x31B8      	MOVLP      56
0x38D7	0x0870      	MOVF       R0, 0
0x38D8	0x0727      	ADDWF      FLOC__cells_init, 0
0x38D9	0x002A      	MOVLB      10
0x38DA	0x00D2      	MOVWF      _Ind1
0x38DB	0x3000      	MOVLW      0
0x38DC	0x002B      	MOVLB      11
0x38DD	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x38DE	0x002A      	MOVLB      10
0x38DF	0x00D3      	MOVWF      _Ind1+1
;main.c,804 :: 		Ind2 =  Bcd2Dec(EEPROM_Read(18)) * 100 + Bcd2Dec(EEPROM_Read(19));  // Ind2
0x38E0	0x3012      	MOVLW      18
0x38E1	0x002B      	MOVLB      11
0x38E2	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x38E3	0x3190      	MOVLP      16
0x38E4	0x27F5      	CALL       _EEPROM_Read
0x38E5	0x31B8      	MOVLP      56
0x38E6	0x0870      	MOVF       R0, 0
0x38E7	0x002B      	MOVLB      11
0x38E8	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x38E9	0x3198      	MOVLP      24
0x38EA	0x276B      	CALL       _Bcd2Dec
0x38EB	0x31B8      	MOVLP      56
0x38EC	0x3064      	MOVLW      100
0x38ED	0x00F4      	MOVWF      R4
0x38EE	0x3180      	MOVLP      0
0x38EF	0x205D      	CALL       _Mul_8x8_U
0x38F0	0x31B8      	MOVLP      56
0x38F1	0x0870      	MOVF       R0, 0
0x38F2	0x002B      	MOVLB      11
0x38F3	0x00A7      	MOVWF      FLOC__cells_init
0x38F4	0x0871      	MOVF       R1, 0
0x38F5	0x00A8      	MOVWF      FLOC__cells_init+1
0x38F6	0x3013      	MOVLW      19
0x38F7	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x38F8	0x3190      	MOVLP      16
0x38F9	0x27F5      	CALL       _EEPROM_Read
0x38FA	0x31B8      	MOVLP      56
0x38FB	0x0870      	MOVF       R0, 0
0x38FC	0x002B      	MOVLB      11
0x38FD	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x38FE	0x3198      	MOVLP      24
0x38FF	0x276B      	CALL       _Bcd2Dec
0x3900	0x31B8      	MOVLP      56
0x3901	0x0870      	MOVF       R0, 0
0x3902	0x0727      	ADDWF      FLOC__cells_init, 0
0x3903	0x002A      	MOVLB      10
0x3904	0x00DA      	MOVWF      _Ind2
0x3905	0x3000      	MOVLW      0
0x3906	0x002B      	MOVLB      11
0x3907	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x3908	0x002A      	MOVLB      10
0x3909	0x00DB      	MOVWF      _Ind2+1
;main.c,805 :: 		Ind3 =  Bcd2Dec(EEPROM_Read(20)) * 100 + Bcd2Dec(EEPROM_Read(21));  // Ind3
0x390A	0x3014      	MOVLW      20
0x390B	0x002B      	MOVLB      11
0x390C	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x390D	0x3190      	MOVLP      16
0x390E	0x27F5      	CALL       _EEPROM_Read
0x390F	0x31B8      	MOVLP      56
0x3910	0x0870      	MOVF       R0, 0
0x3911	0x002B      	MOVLB      11
0x3912	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3913	0x3198      	MOVLP      24
0x3914	0x276B      	CALL       _Bcd2Dec
0x3915	0x31B8      	MOVLP      56
0x3916	0x3064      	MOVLW      100
0x3917	0x00F4      	MOVWF      R4
0x3918	0x3180      	MOVLP      0
0x3919	0x205D      	CALL       _Mul_8x8_U
0x391A	0x31B8      	MOVLP      56
0x391B	0x0870      	MOVF       R0, 0
0x391C	0x002B      	MOVLB      11
0x391D	0x00A7      	MOVWF      FLOC__cells_init
0x391E	0x0871      	MOVF       R1, 0
0x391F	0x00A8      	MOVWF      FLOC__cells_init+1
0x3920	0x3015      	MOVLW      21
0x3921	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3922	0x3190      	MOVLP      16
0x3923	0x27F5      	CALL       _EEPROM_Read
0x3924	0x31B8      	MOVLP      56
0x3925	0x0870      	MOVF       R0, 0
0x3926	0x002B      	MOVLB      11
0x3927	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3928	0x3198      	MOVLP      24
0x3929	0x276B      	CALL       _Bcd2Dec
0x392A	0x31B8      	MOVLP      56
0x392B	0x0870      	MOVF       R0, 0
0x392C	0x0727      	ADDWF      FLOC__cells_init, 0
0x392D	0x002A      	MOVLB      10
0x392E	0x00D8      	MOVWF      _Ind3
0x392F	0x3000      	MOVLW      0
0x3930	0x002B      	MOVLB      11
0x3931	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x3932	0x002A      	MOVLB      10
0x3933	0x00D9      	MOVWF      _Ind3+1
;main.c,806 :: 		Ind4 =  Bcd2Dec(EEPROM_Read(22)) * 100 + Bcd2Dec(EEPROM_Read(23));  // Ind4
0x3934	0x3016      	MOVLW      22
0x3935	0x002B      	MOVLB      11
0x3936	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3937	0x3190      	MOVLP      16
0x3938	0x27F5      	CALL       _EEPROM_Read
0x3939	0x31B8      	MOVLP      56
0x393A	0x0870      	MOVF       R0, 0
0x393B	0x002B      	MOVLB      11
0x393C	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x393D	0x3198      	MOVLP      24
0x393E	0x276B      	CALL       _Bcd2Dec
0x393F	0x31B8      	MOVLP      56
0x3940	0x3064      	MOVLW      100
0x3941	0x00F4      	MOVWF      R4
0x3942	0x3180      	MOVLP      0
0x3943	0x205D      	CALL       _Mul_8x8_U
0x3944	0x31B8      	MOVLP      56
0x3945	0x0870      	MOVF       R0, 0
0x3946	0x002B      	MOVLB      11
0x3947	0x00A7      	MOVWF      FLOC__cells_init
0x3948	0x0871      	MOVF       R1, 0
0x3949	0x00A8      	MOVWF      FLOC__cells_init+1
0x394A	0x3017      	MOVLW      23
0x394B	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x394C	0x3190      	MOVLP      16
0x394D	0x27F5      	CALL       _EEPROM_Read
0x394E	0x31B8      	MOVLP      56
0x394F	0x0870      	MOVF       R0, 0
0x3950	0x002B      	MOVLB      11
0x3951	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3952	0x3198      	MOVLP      24
0x3953	0x276B      	CALL       _Bcd2Dec
0x3954	0x31B8      	MOVLP      56
0x3955	0x0870      	MOVF       R0, 0
0x3956	0x0727      	ADDWF      FLOC__cells_init, 0
0x3957	0x002A      	MOVLB      10
0x3958	0x00D6      	MOVWF      _Ind4
0x3959	0x3000      	MOVLW      0
0x395A	0x002B      	MOVLB      11
0x395B	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x395C	0x002A      	MOVLB      10
0x395D	0x00D7      	MOVWF      _Ind4+1
;main.c,807 :: 		Ind5 =  Bcd2Dec(EEPROM_Read(24)) * 100 + Bcd2Dec(EEPROM_Read(25));  // Ind5
0x395E	0x3018      	MOVLW      24
0x395F	0x002B      	MOVLB      11
0x3960	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3961	0x3190      	MOVLP      16
0x3962	0x27F5      	CALL       _EEPROM_Read
0x3963	0x31B8      	MOVLP      56
0x3964	0x0870      	MOVF       R0, 0
0x3965	0x002B      	MOVLB      11
0x3966	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3967	0x3198      	MOVLP      24
0x3968	0x276B      	CALL       _Bcd2Dec
0x3969	0x31B8      	MOVLP      56
0x396A	0x3064      	MOVLW      100
0x396B	0x00F4      	MOVWF      R4
0x396C	0x3180      	MOVLP      0
0x396D	0x205D      	CALL       _Mul_8x8_U
0x396E	0x31B8      	MOVLP      56
0x396F	0x0870      	MOVF       R0, 0
0x3970	0x002B      	MOVLB      11
0x3971	0x00A7      	MOVWF      FLOC__cells_init
0x3972	0x0871      	MOVF       R1, 0
0x3973	0x00A8      	MOVWF      FLOC__cells_init+1
0x3974	0x3019      	MOVLW      25
0x3975	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3976	0x3190      	MOVLP      16
0x3977	0x27F5      	CALL       _EEPROM_Read
0x3978	0x31B8      	MOVLP      56
0x3979	0x0870      	MOVF       R0, 0
0x397A	0x002B      	MOVLB      11
0x397B	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x397C	0x3198      	MOVLP      24
0x397D	0x276B      	CALL       _Bcd2Dec
0x397E	0x31B8      	MOVLP      56
0x397F	0x0870      	MOVF       R0, 0
0x3980	0x0727      	ADDWF      FLOC__cells_init, 0
0x3981	0x002A      	MOVLB      10
0x3982	0x00E0      	MOVWF      _Ind5
0x3983	0x3000      	MOVLW      0
0x3984	0x002B      	MOVLB      11
0x3985	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x3986	0x002A      	MOVLB      10
0x3987	0x00E1      	MOVWF      _Ind5+1
;main.c,808 :: 		Ind6 =  Bcd2Dec(EEPROM_Read(26)) * 100 + Bcd2Dec(EEPROM_Read(27));  // Ind6
0x3988	0x301A      	MOVLW      26
0x3989	0x002B      	MOVLB      11
0x398A	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x398B	0x3190      	MOVLP      16
0x398C	0x27F5      	CALL       _EEPROM_Read
0x398D	0x31B8      	MOVLP      56
0x398E	0x0870      	MOVF       R0, 0
0x398F	0x002B      	MOVLB      11
0x3990	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3991	0x3198      	MOVLP      24
0x3992	0x276B      	CALL       _Bcd2Dec
0x3993	0x31B8      	MOVLP      56
0x3994	0x3064      	MOVLW      100
0x3995	0x00F4      	MOVWF      R4
0x3996	0x3180      	MOVLP      0
0x3997	0x205D      	CALL       _Mul_8x8_U
0x3998	0x31B8      	MOVLP      56
0x3999	0x0870      	MOVF       R0, 0
0x399A	0x002B      	MOVLB      11
0x399B	0x00A7      	MOVWF      FLOC__cells_init
0x399C	0x0871      	MOVF       R1, 0
0x399D	0x00A8      	MOVWF      FLOC__cells_init+1
0x399E	0x301B      	MOVLW      27
0x399F	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x39A0	0x3190      	MOVLP      16
0x39A1	0x27F5      	CALL       _EEPROM_Read
0x39A2	0x31B8      	MOVLP      56
0x39A3	0x0870      	MOVF       R0, 0
0x39A4	0x002B      	MOVLB      11
0x39A5	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x39A6	0x3198      	MOVLP      24
0x39A7	0x276B      	CALL       _Bcd2Dec
0x39A8	0x31B8      	MOVLP      56
0x39A9	0x0870      	MOVF       R0, 0
0x39AA	0x0727      	ADDWF      FLOC__cells_init, 0
0x39AB	0x002A      	MOVLB      10
0x39AC	0x00EB      	MOVWF      _Ind6
0x39AD	0x3000      	MOVLW      0
0x39AE	0x002B      	MOVLB      11
0x39AF	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x39B0	0x002A      	MOVLB      10
0x39B1	0x00EC      	MOVWF      _Ind6+1
;main.c,809 :: 		Ind7 =  Bcd2Dec(EEPROM_Read(28)) * 100 + Bcd2Dec(EEPROM_Read(29));  // Ind7
0x39B2	0x301C      	MOVLW      28
0x39B3	0x002B      	MOVLB      11
0x39B4	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x39B5	0x3190      	MOVLP      16
0x39B6	0x27F5      	CALL       _EEPROM_Read
0x39B7	0x31B8      	MOVLP      56
0x39B8	0x0870      	MOVF       R0, 0
0x39B9	0x002B      	MOVLB      11
0x39BA	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x39BB	0x3198      	MOVLP      24
0x39BC	0x276B      	CALL       _Bcd2Dec
0x39BD	0x31B8      	MOVLP      56
0x39BE	0x3064      	MOVLW      100
0x39BF	0x00F4      	MOVWF      R4
0x39C0	0x3180      	MOVLP      0
0x39C1	0x205D      	CALL       _Mul_8x8_U
0x39C2	0x31B8      	MOVLP      56
0x39C3	0x0870      	MOVF       R0, 0
0x39C4	0x002B      	MOVLB      11
0x39C5	0x00A7      	MOVWF      FLOC__cells_init
0x39C6	0x0871      	MOVF       R1, 0
0x39C7	0x00A8      	MOVWF      FLOC__cells_init+1
0x39C8	0x301D      	MOVLW      29
0x39C9	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x39CA	0x3190      	MOVLP      16
0x39CB	0x27F5      	CALL       _EEPROM_Read
0x39CC	0x31B8      	MOVLP      56
0x39CD	0x0870      	MOVF       R0, 0
0x39CE	0x002B      	MOVLB      11
0x39CF	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x39D0	0x3198      	MOVLP      24
0x39D1	0x276B      	CALL       _Bcd2Dec
0x39D2	0x31B8      	MOVLP      56
0x39D3	0x0870      	MOVF       R0, 0
0x39D4	0x0727      	ADDWF      FLOC__cells_init, 0
0x39D5	0x002A      	MOVLB      10
0x39D6	0x00E9      	MOVWF      _Ind7
0x39D7	0x3000      	MOVLW      0
0x39D8	0x002B      	MOVLB      11
0x39D9	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x39DA	0x002A      	MOVLB      10
0x39DB	0x00EA      	MOVWF      _Ind7+1
;main.c,811 :: 		Cap1 =  Bcd2Dec(EEPROM_Read(32)) * 100 + Bcd2Dec(EEPROM_Read(33));  // Cap1
0x39DC	0x3020      	MOVLW      32
0x39DD	0x002B      	MOVLB      11
0x39DE	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x39DF	0x3190      	MOVLP      16
0x39E0	0x27F5      	CALL       _EEPROM_Read
0x39E1	0x31B8      	MOVLP      56
0x39E2	0x0870      	MOVF       R0, 0
0x39E3	0x002B      	MOVLB      11
0x39E4	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x39E5	0x3198      	MOVLP      24
0x39E6	0x276B      	CALL       _Bcd2Dec
0x39E7	0x31B8      	MOVLP      56
0x39E8	0x3064      	MOVLW      100
0x39E9	0x00F4      	MOVWF      R4
0x39EA	0x3180      	MOVLP      0
0x39EB	0x205D      	CALL       _Mul_8x8_U
0x39EC	0x31B8      	MOVLP      56
0x39ED	0x0870      	MOVF       R0, 0
0x39EE	0x002B      	MOVLB      11
0x39EF	0x00A7      	MOVWF      FLOC__cells_init
0x39F0	0x0871      	MOVF       R1, 0
0x39F1	0x00A8      	MOVWF      FLOC__cells_init+1
0x39F2	0x3021      	MOVLW      33
0x39F3	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x39F4	0x3190      	MOVLP      16
0x39F5	0x27F5      	CALL       _EEPROM_Read
0x39F6	0x31B8      	MOVLP      56
0x39F7	0x0870      	MOVF       R0, 0
0x39F8	0x002B      	MOVLB      11
0x39F9	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x39FA	0x3198      	MOVLP      24
0x39FB	0x276B      	CALL       _Bcd2Dec
0x39FC	0x31B8      	MOVLP      56
0x39FD	0x0870      	MOVF       R0, 0
0x39FE	0x0727      	ADDWF      FLOC__cells_init, 0
0x39FF	0x002A      	MOVLB      10
0x3A00	0x00C8      	MOVWF      _Cap1
0x3A01	0x3000      	MOVLW      0
0x3A02	0x002B      	MOVLB      11
0x3A03	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x3A04	0x002A      	MOVLB      10
0x3A05	0x00C9      	MOVWF      _Cap1+1
;main.c,812 :: 		Cap2 =  Bcd2Dec(EEPROM_Read(34)) * 100 + Bcd2Dec(EEPROM_Read(35));  // Cap2
0x3A06	0x3022      	MOVLW      34
0x3A07	0x002B      	MOVLB      11
0x3A08	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3A09	0x3190      	MOVLP      16
0x3A0A	0x27F5      	CALL       _EEPROM_Read
0x3A0B	0x31B8      	MOVLP      56
0x3A0C	0x0870      	MOVF       R0, 0
0x3A0D	0x002B      	MOVLB      11
0x3A0E	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3A0F	0x3198      	MOVLP      24
0x3A10	0x276B      	CALL       _Bcd2Dec
0x3A11	0x31B8      	MOVLP      56
0x3A12	0x3064      	MOVLW      100
0x3A13	0x00F4      	MOVWF      R4
0x3A14	0x3180      	MOVLP      0
0x3A15	0x205D      	CALL       _Mul_8x8_U
0x3A16	0x31B8      	MOVLP      56
0x3A17	0x0870      	MOVF       R0, 0
0x3A18	0x002B      	MOVLB      11
0x3A19	0x00A7      	MOVWF      FLOC__cells_init
0x3A1A	0x0871      	MOVF       R1, 0
0x3A1B	0x00A8      	MOVWF      FLOC__cells_init+1
0x3A1C	0x3023      	MOVLW      35
0x3A1D	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3A1E	0x3190      	MOVLP      16
0x3A1F	0x27F5      	CALL       _EEPROM_Read
0x3A20	0x31B8      	MOVLP      56
0x3A21	0x0870      	MOVF       R0, 0
0x3A22	0x002B      	MOVLB      11
0x3A23	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3A24	0x3198      	MOVLP      24
0x3A25	0x276B      	CALL       _Bcd2Dec
0x3A26	0x31B8      	MOVLP      56
0x3A27	0x0870      	MOVF       R0, 0
0x3A28	0x0727      	ADDWF      FLOC__cells_init, 0
0x3A29	0x002A      	MOVLB      10
0x3A2A	0x00C6      	MOVWF      _Cap2
0x3A2B	0x3000      	MOVLW      0
0x3A2C	0x002B      	MOVLB      11
0x3A2D	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x3A2E	0x002A      	MOVLB      10
0x3A2F	0x00C7      	MOVWF      _Cap2+1
;main.c,813 :: 		Cap3 =  Bcd2Dec(EEPROM_Read(36)) * 100 + Bcd2Dec(EEPROM_Read(37));  // Cap3
0x3A30	0x3024      	MOVLW      36
0x3A31	0x002B      	MOVLB      11
0x3A32	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3A33	0x3190      	MOVLP      16
0x3A34	0x27F5      	CALL       _EEPROM_Read
0x3A35	0x31B8      	MOVLP      56
0x3A36	0x0870      	MOVF       R0, 0
0x3A37	0x002B      	MOVLB      11
0x3A38	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3A39	0x3198      	MOVLP      24
0x3A3A	0x276B      	CALL       _Bcd2Dec
0x3A3B	0x31B8      	MOVLP      56
0x3A3C	0x3064      	MOVLW      100
0x3A3D	0x00F4      	MOVWF      R4
0x3A3E	0x3180      	MOVLP      0
0x3A3F	0x205D      	CALL       _Mul_8x8_U
0x3A40	0x31B8      	MOVLP      56
0x3A41	0x0870      	MOVF       R0, 0
0x3A42	0x002B      	MOVLB      11
0x3A43	0x00A7      	MOVWF      FLOC__cells_init
0x3A44	0x0871      	MOVF       R1, 0
0x3A45	0x00A8      	MOVWF      FLOC__cells_init+1
0x3A46	0x3025      	MOVLW      37
0x3A47	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3A48	0x3190      	MOVLP      16
0x3A49	0x27F5      	CALL       _EEPROM_Read
0x3A4A	0x31B8      	MOVLP      56
0x3A4B	0x0870      	MOVF       R0, 0
0x3A4C	0x002B      	MOVLB      11
0x3A4D	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3A4E	0x3198      	MOVLP      24
0x3A4F	0x276B      	CALL       _Bcd2Dec
0x3A50	0x31B8      	MOVLP      56
0x3A51	0x0870      	MOVF       R0, 0
0x3A52	0x0727      	ADDWF      FLOC__cells_init, 0
0x3A53	0x002A      	MOVLB      10
0x3A54	0x00CE      	MOVWF      _Cap3
0x3A55	0x3000      	MOVLW      0
0x3A56	0x002B      	MOVLB      11
0x3A57	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x3A58	0x002A      	MOVLB      10
0x3A59	0x00CF      	MOVWF      _Cap3+1
;main.c,814 :: 		Cap4 =  Bcd2Dec(EEPROM_Read(38)) * 100 + Bcd2Dec(EEPROM_Read(39));  // Cap4
0x3A5A	0x3026      	MOVLW      38
0x3A5B	0x002B      	MOVLB      11
0x3A5C	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3A5D	0x3190      	MOVLP      16
0x3A5E	0x27F5      	CALL       _EEPROM_Read
0x3A5F	0x31B8      	MOVLP      56
0x3A60	0x0870      	MOVF       R0, 0
0x3A61	0x002B      	MOVLB      11
0x3A62	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3A63	0x3198      	MOVLP      24
0x3A64	0x276B      	CALL       _Bcd2Dec
0x3A65	0x31B8      	MOVLP      56
0x3A66	0x3064      	MOVLW      100
0x3A67	0x00F4      	MOVWF      R4
0x3A68	0x3180      	MOVLP      0
0x3A69	0x205D      	CALL       _Mul_8x8_U
0x3A6A	0x31B8      	MOVLP      56
0x3A6B	0x0870      	MOVF       R0, 0
0x3A6C	0x002B      	MOVLB      11
0x3A6D	0x00A7      	MOVWF      FLOC__cells_init
0x3A6E	0x0871      	MOVF       R1, 0
0x3A6F	0x00A8      	MOVWF      FLOC__cells_init+1
0x3A70	0x3027      	MOVLW      39
0x3A71	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3A72	0x3190      	MOVLP      16
0x3A73	0x27F5      	CALL       _EEPROM_Read
0x3A74	0x31B8      	MOVLP      56
0x3A75	0x0870      	MOVF       R0, 0
0x3A76	0x002B      	MOVLB      11
0x3A77	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3A78	0x3198      	MOVLP      24
0x3A79	0x276B      	CALL       _Bcd2Dec
0x3A7A	0x31B8      	MOVLP      56
0x3A7B	0x0870      	MOVF       R0, 0
0x3A7C	0x0727      	ADDWF      FLOC__cells_init, 0
0x3A7D	0x002A      	MOVLB      10
0x3A7E	0x00CC      	MOVWF      _Cap4
0x3A7F	0x3000      	MOVLW      0
0x3A80	0x002B      	MOVLB      11
0x3A81	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x3A82	0x002A      	MOVLB      10
0x3A83	0x00CD      	MOVWF      _Cap4+1
;main.c,815 :: 		Cap5 =  Bcd2Dec(EEPROM_Read(40)) * 100 + Bcd2Dec(EEPROM_Read(41));  // Cap5
0x3A84	0x3028      	MOVLW      40
0x3A85	0x002B      	MOVLB      11
0x3A86	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3A87	0x3190      	MOVLP      16
0x3A88	0x27F5      	CALL       _EEPROM_Read
0x3A89	0x31B8      	MOVLP      56
0x3A8A	0x0870      	MOVF       R0, 0
0x3A8B	0x002B      	MOVLB      11
0x3A8C	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3A8D	0x3198      	MOVLP      24
0x3A8E	0x276B      	CALL       _Bcd2Dec
0x3A8F	0x31B8      	MOVLP      56
0x3A90	0x3064      	MOVLW      100
0x3A91	0x00F4      	MOVWF      R4
0x3A92	0x3180      	MOVLP      0
0x3A93	0x205D      	CALL       _Mul_8x8_U
0x3A94	0x31B8      	MOVLP      56
0x3A95	0x0870      	MOVF       R0, 0
0x3A96	0x002B      	MOVLB      11
0x3A97	0x00A7      	MOVWF      FLOC__cells_init
0x3A98	0x0871      	MOVF       R1, 0
0x3A99	0x00A8      	MOVWF      FLOC__cells_init+1
0x3A9A	0x3029      	MOVLW      41
0x3A9B	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3A9C	0x3190      	MOVLP      16
0x3A9D	0x27F5      	CALL       _EEPROM_Read
0x3A9E	0x31B8      	MOVLP      56
0x3A9F	0x0870      	MOVF       R0, 0
0x3AA0	0x002B      	MOVLB      11
0x3AA1	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3AA2	0x3198      	MOVLP      24
0x3AA3	0x276B      	CALL       _Bcd2Dec
0x3AA4	0x31B8      	MOVLP      56
0x3AA5	0x0870      	MOVF       R0, 0
0x3AA6	0x0727      	ADDWF      FLOC__cells_init, 0
0x3AA7	0x002A      	MOVLB      10
0x3AA8	0x00CA      	MOVWF      _Cap5
0x3AA9	0x3000      	MOVLW      0
0x3AAA	0x002B      	MOVLB      11
0x3AAB	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x3AAC	0x002A      	MOVLB      10
0x3AAD	0x00CB      	MOVWF      _Cap5+1
;main.c,816 :: 		Cap6 =  Bcd2Dec(EEPROM_Read(42)) * 100 + Bcd2Dec(EEPROM_Read(43));  // Cap6
0x3AAE	0x302A      	MOVLW      42
0x3AAF	0x002B      	MOVLB      11
0x3AB0	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3AB1	0x3190      	MOVLP      16
0x3AB2	0x27F5      	CALL       _EEPROM_Read
0x3AB3	0x31B8      	MOVLP      56
0x3AB4	0x0870      	MOVF       R0, 0
0x3AB5	0x002B      	MOVLB      11
0x3AB6	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3AB7	0x3198      	MOVLP      24
0x3AB8	0x276B      	CALL       _Bcd2Dec
0x3AB9	0x31B8      	MOVLP      56
0x3ABA	0x3064      	MOVLW      100
0x3ABB	0x00F4      	MOVWF      R4
0x3ABC	0x3180      	MOVLP      0
0x3ABD	0x205D      	CALL       _Mul_8x8_U
0x3ABE	0x31B8      	MOVLP      56
0x3ABF	0x0870      	MOVF       R0, 0
0x3AC0	0x002B      	MOVLB      11
0x3AC1	0x00A7      	MOVWF      FLOC__cells_init
0x3AC2	0x0871      	MOVF       R1, 0
0x3AC3	0x00A8      	MOVWF      FLOC__cells_init+1
0x3AC4	0x302B      	MOVLW      43
0x3AC5	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3AC6	0x3190      	MOVLP      16
0x3AC7	0x27F5      	CALL       _EEPROM_Read
0x3AC8	0x31B8      	MOVLP      56
0x3AC9	0x0870      	MOVF       R0, 0
0x3ACA	0x002B      	MOVLB      11
0x3ACB	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3ACC	0x3198      	MOVLP      24
0x3ACD	0x276B      	CALL       _Bcd2Dec
0x3ACE	0x31B8      	MOVLP      56
0x3ACF	0x0870      	MOVF       R0, 0
0x3AD0	0x0727      	ADDWF      FLOC__cells_init, 0
0x3AD1	0x002A      	MOVLB      10
0x3AD2	0x00C4      	MOVWF      _Cap6
0x3AD3	0x3000      	MOVLW      0
0x3AD4	0x002B      	MOVLB      11
0x3AD5	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x3AD6	0x002A      	MOVLB      10
0x3AD7	0x00C5      	MOVWF      _Cap6+1
;main.c,817 :: 		Cap7 =  Bcd2Dec(EEPROM_Read(44)) * 100 + Bcd2Dec(EEPROM_Read(45));  // Cap7
0x3AD8	0x302C      	MOVLW      44
0x3AD9	0x002B      	MOVLB      11
0x3ADA	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3ADB	0x3190      	MOVLP      16
0x3ADC	0x27F5      	CALL       _EEPROM_Read
0x3ADD	0x31B8      	MOVLP      56
0x3ADE	0x0870      	MOVF       R0, 0
0x3ADF	0x002B      	MOVLB      11
0x3AE0	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3AE1	0x3198      	MOVLP      24
0x3AE2	0x276B      	CALL       _Bcd2Dec
0x3AE3	0x31B8      	MOVLP      56
0x3AE4	0x3064      	MOVLW      100
0x3AE5	0x00F4      	MOVWF      R4
0x3AE6	0x3180      	MOVLP      0
0x3AE7	0x205D      	CALL       _Mul_8x8_U
0x3AE8	0x31B8      	MOVLP      56
0x3AE9	0x0870      	MOVF       R0, 0
0x3AEA	0x002B      	MOVLB      11
0x3AEB	0x00A7      	MOVWF      FLOC__cells_init
0x3AEC	0x0871      	MOVF       R1, 0
0x3AED	0x00A8      	MOVWF      FLOC__cells_init+1
0x3AEE	0x302D      	MOVLW      45
0x3AEF	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3AF0	0x3190      	MOVLP      16
0x3AF1	0x27F5      	CALL       _EEPROM_Read
0x3AF2	0x31B8      	MOVLP      56
0x3AF3	0x0870      	MOVF       R0, 0
0x3AF4	0x002B      	MOVLB      11
0x3AF5	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3AF6	0x3198      	MOVLP      24
0x3AF7	0x276B      	CALL       _Bcd2Dec
0x3AF8	0x31B8      	MOVLP      56
0x3AF9	0x0870      	MOVF       R0, 0
0x3AFA	0x0727      	ADDWF      FLOC__cells_init, 0
0x3AFB	0x002A      	MOVLB      10
0x3AFC	0x00C2      	MOVWF      _Cap7
0x3AFD	0x3000      	MOVLW      0
0x3AFE	0x002B      	MOVLB      11
0x3AFF	0x3D28      	ADDWFC     FLOC__cells_init+1, 0
0x3B00	0x002A      	MOVLB      10
0x3B01	0x00C3      	MOVWF      _Cap7+1
;main.c,819 :: 		P_High = EEPROM_Read(0x30);  // High power
0x3B02	0x3030      	MOVLW      48
0x3B03	0x002B      	MOVLB      11
0x3B04	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3B05	0x3190      	MOVLP      16
0x3B06	0x27F5      	CALL       _EEPROM_Read
0x3B07	0x31B8      	MOVLP      56
0x3B08	0x0870      	MOVF       R0, 0
0x3B09	0x0028      	MOVLB      8
0x3B0A	0x00B2      	MOVWF      main_P_High
;main.c,820 :: 		K_Mult = Bcd2Dec(EEPROM_Read(0x31)); // Tandem Match rate
0x3B0B	0x3031      	MOVLW      49
0x3B0C	0x002B      	MOVLB      11
0x3B0D	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3B0E	0x3190      	MOVLP      16
0x3B0F	0x27F5      	CALL       _EEPROM_Read
0x3B10	0x31B8      	MOVLP      56
0x3B11	0x0870      	MOVF       R0, 0
0x3B12	0x002B      	MOVLB      11
0x3B13	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3B14	0x3198      	MOVLP      24
0x3B15	0x276B      	CALL       _Bcd2Dec
0x3B16	0x31B8      	MOVLP      56
0x3B17	0x0870      	MOVF       R0, 0
0x3B18	0x0028      	MOVLB      8
0x3B19	0x00B3      	MOVWF      main_K_Mult
;main.c,821 :: 		Dysp_delay = Bcd2Dec(EEPROM_Read(0x32)); // Dysplay ON delay
0x3B1A	0x3032      	MOVLW      50
0x3B1B	0x002B      	MOVLB      11
0x3B1C	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3B1D	0x3190      	MOVLP      16
0x3B1E	0x27F5      	CALL       _EEPROM_Read
0x3B1F	0x31B8      	MOVLP      56
0x3B20	0x0870      	MOVF       R0, 0
0x3B21	0x002B      	MOVLB      11
0x3B22	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3B23	0x3198      	MOVLP      24
0x3B24	0x276B      	CALL       _Bcd2Dec
0x3B25	0x31B8      	MOVLP      56
0x3B26	0x0870      	MOVF       R0, 0
0x3B27	0x0028      	MOVLB      8
0x3B28	0x00AC      	MOVWF      _Dysp_delay
;main.c,822 :: 		Loss_ind = EEPROM_Read(0x33);
0x3B29	0x3033      	MOVLW      51
0x3B2A	0x002B      	MOVLB      11
0x3B2B	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3B2C	0x3190      	MOVLP      16
0x3B2D	0x27F5      	CALL       _EEPROM_Read
0x3B2E	0x31B8      	MOVLP      56
0x3B2F	0x0870      	MOVF       R0, 0
0x3B30	0x0024      	MOVLB      4
0x3B31	0x00EB      	MOVWF      main_Loss_ind
;main.c,823 :: 		Fid_loss = Bcd2Dec(EEPROM_Read(0x34));
0x3B32	0x3034      	MOVLW      52
0x3B33	0x002B      	MOVLB      11
0x3B34	0x00A9      	MOVWF      FARG_EEPROM_Read_Address
0x3B35	0x3190      	MOVLP      16
0x3B36	0x27F5      	CALL       _EEPROM_Read
0x3B37	0x31B8      	MOVLP      56
0x3B38	0x0870      	MOVF       R0, 0
0x3B39	0x002B      	MOVLB      11
0x3B3A	0x00A9      	MOVWF      FARG_Bcd2Dec_bcdnum
0x3B3B	0x3198      	MOVLP      24
0x3B3C	0x276B      	CALL       _Bcd2Dec
0x3B3D	0x31B8      	MOVLP      56
0x3B3E	0x0870      	MOVF       R0, 0
0x3B3F	0x0028      	MOVLB      8
0x3B40	0x00EF      	MOVWF      _Fid_loss
;main.c,824 :: 		asm CLRWDT;
0x3B41	0x0064      	CLRWDT
;main.c,825 :: 		return;
;main.c,827 :: 		}
L_end_cells_init:
0x3B42	0x0008      	RETURN
; end of _cells_init
0x3E20	0x304F      	MOVLW      79
0x3E21	0x0084      	MOVWF      FSR0
0x3E22	0x30A7      	MOVLW      167
0x3E23	0x0085      	MOVWF      FSR0H
0x3E24	0x304D      	MOVLW      77
0x3E25	0x00F0      	MOVWF      R0
0x3E26	0x3001      	MOVLW      1
0x3E27	0x00F1      	MOVWF      R1
0x3E28	0x3022      	MOVLW      34
0x3E29	0x0086      	MOVWF      FSR1
0x3E2A	0x3000      	MOVLW      0
0x3E2B	0x0087      	MOVWF      FSR1H
0x3E2C	0x3180      	MOVLP      0
0x3E2D	0x27F7      	CALL       2039
0x3E2E	0x31B8      	MOVLP      56
0x3E2F	0x3056      	MOVLW      86
0x3E30	0x0084      	MOVWF      FSR0
0x3E31	0x30BD      	MOVLW      189
0x3E32	0x0085      	MOVWF      FSR0H
0x3E33	0x302F      	MOVLW      47
0x3E34	0x00F0      	MOVWF      R0
0x3E35	0x3001      	MOVLW      1
0x3E36	0x00F1      	MOVWF      R1
0x3E37	0x30A0      	MOVLW      160
0x3E38	0x0086      	MOVWF      FSR1
0x3E39	0x3000      	MOVLW      0
0x3E3A	0x0087      	MOVWF      FSR1H
0x3E3B	0x3180      	MOVLP      0
0x3E3C	0x27F7      	CALL       2039
0x3E3D	0x31B8      	MOVLP      56
0x3E3E	0x30FF      	MOVLW      255
0x3E3F	0x0084      	MOVWF      FSR0
0x3E40	0x308F      	MOVLW      143
0x3E41	0x0085      	MOVWF      FSR0H
0x3E42	0x3001      	MOVLW      1
0x3E43	0x00F0      	MOVWF      R0
0x3E44	0x3001      	MOVLW      1
0x3E45	0x00F1      	MOVWF      R1
0x3E46	0x306F      	MOVLW      111
0x3E47	0x0086      	MOVWF      FSR1
0x3E48	0x3000      	MOVLW      0
0x3E49	0x0087      	MOVWF      FSR1H
0x3E4A	0x3180      	MOVLP      0
0x3E4B	0x27F7      	CALL       2039
0x3E4C	0x31B8      	MOVLP      56
0x3E4D	0x30D0      	MOVLW      208
0x3E4E	0x0084      	MOVWF      FSR0
0x3E4F	0x30BD      	MOVLW      189
0x3E50	0x0085      	MOVWF      FSR0H
0x3E51	0x301A      	MOVLW      26
0x3E52	0x00F0      	MOVWF      R0
0x3E53	0x3001      	MOVLW      1
0x3E54	0x00F1      	MOVWF      R1
0x3E55	0x30CF      	MOVLW      207
0x3E56	0x0086      	MOVWF      FSR1
0x3E57	0x3000      	MOVLW      0
0x3E58	0x0087      	MOVWF      FSR1H
0x3E59	0x3180      	MOVLP      0
0x3E5A	0x27F7      	CALL       2039
0x3E5B	0x31B8      	MOVLP      56
0x3E5C	0x309C      	MOVLW      156
0x3E5D	0x0084      	MOVWF      FSR0
0x3E5E	0x30A7      	MOVLW      167
0x3E5F	0x0085      	MOVWF      FSR0H
0x3E60	0x304B      	MOVLW      75
0x3E61	0x00F0      	MOVWF      R0
0x3E62	0x3001      	MOVLW      1
0x3E63	0x00F1      	MOVWF      R1
0x3E64	0x3020      	MOVLW      32
0x3E65	0x0086      	MOVWF      FSR1
0x3E66	0x3001      	MOVLW      1
0x3E67	0x0087      	MOVWF      FSR1H
0x3E68	0x3180      	MOVLP      0
0x3E69	0x27F7      	CALL       2039
0x3E6A	0x31B8      	MOVLP      56
0x3E6B	0x3061      	MOVLW      97
0x3E6C	0x0084      	MOVWF      FSR0
0x3E6D	0x30B7      	MOVLW      183
0x3E6E	0x0085      	MOVWF      FSR0H
0x3E6F	0x3047      	MOVLW      71
0x3E70	0x00F0      	MOVWF      R0
0x3E71	0x3001      	MOVLW      1
0x3E72	0x00F1      	MOVWF      R1
0x3E73	0x30A0      	MOVLW      160
0x3E74	0x0086      	MOVWF      FSR1
0x3E75	0x3001      	MOVLW      1
0x3E76	0x0087      	MOVWF      FSR1H
0x3E77	0x3180      	MOVLP      0
0x3E78	0x27F7      	CALL       2039
0x3E79	0x31B8      	MOVLP      56
0x3E7A	0x3085      	MOVLW      133
0x3E7B	0x0084      	MOVWF      FSR0
0x3E7C	0x30BD      	MOVLW      189
0x3E7D	0x0085      	MOVWF      FSR0H
0x3E7E	0x302E      	MOVLW      46
0x3E7F	0x00F0      	MOVWF      R0
0x3E80	0x3001      	MOVLW      1
0x3E81	0x00F1      	MOVWF      R1
0x3E82	0x3020      	MOVLW      32
0x3E83	0x0086      	MOVWF      FSR1
0x3E84	0x3002      	MOVLW      2
0x3E85	0x0087      	MOVWF      FSR1H
0x3E86	0x3180      	MOVLP      0
0x3E87	0x27F7      	CALL       2039
0x3E88	0x31B8      	MOVLP      56
0x3E89	0x3005      	MOVLW      5
0x3E8A	0x0084      	MOVWF      FSR0
0x3E8B	0x30BE      	MOVLW      190
0x3E8C	0x0085      	MOVWF      FSR0H
0x3E8D	0x3009      	MOVLW      9
0x3E8E	0x00F0      	MOVWF      R0
0x3E8F	0x3001      	MOVLW      1
0x3E90	0x00F1      	MOVWF      R1
0x3E91	0x30E7      	MOVLW      231
0x3E92	0x0086      	MOVWF      FSR1
0x3E93	0x3001      	MOVLW      1
0x3E94	0x0087      	MOVWF      FSR1H
0x3E95	0x3180      	MOVLP      0
0x3E96	0x27F7      	CALL       2039
0x3E97	0x31B8      	MOVLP      56
0x3E98	0x30F9      	MOVLW      249
0x3E99	0x0084      	MOVWF      FSR0
0x3E9A	0x308F      	MOVLW      143
0x3E9B	0x0085      	MOVWF      FSR0H
0x3E9C	0x3006      	MOVLW      6
0x3E9D	0x00F0      	MOVWF      R0
0x3E9E	0x3001      	MOVLW      1
0x3E9F	0x00F1      	MOVWF      R1
0x3EA0	0x30E9      	MOVLW      233
0x3EA1	0x0086      	MOVWF      FSR1
0x3EA2	0x3000      	MOVLW      0
0x3EA3	0x0087      	MOVWF      FSR1H
0x3EA4	0x3180      	MOVLP      0
0x3EA5	0x27F7      	CALL       2039
0x3EA6	0x31B8      	MOVLP      56
0x3EA7	0x30FB      	MOVLW      251
0x3EA8	0x0084      	MOVWF      FSR0
0x3EA9	0x30A7      	MOVLW      167
0x3EAA	0x0085      	MOVWF      FSR0H
0x3EAB	0x3005      	MOVLW      5
0x3EAC	0x00F0      	MOVWF      R0
0x3EAD	0x3001      	MOVLW      1
0x3EAE	0x00F1      	MOVWF      R1
0x3EAF	0x306B      	MOVLW      107
0x3EB0	0x0086      	MOVWF      FSR1
0x3EB1	0x3001      	MOVLW      1
0x3EB2	0x0087      	MOVWF      FSR1H
0x3EB3	0x3180      	MOVLP      0
0x3EB4	0x27F7      	CALL       2039
0x3EB5	0x31B8      	MOVLP      56
0x3EB6	0x301E      	MOVLW      30
0x3EB7	0x0084      	MOVWF      FSR0
0x3EB8	0x30BE      	MOVLW      190
0x3EB9	0x0085      	MOVWF      FSR0H
0x3EBA	0x3001      	MOVLW      1
0x3EBB	0x00F0      	MOVWF      R0
0x3EBC	0x3001      	MOVLW      1
0x3EBD	0x00F1      	MOVWF      R1
0x3EBE	0x30EF      	MOVLW      239
0x3EBF	0x0086      	MOVWF      FSR1
0x3EC0	0x3000      	MOVLW      0
0x3EC1	0x0087      	MOVWF      FSR1H
0x3EC2	0x3180      	MOVLP      0
0x3EC3	0x27F7      	CALL       2039
0x3EC4	0x31B8      	MOVLP      56
0x3EC5	0x30B3      	MOVLW      179
0x3EC6	0x0084      	MOVWF      FSR0
0x3EC7	0x30BD      	MOVLW      189
0x3EC8	0x0085      	MOVWF      FSR0H
0x3EC9	0x301D      	MOVLW      29
0x3ECA	0x00F0      	MOVWF      R0
0x3ECB	0x3001      	MOVLW      1
0x3ECC	0x00F1      	MOVWF      R1
0x3ECD	0x304E      	MOVLW      78
0x3ECE	0x0086      	MOVWF      FSR1
0x3ECF	0x3002      	MOVLW      2
0x3ED0	0x0087      	MOVWF      FSR1H
0x3ED1	0x3180      	MOVLP      0
0x3ED2	0x27F7      	CALL       2039
0x3ED3	0x31B8      	MOVLP      56
0x3ED4	0x300E      	MOVLW      14
0x3ED5	0x0084      	MOVWF      FSR0
0x3ED6	0x30BE      	MOVLW      190
0x3ED7	0x0085      	MOVWF      FSR0H
0x3ED8	0x3008      	MOVLW      8
0x3ED9	0x00F0      	MOVWF      R0
0x3EDA	0x3001      	MOVLW      1
0x3EDB	0x00F1      	MOVWF      R1
0x3EDC	0x30A0      	MOVLW      160
0x3EDD	0x0086      	MOVWF      FSR1
0x3EDE	0x3002      	MOVLW      2
0x3EDF	0x0087      	MOVWF      FSR1H
0x3EE0	0x3180      	MOVLP      0
0x3EE1	0x27F7      	CALL       2039
0x3EE2	0x31B8      	MOVLP      56
0x3EE3	0x30FF      	MOVLW      255
0x3EE4	0x0084      	MOVWF      FSR0
0x3EE5	0x309F      	MOVLW      159
0x3EE6	0x0085      	MOVWF      FSR0H
0x3EE7	0x3001      	MOVLW      1
0x3EE8	0x00F0      	MOVWF      R0
0x3EE9	0x3001      	MOVLW      1
0x3EEA	0x00F1      	MOVWF      R1
0x3EEB	0x306B      	MOVLW      107
0x3EEC	0x0086      	MOVWF      FSR1
0x3EED	0x3002      	MOVLW      2
0x3EEE	0x0087      	MOVWF      FSR1H
0x3EEF	0x3180      	MOVLP      0
0x3EF0	0x27F7      	CALL       2039
0x3EF1	0x31B8      	MOVLP      56
0x3EF2	0x3023      	MOVLW      35
0x3EF3	0x0084      	MOVWF      FSR0
0x3EF4	0x30BD      	MOVLW      189
0x3EF5	0x0085      	MOVWF      FSR0H
0x3EF6	0x3033      	MOVLW      51
0x3EF7	0x00F0      	MOVWF      R0
0x3EF8	0x3001      	MOVLW      1
0x3EF9	0x00F1      	MOVWF      R1
0x3EFA	0x30A8      	MOVLW      168
0x3EFB	0x0086      	MOVWF      FSR1
0x3EFC	0x3002      	MOVLW      2
0x3EFD	0x0087      	MOVWF      FSR1H
0x3EFE	0x3180      	MOVLP      0
0x3EFF	0x27F7      	CALL       2039
0x3F00	0x31B8      	MOVLP      56
0x3F01	0x3016      	MOVLW      22
0x3F02	0x0084      	MOVWF      FSR0
0x3F03	0x30BE      	MOVLW      190
0x3F04	0x0085      	MOVWF      FSR0H
0x3F05	0x3004      	MOVLW      4
0x3F06	0x00F0      	MOVWF      R0
0x3F07	0x3001      	MOVLW      1
0x3F08	0x00F1      	MOVWF      R1
0x3F09	0x306C      	MOVLW      108
0x3F0A	0x0086      	MOVWF      FSR1
0x3F0B	0x3002      	MOVLW      2
0x3F0C	0x0087      	MOVWF      FSR1H
0x3F0D	0x3180      	MOVLP      0
0x3F0E	0x27F7      	CALL       2039
0x3F0F	0x31B8      	MOVLP      56
0x3F10	0x30EA      	MOVLW      234
0x3F11	0x0084      	MOVWF      FSR0
0x3F12	0x30BD      	MOVLW      189
0x3F13	0x0085      	MOVWF      FSR0H
0x3F14	0x3012      	MOVLW      18
0x3F15	0x00F0      	MOVWF      R0
0x3F16	0x3001      	MOVLW      1
0x3F17	0x00F1      	MOVWF      R1
0x3F18	0x30DB      	MOVLW      219
0x3F19	0x0086      	MOVWF      FSR1
0x3F1A	0x3002      	MOVLW      2
0x3F1B	0x0087      	MOVWF      FSR1H
0x3F1C	0x3180      	MOVLP      0
0x3F1D	0x27F7      	CALL       2039
0x3F1E	0x31B8      	MOVLP      56
0x3F1F	0x30FA      	MOVLW      250
0x3F20	0x0084      	MOVWF      FSR0
0x3F21	0x309F      	MOVLW      159
0x3F22	0x0085      	MOVWF      FSR0H
0x3F23	0x3005      	MOVLW      5
0x3F24	0x00F0      	MOVWF      R0
0x3F25	0x3001      	MOVLW      1
0x3F26	0x00F1      	MOVWF      R1
0x3F27	0x3020      	MOVLW      32
0x3F28	0x0086      	MOVWF      FSR1
0x3F29	0x3003      	MOVLW      3
0x3F2A	0x0087      	MOVWF      FSR1H
0x3F2B	0x3180      	MOVLP      0
0x3F2C	0x27F7      	CALL       2039
0x3F2D	0x31B8      	MOVLP      56
0x3F2E	0x301A      	MOVLW      26
0x3F2F	0x0084      	MOVWF      FSR0
0x3F30	0x30BE      	MOVLW      190
0x3F31	0x0085      	MOVWF      FSR0H
0x3F32	0x3002      	MOVLW      2
0x3F33	0x00F0      	MOVWF      R0
0x3F34	0x3001      	MOVLW      1
0x3F35	0x00F1      	MOVWF      R1
0x3F36	0x30ED      	MOVLW      237
0x3F37	0x0086      	MOVWF      FSR1
0x3F38	0x3002      	MOVLW      2
0x3F39	0x0087      	MOVWF      FSR1H
0x3F3A	0x3180      	MOVLP      0
0x3F3B	0x27F7      	CALL       2039
0x3F3C	0x31B8      	MOVLP      56
0x3F3D	0x30C9      	MOVLW      201
0x3F3E	0x0084      	MOVWF      FSR0
0x3F3F	0x30AF      	MOVLW      175
0x3F40	0x0085      	MOVWF      FSR0H
0x3F41	0x3037      	MOVLW      55
0x3F42	0x00F0      	MOVWF      R0
0x3F43	0x3001      	MOVLW      1
0x3F44	0x00F1      	MOVWF      R1
0x3F45	0x3025      	MOVLW      37
0x3F46	0x0086      	MOVWF      FSR1
0x3F47	0x3003      	MOVLW      3
0x3F48	0x0087      	MOVWF      FSR1H
0x3F49	0x3180      	MOVLP      0
0x3F4A	0x27F7      	CALL       2039
0x3F4B	0x31B8      	MOVLP      56
0x3F4C	0x301C      	MOVLW      28
0x3F4D	0x0084      	MOVWF      FSR0
0x3F4E	0x30BE      	MOVLW      190
0x3F4F	0x0085      	MOVWF      FSR0H
0x3F50	0x3001      	MOVLW      1
0x3F51	0x00F0      	MOVWF      R0
0x3F52	0x3001      	MOVLW      1
0x3F53	0x00F1      	MOVWF      R1
0x3F54	0x30EF      	MOVLW      239
0x3F55	0x0086      	MOVWF      FSR1
0x3F56	0x3002      	MOVLW      2
0x3F57	0x0087      	MOVWF      FSR1H
0x3F58	0x3180      	MOVLP      0
0x3F59	0x27F7      	CALL       2039
0x3F5A	0x31B8      	MOVLP      56
0x3F5B	0x30E7      	MOVLW      231
0x3F5C	0x0084      	MOVWF      FSR0
0x3F5D	0x30A7      	MOVLW      167
0x3F5E	0x0085      	MOVWF      FSR0H
0x3F5F	0x3014      	MOVLW      20
0x3F60	0x00F0      	MOVWF      R0
0x3F61	0x3001      	MOVLW      1
0x3F62	0x00F1      	MOVWF      R1
0x3F63	0x305C      	MOVLW      92
0x3F64	0x0086      	MOVWF      FSR1
0x3F65	0x3003      	MOVLW      3
0x3F66	0x0087      	MOVWF      FSR1H
0x3F67	0x3180      	MOVLP      0
0x3F68	0x27F7      	CALL       2039
0x3F69	0x31B8      	MOVLP      56
0x3F6A	0x3000      	MOVLW      0
0x3F6B	0x0084      	MOVWF      FSR0
0x3F6C	0x30A7      	MOVLW      167
0x3F6D	0x0085      	MOVWF      FSR0H
0x3F6E	0x304F      	MOVLW      79
0x3F6F	0x00F0      	MOVWF      R0
0x3F70	0x3001      	MOVLW      1
0x3F71	0x00F1      	MOVWF      R1
0x3F72	0x30A0      	MOVLW      160
0x3F73	0x0086      	MOVWF      FSR1
0x3F74	0x3003      	MOVLW      3
0x3F75	0x0087      	MOVWF      FSR1H
0x3F76	0x3180      	MOVLP      0
0x3F77	0x27F7      	CALL       2039
0x3F78	0x31B8      	MOVLP      56
0x3F79	0x30FC      	MOVLW      252
0x3F7A	0x0084      	MOVWF      FSR0
0x3F7B	0x30BD      	MOVLW      189
0x3F7C	0x0085      	MOVWF      FSR0H
0x3F7D	0x3009      	MOVLW      9
0x3F7E	0x00F0      	MOVWF      R0
0x3F7F	0x3001      	MOVLW      1
0x3F80	0x00F1      	MOVWF      R1
0x3F81	0x3020      	MOVLW      32
0x3F82	0x0086      	MOVWF      FSR1
0x3F83	0x3004      	MOVLW      4
0x3F84	0x0087      	MOVWF      FSR1H
0x3F85	0x3180      	MOVLP      0
0x3F86	0x27F7      	CALL       2039
0x3F87	0x31B8      	MOVLP      56
0x3F88	0x301D      	MOVLW      29
0x3F89	0x0084      	MOVWF      FSR0
0x3F8A	0x30BE      	MOVLW      190
0x3F8B	0x0085      	MOVWF      FSR0H
0x3F8C	0x3001      	MOVLW      1
0x3F8D	0x00F0      	MOVWF      R0
0x3F8E	0x3001      	MOVLW      1
0x3F8F	0x00F1      	MOVWF      R1
0x3F90	0x30EF      	MOVLW      239
0x3F91	0x0086      	MOVWF      FSR1
0x3F92	0x3003      	MOVLW      3
0x3F93	0x0087      	MOVWF      FSR1H
0x3F94	0x3180      	MOVLP      0
0x3F95	0x27F7      	CALL       2039
0x3F96	0x31B8      	MOVLP      56
0x3F97	0x30A8      	MOVLW      168
0x3F98	0x0084      	MOVWF      FSR0
0x3F99	0x30B7      	MOVLW      183
0x3F9A	0x0085      	MOVWF      FSR0H
0x3F9B	0x3046      	MOVLW      70
0x3F9C	0x00F0      	MOVWF      R0
0x3F9D	0x3001      	MOVLW      1
0x3F9E	0x00F1      	MOVWF      R1
0x3F9F	0x3029      	MOVLW      41
0x3FA0	0x0086      	MOVWF      FSR1
0x3FA1	0x3004      	MOVLW      4
0x3FA2	0x0087      	MOVWF      FSR1H
0x3FA3	0x3180      	MOVLP      0
0x3FA4	0x27F7      	CALL       2039
0x3FA5	0x31B8      	MOVLP      56
0x3FA6	0x307F      	MOVLW      127
0x3FA7	0x0084      	MOVWF      FSR0
0x3FA8	0x30AF      	MOVLW      175
0x3FA9	0x0085      	MOVWF      FSR0H
0x3FAA	0x304A      	MOVLW      74
0x3FAB	0x00F0      	MOVWF      R0
0x3FAC	0x3001      	MOVLW      1
0x3FAD	0x00F1      	MOVWF      R1
0x3FAE	0x30A0      	MOVLW      160
0x3FAF	0x0086      	MOVWF      FSR1
0x3FB0	0x3004      	MOVLW      4
0x3FB1	0x0087      	MOVWF      FSR1H
0x3FB2	0x3180      	MOVLP      0
0x3FB3	0x27F7      	CALL       2039
0x3FB4	0x31B8      	MOVLP      56
0x3FB5	0x30EE      	MOVLW      238
0x3FB6	0x0084      	MOVWF      FSR0
0x3FB7	0x30B7      	MOVLW      183
0x3FB8	0x0085      	MOVWF      FSR0H
0x3FB9	0x3012      	MOVLW      18
0x3FBA	0x00F0      	MOVWF      R0
0x3FBB	0x3001      	MOVLW      1
0x3FBC	0x00F1      	MOVWF      R1
0x3FBD	0x3020      	MOVLW      32
0x3FBE	0x0086      	MOVWF      FSR1
0x3FBF	0x3005      	MOVLW      5
0x3FC0	0x0087      	MOVWF      FSR1H
0x3FC1	0x3180      	MOVLP      0
0x3FC2	0x27F7      	CALL       2039
0x3FC3	0x31B8      	MOVLP      56
0x3FC4	0x0008      	RETURN
;main.c,0 :: ?ICSmain_step_ind
0x0FF9	0x3400 ;?ICSmain_step_ind+0
; end of ?ICSmain_step_ind
;main.c,0 :: ?ICS?lstr55_main
0x0FFA	0x3430 ;?ICS?lstr55_main+0
0x0FFB	0x342E ;?ICS?lstr55_main+1
0x0FFC	0x3430 ;?ICS?lstr55_main+2
0x0FFD	0x3430 ;?ICS?lstr55_main+3
0x0FFE	0x3400 ;?ICS?lstr55_main+4
; end of ?ICS?lstr55_main
;main.c,0 :: ?ICS_L
0x0FFF	0x3401 ;?ICS_L+0
; end of ?ICS_L
;main.c,0 :: ?ICS?lstr37_main
0x1FFA	0x3454 ;?ICS?lstr37_main+0
0x1FFB	0x3455 ;?ICS?lstr37_main+1
0x1FFC	0x344E ;?ICS?lstr37_main+2
0x1FFD	0x3445 ;?ICS?lstr37_main+3
0x1FFE	0x3400 ;?ICS?lstr37_main+4
; end of ?ICS?lstr37_main
;main.c,0 :: ?ICSmain_Loss_ind
0x1FFF	0x3400 ;?ICSmain_Loss_ind+0
; end of ?ICSmain_Loss_ind
;main.c,0 :: ?ICS?lstr11_main
0x2700	0x342E ;?ICS?lstr11_main+0
0x2701	0x3400 ;?ICS?lstr11_main+1
; end of ?ICS?lstr11_main
;main.c,0 :: ?ICS?lstr10_main
0x2702	0x3453 ;?ICS?lstr10_main+0
0x2703	0x3457 ;?ICS?lstr10_main+1
0x2704	0x3452 ;?ICS?lstr10_main+2
0x2705	0x343D ;?ICS?lstr10_main+3
0x2706	0x3430 ;?ICS?lstr10_main+4
0x2707	0x342E ;?ICS?lstr10_main+5
0x2708	0x3430 ;?ICS?lstr10_main+6
0x2709	0x3430 ;?ICS?lstr10_main+7
0x270A	0x3400 ;?ICS?lstr10_main+8
; end of ?ICS?lstr10_main
;main.c,0 :: ?ICSmain_L_linear
0x270B	0x3400 ;?ICSmain_L_linear+0
; end of ?ICSmain_L_linear
;main.c,0 :: ?ICS?lstr16_main
0x270C	0x342E ;?ICS?lstr16_main+0
0x270D	0x3400 ;?ICS?lstr16_main+1
; end of ?ICS?lstr16_main
;main.c,0 :: ?ICS?lstr15_main
0x270E	0x3420 ;?ICS?lstr15_main+0
0x270F	0x3400 ;?ICS?lstr15_main+1
; end of ?ICS?lstr15_main
;main.c,0 :: ?ICS?lstr14_main
0x2710	0x345F ;?ICS?lstr14_main+0
0x2711	0x3400 ;?ICS?lstr14_main+1
; end of ?ICS?lstr14_main
;main.c,0 :: ?ICS?lstr17_main
0x2712	0x345F ;?ICS?lstr17_main+0
0x2713	0x3400 ;?ICS?lstr17_main+1
; end of ?ICS?lstr17_main
;main.c,0 :: ?ICS?lstr20_main
0x2714	0x3453 ;?ICS?lstr20_main+0
0x2715	0x3457 ;?ICS?lstr20_main+1
0x2716	0x3452 ;?ICS?lstr20_main+2
0x2717	0x343D ;?ICS?lstr20_main+3
0x2718	0x3430 ;?ICS?lstr20_main+4
0x2719	0x342E ;?ICS?lstr20_main+5
0x271A	0x3430 ;?ICS?lstr20_main+6
0x271B	0x3430 ;?ICS?lstr20_main+7
0x271C	0x3400 ;?ICS?lstr20_main+8
; end of ?ICS?lstr20_main
;main.c,0 :: ?ICS?lstr19_main
0x271D	0x344D ;?ICS?lstr19_main+0
0x271E	0x3441 ;?ICS?lstr19_main+1
0x271F	0x344E ;?ICS?lstr19_main+2
0x2720	0x3455 ;?ICS?lstr19_main+3
0x2721	0x3441 ;?ICS?lstr19_main+4
0x2722	0x344C ;?ICS?lstr19_main+5
0x2723	0x3420 ;?ICS?lstr19_main+6
0x2724	0x3420 ;?ICS?lstr19_main+7
0x2725	0x3400 ;?ICS?lstr19_main+8
; end of ?ICS?lstr19_main
;main.c,0 :: ?ICS?lstr18_main
0x2726	0x3420 ;?ICS?lstr18_main+0
0x2727	0x3400 ;?ICS?lstr18_main+1
; end of ?ICS?lstr18_main
;main.c,0 :: ?ICS?lstr13_main
0x2728	0x342E ;?ICS?lstr13_main+0
0x2729	0x3400 ;?ICS?lstr13_main+1
; end of ?ICS?lstr13_main
;main.c,0 :: ?ICSmain_C_linear
0x272A	0x3400 ;?ICSmain_C_linear+0
; end of ?ICSmain_C_linear
;main.c,0 :: ?ICS_cap_mem
0x272B	0x3400 ;?ICS_cap_mem+0
; end of ?ICS_cap_mem
;main.c,0 :: ?ICS_Auto_mem
0x272C	0x3400 ;?ICS_Auto_mem+0
; end of ?ICS_Auto_mem
;main.c,0 :: ?ICS_SW_mem
0x272D	0x3400 ;?ICS_SW_mem+0
; end of ?ICS_SW_mem
;main.c,0 :: ?ICS_ind_mem
0x272E	0x3400 ;?ICS_ind_mem+0
; end of ?ICS_ind_mem
;main.c,0 :: ?ICS?lstr87_main
0x272F	0x3443 ;?ICS?lstr87_main+0
0x2730	0x343D ;?ICS?lstr87_main+1
0x2731	0x3400 ;?ICS?lstr87_main+2
; end of ?ICS?lstr87_main
;main.c,0 :: ?ICS?lstr90_main
0x2732	0x3470 ;?ICS?lstr90_main+0
0x2733	0x3446 ;?ICS?lstr90_main+1
0x2734	0x3400 ;?ICS?lstr90_main+2
; end of ?ICS?lstr90_main
;main.c,0 :: ?ICS?lstr89_main
0x2735	0x3443 ;?ICS?lstr89_main+0
0x2736	0x343D ;?ICS?lstr89_main+1
0x2737	0x3400 ;?ICS?lstr89_main+2
; end of ?ICS?lstr89_main
;main.c,0 :: ?ICS?lstr88_main
0x2738	0x3470 ;?ICS?lstr88_main+0
0x2739	0x3446 ;?ICS?lstr88_main+1
0x273A	0x3400 ;?ICS?lstr88_main+2
; end of ?ICS?lstr88_main
;main.c,0 :: ?ICSmain_cap
0x273B	0x3400 ;?ICSmain_cap+0
; end of ?ICSmain_cap
;main.c,0 :: ?ICS?lstr91_main
0x273C	0x3443 ;?ICS?lstr91_main+0
0x273D	0x343D ;?ICS?lstr91_main+1
0x273E	0x3400 ;?ICS?lstr91_main+2
; end of ?ICS?lstr91_main
;main.c,0 :: ?ICS_SWR_fixed_old
0x273F	0x3400 ;?ICS_SWR_fixed_old+0
0x2740	0x3400 ;?ICS_SWR_fixed_old+1
; end of ?ICS_SWR_fixed_old
;main.c,0 :: ?ICS_Auto
0x2741	0x3400 ;?ICS_Auto+0
; end of ?ICS_Auto
;main.c,0 :: ?ICS_dysp_cnt_mult
0x2742	0x3433 ;?ICS_dysp_cnt_mult+0
0x2743	0x3433 ;?ICS_dysp_cnt_mult+1
0x2744	0x3413 ;?ICS_dysp_cnt_mult+2
0x2745	0x3480 ;?ICS_dysp_cnt_mult+3
; end of ?ICS_dysp_cnt_mult
;main.c,0 :: ?ICS?lstr66_main
0x2746	0x344F ;?ICS?lstr66_main+0
0x2747	0x3456 ;?ICS?lstr66_main+1
0x2748	0x3445 ;?ICS?lstr66_main+2
0x2749	0x3452 ;?ICS?lstr66_main+3
0x274A	0x344C ;?ICS?lstr66_main+4
0x274B	0x344F ;?ICS?lstr66_main+5
0x274C	0x3441 ;?ICS?lstr66_main+6
0x274D	0x3444 ;?ICS?lstr66_main+7
0x274E	0x3400 ;?ICS?lstr66_main+8
; end of ?ICS?lstr66_main
;main.c,0 :: ?ICS?lstr52_main
0x274F	0x3453 ;?ICS?lstr52_main+0
0x2750	0x3457 ;?ICS?lstr52_main+1
0x2751	0x3452 ;?ICS?lstr52_main+2
0x2752	0x343D ;?ICS?lstr52_main+3
0x2753	0x3430 ;?ICS?lstr52_main+4
0x2754	0x342E ;?ICS?lstr52_main+5
0x2755	0x3430 ;?ICS?lstr52_main+6
0x2756	0x3430 ;?ICS?lstr52_main+7
0x2757	0x3400 ;?ICS?lstr52_main+8
; end of ?ICS?lstr52_main
;main.c,0 :: ?ICS?lstr51_main
0x2758	0x3450 ;?ICS?lstr51_main+0
0x2759	0x3457 ;?ICS?lstr51_main+1
0x275A	0x3452 ;?ICS?lstr51_main+2
0x275B	0x343D ;?ICS?lstr51_main+3
0x275C	0x3430 ;?ICS?lstr51_main+4
0x275D	0x342E ;?ICS?lstr51_main+5
0x275E	0x3430 ;?ICS?lstr51_main+6
0x275F	0x3457 ;?ICS?lstr51_main+7
0x2760	0x3400 ;?ICS?lstr51_main+8
; end of ?ICS?lstr51_main
;main.c,0 :: ?ICS?lstr50_main
0x2761	0x3450 ;?ICS?lstr50_main+0
0x2762	0x3457 ;?ICS?lstr50_main+1
0x2763	0x3452 ;?ICS?lstr50_main+2
0x2764	0x343D ;?ICS?lstr50_main+3
0x2765	0x3420 ;?ICS?lstr50_main+4
0x2766	0x3420 ;?ICS?lstr50_main+5
0x2767	0x3430 ;?ICS?lstr50_main+6
0x2768	0x3457 ;?ICS?lstr50_main+7
0x2769	0x3400 ;?ICS?lstr50_main+8
; end of ?ICS?lstr50_main
;main.c,0 :: ?ICS?lstr53_main
0x276A	0x342E ;?ICS?lstr53_main+0
0x276B	0x3400 ;?ICS?lstr53_main+1
; end of ?ICS?lstr53_main
;main.c,0 :: ?ICS?lstr56_main
0x276C	0x3441 ;?ICS?lstr56_main+0
0x276D	0x344E ;?ICS?lstr56_main+1
0x276E	0x3454 ;?ICS?lstr56_main+2
0x276F	0x343D ;?ICS?lstr56_main+3
0x2770	0x3420 ;?ICS?lstr56_main+4
0x2771	0x3420 ;?ICS?lstr56_main+5
0x2772	0x3430 ;?ICS?lstr56_main+6
0x2773	0x3457 ;?ICS?lstr56_main+7
0x2774	0x3400 ;?ICS?lstr56_main+8
; end of ?ICS?lstr56_main
;main.c,0 :: ?ICS_Loss_mode
0x2775	0x3400 ;?ICS_Loss_mode+0
; end of ?ICS_Loss_mode
;main.c,0 :: ?ICS_Test
0x2776	0x3400 ;?ICS_Test+0
; end of ?ICS_Test
;main.c,0 :: ?ICS?lstr49_main
0x2777	0x3420 ;?ICS?lstr49_main+0
0x2778	0x3400 ;?ICS?lstr49_main+1
; end of ?ICS?lstr49_main
;main.c,0 :: ?ICS?lstr44_main
0x2779	0x3450 ;?ICS?lstr44_main+0
0x277A	0x3457 ;?ICS?lstr44_main+1
0x277B	0x3452 ;?ICS?lstr44_main+2
0x277C	0x343D ;?ICS?lstr44_main+3
0x277D	0x3430 ;?ICS?lstr44_main+4
0x277E	0x342E ;?ICS?lstr44_main+5
0x277F	0x3430 ;?ICS?lstr44_main+6
0x2780	0x3457 ;?ICS?lstr44_main+7
0x2781	0x3400 ;?ICS?lstr44_main+8
; end of ?ICS?lstr44_main
;main.c,0 :: ?ICS?lstr43_main
0x2782	0x3450 ;?ICS?lstr43_main+0
0x2783	0x3457 ;?ICS?lstr43_main+1
0x2784	0x3452 ;?ICS?lstr43_main+2
0x2785	0x343D ;?ICS?lstr43_main+3
0x2786	0x3420 ;?ICS?lstr43_main+4
0x2787	0x3420 ;?ICS?lstr43_main+5
0x2788	0x3430 ;?ICS?lstr43_main+6
0x2789	0x3457 ;?ICS?lstr43_main+7
0x278A	0x3400 ;?ICS?lstr43_main+8
; end of ?ICS?lstr43_main
;main.c,0 :: ?ICS?lstr42_main
0x278B	0x3426 ;?ICS?lstr42_main+0
0x278C	0x3420 ;?ICS?lstr42_main+1
0x278D	0x3452 ;?ICS?lstr42_main+2
0x278E	0x3433 ;?ICS?lstr42_main+3
0x278F	0x3454 ;?ICS?lstr42_main+4
0x2790	0x344A ;?ICS?lstr42_main+5
0x2791	0x344C ;?ICS?lstr42_main+6
0x2792	0x3400 ;?ICS?lstr42_main+7
; end of ?ICS?lstr42_main
;main.c,0 :: ?ICS?lstr45_main
0x2793	0x3453 ;?ICS?lstr45_main+0
0x2794	0x3457 ;?ICS?lstr45_main+1
0x2795	0x3452 ;?ICS?lstr45_main+2
0x2796	0x343D ;?ICS?lstr45_main+3
0x2797	0x3430 ;?ICS?lstr45_main+4
0x2798	0x342E ;?ICS?lstr45_main+5
0x2799	0x3430 ;?ICS?lstr45_main+6
0x279A	0x3430 ;?ICS?lstr45_main+7
0x279B	0x3400 ;?ICS?lstr45_main+8
; end of ?ICS?lstr45_main
;main.c,0 :: ?ICS?lstr59_main
0x279C	0x3441 ;?ICS?lstr59_main+0
0x279D	0x344E ;?ICS?lstr59_main+1
0x279E	0x3454 ;?ICS?lstr59_main+2
0x279F	0x343D ;?ICS?lstr59_main+3
0x27A0	0x3420 ;?ICS?lstr59_main+4
0x27A1	0x3420 ;?ICS?lstr59_main+5
0x27A2	0x3430 ;?ICS?lstr59_main+6
0x27A3	0x3457 ;?ICS?lstr59_main+7
0x27A4	0x3400 ;?ICS?lstr59_main+8
; end of ?ICS?lstr59_main
;main.c,0 :: ?ICS?lstr58_main
0x27A5	0x3445 ;?ICS?lstr58_main+0
0x27A6	0x3446 ;?ICS?lstr58_main+1
0x27A7	0x3446 ;?ICS?lstr58_main+2
0x27A8	0x343D ;?ICS?lstr58_main+3
0x27A9	0x3420 ;?ICS?lstr58_main+4
0x27AA	0x3420 ;?ICS?lstr58_main+5
0x27AB	0x3430 ;?ICS?lstr58_main+6
0x27AC	0x3425 ;?ICS?lstr58_main+7
0x27AD	0x3400 ;?ICS?lstr58_main+8
; end of ?ICS?lstr58_main
;main.c,0 :: ?ICS?lstr61_main
0x27AE	0x3445 ;?ICS?lstr61_main+0
0x27AF	0x3446 ;?ICS?lstr61_main+1
0x27B0	0x3446 ;?ICS?lstr61_main+2
0x27B1	0x343D ;?ICS?lstr61_main+3
0x27B2	0x3420 ;?ICS?lstr61_main+4
0x27B3	0x3420 ;?ICS?lstr61_main+5
0x27B4	0x3430 ;?ICS?lstr61_main+6
0x27B5	0x3425 ;?ICS?lstr61_main+7
0x27B6	0x3400 ;?ICS?lstr61_main+8
; end of ?ICS?lstr61_main
;main.c,0 :: ?ICS?lstr64_main
0x27B7	0x3445 ;?ICS?lstr64_main+0
0x27B8	0x3446 ;?ICS?lstr64_main+1
0x27B9	0x3446 ;?ICS?lstr64_main+2
0x27BA	0x343D ;?ICS?lstr64_main+3
0x27BB	0x3420 ;?ICS?lstr64_main+4
0x27BC	0x3430 ;?ICS?lstr64_main+5
0x27BD	0x3425 ;?ICS?lstr64_main+6
0x27BE	0x3400 ;?ICS?lstr64_main+7
; end of ?ICS?lstr64_main
;main.c,0 :: ?ICS?lstr63_main
0x27BF	0x3441 ;?ICS?lstr63_main+0
0x27C0	0x344E ;?ICS?lstr63_main+1
0x27C1	0x343D ;?ICS?lstr63_main+2
0x27C2	0x3430 ;?ICS?lstr63_main+3
0x27C3	0x342E ;?ICS?lstr63_main+4
0x27C4	0x3430 ;?ICS?lstr63_main+5
0x27C5	0x3457 ;?ICS?lstr63_main+6
0x27C6	0x3400 ;?ICS?lstr63_main+7
; end of ?ICS?lstr63_main
;main.c,0 :: ?ICS?lstr62_main
0x27C7	0x3441 ;?ICS?lstr62_main+0
0x27C8	0x344E ;?ICS?lstr62_main+1
0x27C9	0x343D ;?ICS?lstr62_main+2
0x27CA	0x3420 ;?ICS?lstr62_main+3
0x27CB	0x3420 ;?ICS?lstr62_main+4
0x27CC	0x3430 ;?ICS?lstr62_main+5
0x27CD	0x3457 ;?ICS?lstr62_main+6
0x27CE	0x3400 ;?ICS?lstr62_main+7
; end of ?ICS?lstr62_main
;main.c,0 :: ?ICS?lstr102_main
0x27CF	0x344D ;?ICS?lstr102_main+0
0x27D0	0x3461 ;?ICS?lstr102_main+1
0x27D1	0x3478 ;?ICS?lstr102_main+2
0x27D2	0x3420 ;?ICS?lstr102_main+3
0x27D3	0x3450 ;?ICS?lstr102_main+4
0x27D4	0x3457 ;?ICS?lstr102_main+5
0x27D5	0x3452 ;?ICS?lstr102_main+6
0x27D6	0x3400 ;?ICS?lstr102_main+7
; end of ?ICS?lstr102_main
;main.c,0 :: ?ICS?lstr101_main
0x27D7	0x344D ;?ICS?lstr101_main+0
0x27D8	0x3461 ;?ICS?lstr101_main+1
0x27D9	0x3478 ;?ICS?lstr101_main+2
0x27DA	0x3420 ;?ICS?lstr101_main+3
0x27DB	0x3450 ;?ICS?lstr101_main+4
0x27DC	0x3457 ;?ICS?lstr101_main+5
0x27DD	0x3452 ;?ICS?lstr101_main+6
0x27DE	0x3400 ;?ICS?lstr101_main+7
; end of ?ICS?lstr101_main
;main.c,0 :: ?ICS?lstr103_main
0x27DF	0x3453 ;?ICS?lstr103_main+0
0x27E0	0x3463 ;?ICS?lstr103_main+1
0x27E1	0x3472 ;?ICS?lstr103_main+2
0x27E2	0x3444 ;?ICS?lstr103_main+3
0x27E3	0x3465 ;?ICS?lstr103_main+4
0x27E4	0x346C ;?ICS?lstr103_main+5
0x27E5	0x3420 ;?ICS?lstr103_main+6
0x27E6	0x3400 ;?ICS?lstr103_main+7
; end of ?ICS?lstr103_main
;main.c,0 :: ?ICSmain_C_q
0x27E7	0x3407 ;?ICSmain_C_q+0
; end of ?ICSmain_C_q
;main.c,0 :: ?ICSmain_L_q
0x27E8	0x3407 ;?ICSmain_L_q+0
; end of ?ICSmain_L_q
;main.c,0 :: ?ICS_rready
0x27E9	0x3400 ;?ICS_rready+0
; end of ?ICS_rready
;main.c,0 :: ?ICS_Restart
0x27EA	0x3400 ;?ICS_Restart+0
; end of ?ICS_Restart
;main.c,0 :: ?ICS?lstr8_main
0x27EB	0x3420 ;?ICS?lstr8_main+0
0x27EC	0x3400 ;?ICS?lstr8_main+1
; end of ?ICS?lstr8_main
;main.c,0 :: ?ICS?lstr7_main
0x27ED	0x342E ;?ICS?lstr7_main+0
0x27EE	0x3400 ;?ICS?lstr7_main+1
; end of ?ICS?lstr7_main
;main.c,0 :: ?ICS_bypas
0x27EF	0x3400 ;?ICS_bypas+0
; end of ?ICS_bypas
;main.c,0 :: ?ICS?lstr9_main
0x27F0	0x3441 ;?ICS?lstr9_main+0
0x27F1	0x3455 ;?ICS?lstr9_main+1
0x27F2	0x3454 ;?ICS?lstr9_main+2
0x27F3	0x344F ;?ICS?lstr9_main+3
0x27F4	0x3420 ;?ICS?lstr9_main+4
0x27F5	0x3420 ;?ICS?lstr9_main+5
0x27F6	0x3420 ;?ICS?lstr9_main+6
0x27F7	0x3420 ;?ICS?lstr9_main+7
0x27F8	0x3400 ;?ICS?lstr9_main+8
; end of ?ICS?lstr9_main
;main.c,0 :: ?ICS?lstr12_main
0x27F9	0x3420 ;?ICS?lstr12_main+0
0x27FA	0x3400 ;?ICS?lstr12_main+1
; end of ?ICS?lstr12_main
;main.c,0 :: ?ICS?lstr54_main
0x27FB	0x3430 ;?ICS?lstr54_main+0
0x27FC	0x342E ;?ICS?lstr54_main+1
0x27FD	0x3430 ;?ICS?lstr54_main+2
0x27FE	0x3430 ;?ICS?lstr54_main+3
0x27FF	0x3400 ;?ICS?lstr54_main+4
; end of ?ICS?lstr54_main
;main.c,0 :: ?ICS?lstr75_main
0x2F7F	0x3420 ;?ICS?lstr75_main+0
0x2F80	0x3420 ;?ICS?lstr75_main+1
0x2F81	0x3420 ;?ICS?lstr75_main+2
0x2F82	0x3420 ;?ICS?lstr75_main+3
0x2F83	0x3420 ;?ICS?lstr75_main+4
0x2F84	0x3420 ;?ICS?lstr75_main+5
0x2F85	0x3420 ;?ICS?lstr75_main+6
0x2F86	0x3420 ;?ICS?lstr75_main+7
0x2F87	0x3400 ;?ICS?lstr75_main+8
; end of ?ICS?lstr75_main
;main.c,0 :: ?ICS?lstr74_main
0x2F88	0x344F ;?ICS?lstr74_main+0
0x2F89	0x3456 ;?ICS?lstr74_main+1
0x2F8A	0x3445 ;?ICS?lstr74_main+2
0x2F8B	0x3452 ;?ICS?lstr74_main+3
0x2F8C	0x344C ;?ICS?lstr74_main+4
0x2F8D	0x344F ;?ICS?lstr74_main+5
0x2F8E	0x3441 ;?ICS?lstr74_main+6
0x2F8F	0x3444 ;?ICS?lstr74_main+7
0x2F90	0x3400 ;?ICS?lstr74_main+8
; end of ?ICS?lstr74_main
;main.c,0 :: ?ICS?lstr76_main
0x2F91	0x344F ;?ICS?lstr76_main+0
0x2F92	0x3456 ;?ICS?lstr76_main+1
0x2F93	0x3445 ;?ICS?lstr76_main+2
0x2F94	0x3452 ;?ICS?lstr76_main+3
0x2F95	0x344C ;?ICS?lstr76_main+4
0x2F96	0x344F ;?ICS?lstr76_main+5
0x2F97	0x3441 ;?ICS?lstr76_main+6
0x2F98	0x3444 ;?ICS?lstr76_main+7
0x2F99	0x3400 ;?ICS?lstr76_main+8
; end of ?ICS?lstr76_main
;main.c,0 :: ?ICS?lstr70_main
0x2F9A	0x344F ;?ICS?lstr70_main+0
0x2F9B	0x3456 ;?ICS?lstr70_main+1
0x2F9C	0x3445 ;?ICS?lstr70_main+2
0x2F9D	0x3452 ;?ICS?lstr70_main+3
0x2F9E	0x344C ;?ICS?lstr70_main+4
0x2F9F	0x344F ;?ICS?lstr70_main+5
0x2FA0	0x3441 ;?ICS?lstr70_main+6
0x2FA1	0x3444 ;?ICS?lstr70_main+7
0x2FA2	0x3400 ;?ICS?lstr70_main+8
; end of ?ICS?lstr70_main
;main.c,0 :: ?ICS?lstr67_main
0x2FA3	0x3420 ;?ICS?lstr67_main+0
0x2FA4	0x3420 ;?ICS?lstr67_main+1
0x2FA5	0x3420 ;?ICS?lstr67_main+2
0x2FA6	0x3420 ;?ICS?lstr67_main+3
0x2FA7	0x3420 ;?ICS?lstr67_main+4
0x2FA8	0x3420 ;?ICS?lstr67_main+5
0x2FA9	0x3420 ;?ICS?lstr67_main+6
0x2FAA	0x3420 ;?ICS?lstr67_main+7
0x2FAB	0x3400 ;?ICS?lstr67_main+8
; end of ?ICS?lstr67_main
;main.c,0 :: ?ICS?lstr80_main
0x2FAC	0x3453 ;?ICS?lstr80_main+0
0x2FAD	0x3457 ;?ICS?lstr80_main+1
0x2FAE	0x3452 ;?ICS?lstr80_main+2
0x2FAF	0x343D ;?ICS?lstr80_main+3
0x2FB0	0x3420 ;?ICS?lstr80_main+4
0x2FB1	0x3420 ;?ICS?lstr80_main+5
0x2FB2	0x3420 ;?ICS?lstr80_main+6
0x2FB3	0x3420 ;?ICS?lstr80_main+7
0x2FB4	0x3400 ;?ICS?lstr80_main+8
; end of ?ICS?lstr80_main
;main.c,0 :: ?ICS_SWR_old
0x2FB5	0x3410 ;?ICS_SWR_old+0
0x2FB6	0x3427 ;?ICS_SWR_old+1
; end of ?ICS_SWR_old
;main.c,0 :: ?ICS?lstr79_main
0x2FB7	0x3420 ;?ICS?lstr79_main+0
0x2FB8	0x3420 ;?ICS?lstr79_main+1
0x2FB9	0x3420 ;?ICS?lstr79_main+2
0x2FBA	0x3420 ;?ICS?lstr79_main+3
0x2FBB	0x3420 ;?ICS?lstr79_main+4
0x2FBC	0x3420 ;?ICS?lstr79_main+5
0x2FBD	0x3420 ;?ICS?lstr79_main+6
0x2FBE	0x3420 ;?ICS?lstr79_main+7
0x2FBF	0x3400 ;?ICS?lstr79_main+8
; end of ?ICS?lstr79_main
;main.c,0 :: ?ICS?lstr78_main
0x2FC0	0x344F ;?ICS?lstr78_main+0
0x2FC1	0x3456 ;?ICS?lstr78_main+1
0x2FC2	0x3445 ;?ICS?lstr78_main+2
0x2FC3	0x3452 ;?ICS?lstr78_main+3
0x2FC4	0x344C ;?ICS?lstr78_main+4
0x2FC5	0x344F ;?ICS?lstr78_main+5
0x2FC6	0x3441 ;?ICS?lstr78_main+6
0x2FC7	0x3444 ;?ICS?lstr78_main+7
0x2FC8	0x3400 ;?ICS?lstr78_main+8
; end of ?ICS?lstr78_main
;main.c,0 :: ?ICS?lstr23_main
0x2FC9	0x344D ;?ICS?lstr23_main+0
0x2FCA	0x3441 ;?ICS?lstr23_main+1
0x2FCB	0x344E ;?ICS?lstr23_main+2
0x2FCC	0x3455 ;?ICS?lstr23_main+3
0x2FCD	0x3441 ;?ICS?lstr23_main+4
0x2FCE	0x344C ;?ICS?lstr23_main+5
0x2FCF	0x3420 ;?ICS?lstr23_main+6
0x2FD0	0x3420 ;?ICS?lstr23_main+7
0x2FD1	0x3400 ;?ICS?lstr23_main+8
; end of ?ICS?lstr23_main
;main.c,0 :: ?ICS?lstr22_main
0x2FD2	0x3463 ;?ICS?lstr22_main+0
0x2FD3	0x3400 ;?ICS?lstr22_main+1
; end of ?ICS?lstr22_main
;main.c,0 :: ?ICS?lstr21_main
0x2FD4	0x346C ;?ICS?lstr21_main+0
0x2FD5	0x3400 ;?ICS?lstr21_main+1
; end of ?ICS?lstr21_main
;main.c,0 :: ?ICS?lstr24_main
0x2FD6	0x3453 ;?ICS?lstr24_main+0
0x2FD7	0x3457 ;?ICS?lstr24_main+1
0x2FD8	0x3452 ;?ICS?lstr24_main+2
0x2FD9	0x343D ;?ICS?lstr24_main+3
0x2FDA	0x3430 ;?ICS?lstr24_main+4
0x2FDB	0x342E ;?ICS?lstr24_main+5
0x2FDC	0x3430 ;?ICS?lstr24_main+6
0x2FDD	0x3430 ;?ICS?lstr24_main+7
0x2FDE	0x3400 ;?ICS?lstr24_main+8
; end of ?ICS?lstr24_main
;main.c,0 :: ?ICS?lstr27_main
0x2FDF	0x342E ;?ICS?lstr27_main+0
0x2FE0	0x3400 ;?ICS?lstr27_main+1
; end of ?ICS?lstr27_main
;main.c,0 :: ?ICS?lstr26_main
0x2FE1	0x3463 ;?ICS?lstr26_main+0
0x2FE2	0x3400 ;?ICS?lstr26_main+1
; end of ?ICS?lstr26_main
;main.c,0 :: ?ICS?lstr25_main
0x2FE3	0x346C ;?ICS?lstr25_main+0
0x2FE4	0x3400 ;?ICS?lstr25_main+1
; end of ?ICS?lstr25_main
;main.c,0 :: ?ICS?lstr34_main
0x2FE5	0x3453 ;?ICS?lstr34_main+0
0x2FE6	0x3457 ;?ICS?lstr34_main+1
0x2FE7	0x3452 ;?ICS?lstr34_main+2
0x2FE8	0x343D ;?ICS?lstr34_main+3
0x2FE9	0x3430 ;?ICS?lstr34_main+4
0x2FEA	0x342E ;?ICS?lstr34_main+5
0x2FEB	0x3430 ;?ICS?lstr34_main+6
0x2FEC	0x3430 ;?ICS?lstr34_main+7
0x2FED	0x3400 ;?ICS?lstr34_main+8
; end of ?ICS?lstr34_main
;main.c,0 :: ?ICS?lstr36_main
0x2FEE	0x3453 ;?ICS?lstr36_main+0
0x2FEF	0x3457 ;?ICS?lstr36_main+1
0x2FF0	0x3452 ;?ICS?lstr36_main+2
0x2FF1	0x343D ;?ICS?lstr36_main+3
0x2FF2	0x3430 ;?ICS?lstr36_main+4
0x2FF3	0x342E ;?ICS?lstr36_main+5
0x2FF4	0x3430 ;?ICS?lstr36_main+6
0x2FF5	0x3430 ;?ICS?lstr36_main+7
0x2FF6	0x3400 ;?ICS?lstr36_main+8
; end of ?ICS?lstr36_main
;main.c,0 :: ?ICS?lstr35_main
0x2FF7	0x3452 ;?ICS?lstr35_main+0
0x2FF8	0x3445 ;?ICS?lstr35_main+1
0x2FF9	0x3453 ;?ICS?lstr35_main+2
0x2FFA	0x3445 ;?ICS?lstr35_main+3
0x2FFB	0x3454 ;?ICS?lstr35_main+4
0x2FFC	0x3420 ;?ICS?lstr35_main+5
0x2FFD	0x3420 ;?ICS?lstr35_main+6
0x2FFE	0x3420 ;?ICS?lstr35_main+7
0x2FFF	0x3400 ;?ICS?lstr35_main+8
; end of ?ICS?lstr35_main
;main.c,0 :: ?ICS?lstr105_main
0x3761	0x344C ;?ICS?lstr105_main+0
0x3762	0x346F ;?ICS?lstr105_main+1
0x3763	0x3473 ;?ICS?lstr105_main+2
0x3764	0x3473 ;?ICS?lstr105_main+3
0x3765	0x3465 ;?ICS?lstr105_main+4
0x3766	0x3473 ;?ICS?lstr105_main+5
0x3767	0x3420 ;?ICS?lstr105_main+6
0x3768	0x3420 ;?ICS?lstr105_main+7
0x3769	0x3400 ;?ICS?lstr105_main+8
; end of ?ICS?lstr105_main
;main.c,0 :: ?ICS?lstr104_main
0x376A	0x3453 ;?ICS?lstr104_main+0
0x376B	0x3463 ;?ICS?lstr104_main+1
0x376C	0x3472 ;?ICS?lstr104_main+2
0x376D	0x3444 ;?ICS?lstr104_main+3
0x376E	0x3465 ;?ICS?lstr104_main+4
0x376F	0x346C ;?ICS?lstr104_main+5
0x3770	0x3420 ;?ICS?lstr104_main+6
0x3771	0x3400 ;?ICS?lstr104_main+7
; end of ?ICS?lstr104_main
;main.c,0 :: ?ICS?lstr100_main
0x3772	0x344D ;?ICS?lstr100_main+0
0x3773	0x3469 ;?ICS?lstr100_main+1
0x3774	0x346E ;?ICS?lstr100_main+2
0x3775	0x3420 ;?ICS?lstr100_main+3
0x3776	0x3453 ;?ICS?lstr100_main+4
0x3777	0x3457 ;?ICS?lstr100_main+5
0x3778	0x3452 ;?ICS?lstr100_main+6
0x3779	0x3420 ;?ICS?lstr100_main+7
0x377A	0x3420 ;?ICS?lstr100_main+8
0x377B	0x3400 ;?ICS?lstr100_main+9
; end of ?ICS?lstr100_main
;main.c,0 :: ?ICS?lstr95_main
0x377C	0x3420 ;?ICS?lstr95_main+0
0x377D	0x3420 ;?ICS?lstr95_main+1
0x377E	0x3420 ;?ICS?lstr95_main+2
0x377F	0x3420 ;?ICS?lstr95_main+3
0x3780	0x3420 ;?ICS?lstr95_main+4
0x3781	0x3420 ;?ICS?lstr95_main+5
0x3782	0x3420 ;?ICS?lstr95_main+6
0x3783	0x3420 ;?ICS?lstr95_main+7
0x3784	0x3420 ;?ICS?lstr95_main+8
0x3785	0x3420 ;?ICS?lstr95_main+9
0x3786	0x3400 ;?ICS?lstr95_main+10
; end of ?ICS?lstr95_main
;main.c,0 :: ?ICS?lstr94_main
0x3787	0x3420 ;?ICS?lstr94_main+0
0x3788	0x3420 ;?ICS?lstr94_main+1
0x3789	0x3420 ;?ICS?lstr94_main+2
0x378A	0x3420 ;?ICS?lstr94_main+3
0x378B	0x3420 ;?ICS?lstr94_main+4
0x378C	0x3420 ;?ICS?lstr94_main+5
0x378D	0x3420 ;?ICS?lstr94_main+6
0x378E	0x3420 ;?ICS?lstr94_main+7
0x378F	0x3420 ;?ICS?lstr94_main+8
0x3790	0x3420 ;?ICS?lstr94_main+9
0x3791	0x3400 ;?ICS?lstr94_main+10
; end of ?ICS?lstr94_main
;main.c,0 :: ?ICS?lstr93_main
0x3792	0x3420 ;?ICS?lstr93_main+0
0x3793	0x3420 ;?ICS?lstr93_main+1
0x3794	0x3420 ;?ICS?lstr93_main+2
0x3795	0x3420 ;?ICS?lstr93_main+3
0x3796	0x3420 ;?ICS?lstr93_main+4
0x3797	0x3420 ;?ICS?lstr93_main+5
0x3798	0x3420 ;?ICS?lstr93_main+6
0x3799	0x3420 ;?ICS?lstr93_main+7
0x379A	0x3420 ;?ICS?lstr93_main+8
0x379B	0x3420 ;?ICS?lstr93_main+9
0x379C	0x3400 ;?ICS?lstr93_main+10
; end of ?ICS?lstr93_main
;main.c,0 :: ?ICS?lstr96_main
0x379D	0x3420 ;?ICS?lstr96_main+0
0x379E	0x3420 ;?ICS?lstr96_main+1
0x379F	0x3420 ;?ICS?lstr96_main+2
0x37A0	0x3420 ;?ICS?lstr96_main+3
0x37A1	0x3420 ;?ICS?lstr96_main+4
0x37A2	0x3420 ;?ICS?lstr96_main+5
0x37A3	0x3420 ;?ICS?lstr96_main+6
0x37A4	0x3420 ;?ICS?lstr96_main+7
0x37A5	0x3420 ;?ICS?lstr96_main+8
0x37A6	0x3420 ;?ICS?lstr96_main+9
0x37A7	0x3400 ;?ICS?lstr96_main+10
; end of ?ICS?lstr96_main
;main.c,0 :: ?ICSmain_Overload
0x37A8	0x3400 ;?ICSmain_Overload+0
; end of ?ICSmain_Overload
;main.c,0 :: ?ICS?lstr92_main
0x37A9	0x3470 ;?ICS?lstr92_main+0
0x37AA	0x3400 ;?ICS?lstr92_main+1
; end of ?ICS?lstr92_main
;main.c,0 :: ?ICS_Dysp_delay
0x37AB	0x3400 ;?ICS_Dysp_delay+0
; end of ?ICS_Dysp_delay
;main.c,0 :: ?ICS_dysp_cnt
0x37AC	0x3400 ;?ICS_dysp_cnt+0
0x37AD	0x3400 ;?ICS_dysp_cnt+1
; end of ?ICS_dysp_cnt
;main.c,0 :: ?ICS_Power
0x37AE	0x3400 ;?ICS_Power+0
0x37AF	0x3400 ;?ICS_Power+1
; end of ?ICS_Power
;main.c,0 :: ?ICSmain_ind
0x37B0	0x3400 ;?ICSmain_ind+0
; end of ?ICSmain_ind
;main.c,0 :: ?ICSmain_P_High
0x37B1	0x3400 ;?ICSmain_P_High+0
; end of ?ICSmain_P_High
;main.c,0 :: ?ICSmain_K_Mult
0x37B2	0x3420 ;?ICSmain_K_Mult+0
; end of ?ICSmain_K_Mult
;main.c,0 :: ?ICSmain_D_correction
0x37B3	0x3401 ;?ICSmain_D_correction+0
; end of ?ICSmain_D_correction
;main.c,0 :: ?ICS_but
0x37B4	0x3400 ;?ICS_but+0
; end of ?ICS_but
;main.c,0 :: ?ICS?lstr83_main
0x37B5	0x344C ;?ICS?lstr83_main+0
0x37B6	0x343D ;?ICS?lstr83_main+1
0x37B7	0x3400 ;?ICS?lstr83_main+2
; end of ?ICS?lstr83_main
;main.c,0 :: ?ICS?lstr82_main
0x37B8	0x3475 ;?ICS?lstr82_main+0
0x37B9	0x3448 ;?ICS?lstr82_main+1
0x37BA	0x3400 ;?ICS?lstr82_main+2
; end of ?ICS?lstr82_main
;main.c,0 :: ?ICS?lstr81_main
0x37BB	0x344C ;?ICS?lstr81_main+0
0x37BC	0x343D ;?ICS?lstr81_main+1
0x37BD	0x3400 ;?ICS?lstr81_main+2
; end of ?ICS?lstr81_main
;main.c,0 :: ?ICS?lstr86_main
0x37BE	0x3475 ;?ICS?lstr86_main+0
0x37BF	0x3400 ;?ICS?lstr86_main+1
; end of ?ICS?lstr86_main
;main.c,0 :: ?ICS?lstr85_main
0x37C0	0x344C ;?ICS?lstr85_main+0
0x37C1	0x343D ;?ICS?lstr85_main+1
0x37C2	0x3400 ;?ICS?lstr85_main+2
; end of ?ICS?lstr85_main
;main.c,0 :: ?ICS?lstr84_main
0x37C3	0x3475 ;?ICS?lstr84_main+0
0x37C4	0x3448 ;?ICS?lstr84_main+1
0x37C5	0x3400 ;?ICS?lstr84_main+2
; end of ?ICS?lstr84_main
;main.c,0 :: ?ICSmain_SW
0x37C6	0x3400 ;?ICSmain_SW+0
; end of ?ICSmain_SW
;main.c,0 :: ?ICSmain_L_invert
0x37C7	0x3400 ;?ICSmain_L_invert+0
; end of ?ICSmain_L_invert
;main.c,0 :: ?ICSmain_C_mult
0x37C8	0x3401 ;?ICSmain_C_mult+0
; end of ?ICSmain_C_mult
;main.c,0 :: ?ICSmain_step_cap
0x37C9	0x3400 ;?ICSmain_step_cap+0
; end of ?ICSmain_step_cap
;main.c,0 :: ?ICS?lstr77_main
0x37CA	0x3420 ;?ICS?lstr77_main+0
0x37CB	0x3420 ;?ICS?lstr77_main+1
0x37CC	0x3420 ;?ICS?lstr77_main+2
0x37CD	0x3420 ;?ICS?lstr77_main+3
0x37CE	0x3420 ;?ICS?lstr77_main+4
0x37CF	0x3420 ;?ICS?lstr77_main+5
0x37D0	0x3420 ;?ICS?lstr77_main+6
0x37D1	0x3420 ;?ICS?lstr77_main+7
0x37D2	0x3400 ;?ICS?lstr77_main+8
; end of ?ICS?lstr77_main
;main.c,0 :: ?ICS?lstr72_main
0x37D3	0x3453 ;?ICS?lstr72_main+0
0x37D4	0x3457 ;?ICS?lstr72_main+1
0x37D5	0x3452 ;?ICS?lstr72_main+2
0x37D6	0x343D ;?ICS?lstr72_main+3
0x37D7	0x3420 ;?ICS?lstr72_main+4
0x37D8	0x3420 ;?ICS?lstr72_main+5
0x37D9	0x3420 ;?ICS?lstr72_main+6
0x37DA	0x3420 ;?ICS?lstr72_main+7
0x37DB	0x3400 ;?ICS?lstr72_main+8
; end of ?ICS?lstr72_main
;main.c,0 :: ?ICS?lstr71_main
0x37DC	0x3420 ;?ICS?lstr71_main+0
0x37DD	0x3420 ;?ICS?lstr71_main+1
0x37DE	0x3420 ;?ICS?lstr71_main+2
0x37DF	0x3420 ;?ICS?lstr71_main+3
0x37E0	0x3420 ;?ICS?lstr71_main+4
0x37E1	0x3420 ;?ICS?lstr71_main+5
0x37E2	0x3420 ;?ICS?lstr71_main+6
0x37E3	0x3420 ;?ICS?lstr71_main+7
0x37E4	0x3400 ;?ICS?lstr71_main+8
; end of ?ICS?lstr71_main
;main.c,0 :: ?ICS?lstr73_main
0x37E5	0x3420 ;?ICS?lstr73_main+0
0x37E6	0x3420 ;?ICS?lstr73_main+1
0x37E7	0x3420 ;?ICS?lstr73_main+2
0x37E8	0x3420 ;?ICS?lstr73_main+3
0x37E9	0x3420 ;?ICS?lstr73_main+4
0x37EA	0x3420 ;?ICS?lstr73_main+5
0x37EB	0x3420 ;?ICS?lstr73_main+6
0x37EC	0x3420 ;?ICS?lstr73_main+7
0x37ED	0x3400 ;?ICS?lstr73_main+8
; end of ?ICS?lstr73_main
;main.c,0 :: ?ICS?lstr69_main
0x37EE	0x3420 ;?ICS?lstr69_main+0
0x37EF	0x3420 ;?ICS?lstr69_main+1
0x37F0	0x3420 ;?ICS?lstr69_main+2
0x37F1	0x3420 ;?ICS?lstr69_main+3
0x37F2	0x3420 ;?ICS?lstr69_main+4
0x37F3	0x3420 ;?ICS?lstr69_main+5
0x37F4	0x3420 ;?ICS?lstr69_main+6
0x37F5	0x3420 ;?ICS?lstr69_main+7
0x37F6	0x3400 ;?ICS?lstr69_main+8
; end of ?ICS?lstr69_main
;main.c,0 :: ?ICS?lstr68_main
0x37F7	0x344F ;?ICS?lstr68_main+0
0x37F8	0x3456 ;?ICS?lstr68_main+1
0x37F9	0x3445 ;?ICS?lstr68_main+2
0x37FA	0x3452 ;?ICS?lstr68_main+3
0x37FB	0x344C ;?ICS?lstr68_main+4
0x37FC	0x344F ;?ICS?lstr68_main+5
0x37FD	0x3441 ;?ICS?lstr68_main+6
0x37FE	0x3444 ;?ICS?lstr68_main+7
0x37FF	0x3400 ;?ICS?lstr68_main+8
; end of ?ICS?lstr68_main
;oled_control.c,1 :: oled_control_font5x8
0x3B43	0x3400 ;oled_control_font5x8+0
0x3B44	0x3400 ;oled_control_font5x8+1
0x3B45	0x3400 ;oled_control_font5x8+2
0x3B46	0x3400 ;oled_control_font5x8+3
0x3B47	0x3400 ;oled_control_font5x8+4
0x3B48	0x3400 ;oled_control_font5x8+5
0x3B49	0x3400 ;oled_control_font5x8+6
0x3B4A	0x345F ;oled_control_font5x8+7
0x3B4B	0x3400 ;oled_control_font5x8+8
0x3B4C	0x3400 ;oled_control_font5x8+9
0x3B4D	0x3400 ;oled_control_font5x8+10
0x3B4E	0x3407 ;oled_control_font5x8+11
0x3B4F	0x3400 ;oled_control_font5x8+12
0x3B50	0x3407 ;oled_control_font5x8+13
0x3B51	0x3400 ;oled_control_font5x8+14
0x3B52	0x3414 ;oled_control_font5x8+15
0x3B53	0x347F ;oled_control_font5x8+16
0x3B54	0x3414 ;oled_control_font5x8+17
0x3B55	0x347F ;oled_control_font5x8+18
0x3B56	0x3414 ;oled_control_font5x8+19
0x3B57	0x3424 ;oled_control_font5x8+20
0x3B58	0x342A ;oled_control_font5x8+21
0x3B59	0x347F ;oled_control_font5x8+22
0x3B5A	0x342A ;oled_control_font5x8+23
0x3B5B	0x3412 ;oled_control_font5x8+24
0x3B5C	0x3423 ;oled_control_font5x8+25
0x3B5D	0x3413 ;oled_control_font5x8+26
0x3B5E	0x3408 ;oled_control_font5x8+27
0x3B5F	0x3464 ;oled_control_font5x8+28
0x3B60	0x3462 ;oled_control_font5x8+29
0x3B61	0x3436 ;oled_control_font5x8+30
0x3B62	0x3449 ;oled_control_font5x8+31
0x3B63	0x3455 ;oled_control_font5x8+32
0x3B64	0x3422 ;oled_control_font5x8+33
0x3B65	0x3450 ;oled_control_font5x8+34
0x3B66	0x3400 ;oled_control_font5x8+35
0x3B67	0x3405 ;oled_control_font5x8+36
0x3B68	0x3403 ;oled_control_font5x8+37
0x3B69	0x3400 ;oled_control_font5x8+38
0x3B6A	0x3400 ;oled_control_font5x8+39
0x3B6B	0x3400 ;oled_control_font5x8+40
0x3B6C	0x341C ;oled_control_font5x8+41
0x3B6D	0x3422 ;oled_control_font5x8+42
0x3B6E	0x3441 ;oled_control_font5x8+43
0x3B6F	0x3400 ;oled_control_font5x8+44
0x3B70	0x3400 ;oled_control_font5x8+45
0x3B71	0x3441 ;oled_control_font5x8+46
0x3B72	0x3422 ;oled_control_font5x8+47
0x3B73	0x341C ;oled_control_font5x8+48
0x3B74	0x3400 ;oled_control_font5x8+49
0x3B75	0x3408 ;oled_control_font5x8+50
0x3B76	0x342A ;oled_control_font5x8+51
0x3B77	0x341C ;oled_control_font5x8+52
0x3B78	0x342A ;oled_control_font5x8+53
0x3B79	0x3408 ;oled_control_font5x8+54
0x3B7A	0x3408 ;oled_control_font5x8+55
0x3B7B	0x3408 ;oled_control_font5x8+56
0x3B7C	0x343E ;oled_control_font5x8+57
0x3B7D	0x3408 ;oled_control_font5x8+58
0x3B7E	0x3408 ;oled_control_font5x8+59
0x3B7F	0x3400 ;oled_control_font5x8+60
0x3B80	0x3450 ;oled_control_font5x8+61
0x3B81	0x3430 ;oled_control_font5x8+62
0x3B82	0x3400 ;oled_control_font5x8+63
0x3B83	0x3400 ;oled_control_font5x8+64
0x3B84	0x3408 ;oled_control_font5x8+65
0x3B85	0x3408 ;oled_control_font5x8+66
0x3B86	0x3408 ;oled_control_font5x8+67
0x3B87	0x3408 ;oled_control_font5x8+68
0x3B88	0x3408 ;oled_control_font5x8+69
0x3B89	0x3400 ;oled_control_font5x8+70
0x3B8A	0x3430 ;oled_control_font5x8+71
0x3B8B	0x3430 ;oled_control_font5x8+72
0x3B8C	0x3400 ;oled_control_font5x8+73
0x3B8D	0x3400 ;oled_control_font5x8+74
0x3B8E	0x3420 ;oled_control_font5x8+75
0x3B8F	0x3410 ;oled_control_font5x8+76
0x3B90	0x3408 ;oled_control_font5x8+77
0x3B91	0x3404 ;oled_control_font5x8+78
0x3B92	0x3402 ;oled_control_font5x8+79
0x3B93	0x343E ;oled_control_font5x8+80
0x3B94	0x3451 ;oled_control_font5x8+81
0x3B95	0x3449 ;oled_control_font5x8+82
0x3B96	0x3445 ;oled_control_font5x8+83
0x3B97	0x343E ;oled_control_font5x8+84
0x3B98	0x3400 ;oled_control_font5x8+85
0x3B99	0x3442 ;oled_control_font5x8+86
0x3B9A	0x347F ;oled_control_font5x8+87
0x3B9B	0x3440 ;oled_control_font5x8+88
0x3B9C	0x3400 ;oled_control_font5x8+89
0x3B9D	0x3442 ;oled_control_font5x8+90
0x3B9E	0x3461 ;oled_control_font5x8+91
0x3B9F	0x3451 ;oled_control_font5x8+92
0x3BA0	0x3449 ;oled_control_font5x8+93
0x3BA1	0x3446 ;oled_control_font5x8+94
0x3BA2	0x3421 ;oled_control_font5x8+95
0x3BA3	0x3441 ;oled_control_font5x8+96
0x3BA4	0x3445 ;oled_control_font5x8+97
0x3BA5	0x344B ;oled_control_font5x8+98
0x3BA6	0x3431 ;oled_control_font5x8+99
0x3BA7	0x3418 ;oled_control_font5x8+100
0x3BA8	0x3414 ;oled_control_font5x8+101
0x3BA9	0x3412 ;oled_control_font5x8+102
0x3BAA	0x347F ;oled_control_font5x8+103
0x3BAB	0x3410 ;oled_control_font5x8+104
0x3BAC	0x3427 ;oled_control_font5x8+105
0x3BAD	0x3445 ;oled_control_font5x8+106
0x3BAE	0x3445 ;oled_control_font5x8+107
0x3BAF	0x3445 ;oled_control_font5x8+108
0x3BB0	0x3439 ;oled_control_font5x8+109
0x3BB1	0x343C ;oled_control_font5x8+110
0x3BB2	0x344A ;oled_control_font5x8+111
0x3BB3	0x3449 ;oled_control_font5x8+112
0x3BB4	0x3449 ;oled_control_font5x8+113
0x3BB5	0x3430 ;oled_control_font5x8+114
0x3BB6	0x3401 ;oled_control_font5x8+115
0x3BB7	0x3471 ;oled_control_font5x8+116
0x3BB8	0x3409 ;oled_control_font5x8+117
0x3BB9	0x3405 ;oled_control_font5x8+118
0x3BBA	0x3403 ;oled_control_font5x8+119
0x3BBB	0x3436 ;oled_control_font5x8+120
0x3BBC	0x3449 ;oled_control_font5x8+121
0x3BBD	0x3449 ;oled_control_font5x8+122
0x3BBE	0x3449 ;oled_control_font5x8+123
0x3BBF	0x3436 ;oled_control_font5x8+124
0x3BC0	0x3406 ;oled_control_font5x8+125
0x3BC1	0x3449 ;oled_control_font5x8+126
0x3BC2	0x3449 ;oled_control_font5x8+127
0x3BC3	0x3429 ;oled_control_font5x8+128
0x3BC4	0x341E ;oled_control_font5x8+129
0x3BC5	0x3400 ;oled_control_font5x8+130
0x3BC6	0x3436 ;oled_control_font5x8+131
0x3BC7	0x3436 ;oled_control_font5x8+132
0x3BC8	0x3400 ;oled_control_font5x8+133
0x3BC9	0x3400 ;oled_control_font5x8+134
0x3BCA	0x3400 ;oled_control_font5x8+135
0x3BCB	0x3456 ;oled_control_font5x8+136
0x3BCC	0x3436 ;oled_control_font5x8+137
0x3BCD	0x3400 ;oled_control_font5x8+138
0x3BCE	0x3400 ;oled_control_font5x8+139
0x3BCF	0x3400 ;oled_control_font5x8+140
0x3BD0	0x3408 ;oled_control_font5x8+141
0x3BD1	0x3414 ;oled_control_font5x8+142
0x3BD2	0x3422 ;oled_control_font5x8+143
0x3BD3	0x3441 ;oled_control_font5x8+144
0x3BD4	0x3414 ;oled_control_font5x8+145
0x3BD5	0x3414 ;oled_control_font5x8+146
0x3BD6	0x3414 ;oled_control_font5x8+147
0x3BD7	0x3414 ;oled_control_font5x8+148
0x3BD8	0x3414 ;oled_control_font5x8+149
0x3BD9	0x3441 ;oled_control_font5x8+150
0x3BDA	0x3422 ;oled_control_font5x8+151
0x3BDB	0x3414 ;oled_control_font5x8+152
0x3BDC	0x3408 ;oled_control_font5x8+153
0x3BDD	0x3400 ;oled_control_font5x8+154
0x3BDE	0x3402 ;oled_control_font5x8+155
0x3BDF	0x3401 ;oled_control_font5x8+156
0x3BE0	0x3451 ;oled_control_font5x8+157
0x3BE1	0x3409 ;oled_control_font5x8+158
0x3BE2	0x3406 ;oled_control_font5x8+159
0x3BE3	0x3432 ;oled_control_font5x8+160
0x3BE4	0x3449 ;oled_control_font5x8+161
0x3BE5	0x3479 ;oled_control_font5x8+162
0x3BE6	0x3441 ;oled_control_font5x8+163
0x3BE7	0x343E ;oled_control_font5x8+164
0x3BE8	0x347E ;oled_control_font5x8+165
0x3BE9	0x3411 ;oled_control_font5x8+166
0x3BEA	0x3411 ;oled_control_font5x8+167
0x3BEB	0x3411 ;oled_control_font5x8+168
0x3BEC	0x347E ;oled_control_font5x8+169
0x3BED	0x347F ;oled_control_font5x8+170
0x3BEE	0x3449 ;oled_control_font5x8+171
0x3BEF	0x3449 ;oled_control_font5x8+172
0x3BF0	0x3449 ;oled_control_font5x8+173
0x3BF1	0x3436 ;oled_control_font5x8+174
0x3BF2	0x343E ;oled_control_font5x8+175
0x3BF3	0x3441 ;oled_control_font5x8+176
0x3BF4	0x3441 ;oled_control_font5x8+177
0x3BF5	0x3441 ;oled_control_font5x8+178
0x3BF6	0x3422 ;oled_control_font5x8+179
0x3BF7	0x347F ;oled_control_font5x8+180
0x3BF8	0x3441 ;oled_control_font5x8+181
0x3BF9	0x3441 ;oled_control_font5x8+182
0x3BFA	0x3422 ;oled_control_font5x8+183
0x3BFB	0x341C ;oled_control_font5x8+184
0x3BFC	0x347F ;oled_control_font5x8+185
0x3BFD	0x3449 ;oled_control_font5x8+186
0x3BFE	0x3449 ;oled_control_font5x8+187
0x3BFF	0x3449 ;oled_control_font5x8+188
0x3C00	0x3441 ;oled_control_font5x8+189
0x3C01	0x347F ;oled_control_font5x8+190
0x3C02	0x3409 ;oled_control_font5x8+191
0x3C03	0x3409 ;oled_control_font5x8+192
0x3C04	0x3401 ;oled_control_font5x8+193
0x3C05	0x3401 ;oled_control_font5x8+194
0x3C06	0x343E ;oled_control_font5x8+195
0x3C07	0x3441 ;oled_control_font5x8+196
0x3C08	0x3441 ;oled_control_font5x8+197
0x3C09	0x3451 ;oled_control_font5x8+198
0x3C0A	0x3432 ;oled_control_font5x8+199
0x3C0B	0x347F ;oled_control_font5x8+200
0x3C0C	0x3408 ;oled_control_font5x8+201
0x3C0D	0x3408 ;oled_control_font5x8+202
0x3C0E	0x3408 ;oled_control_font5x8+203
0x3C0F	0x347F ;oled_control_font5x8+204
0x3C10	0x3400 ;oled_control_font5x8+205
0x3C11	0x3441 ;oled_control_font5x8+206
0x3C12	0x347F ;oled_control_font5x8+207
0x3C13	0x3441 ;oled_control_font5x8+208
0x3C14	0x3400 ;oled_control_font5x8+209
0x3C15	0x3420 ;oled_control_font5x8+210
0x3C16	0x3440 ;oled_control_font5x8+211
0x3C17	0x3441 ;oled_control_font5x8+212
0x3C18	0x343F ;oled_control_font5x8+213
0x3C19	0x3401 ;oled_control_font5x8+214
0x3C1A	0x347F ;oled_control_font5x8+215
0x3C1B	0x3408 ;oled_control_font5x8+216
0x3C1C	0x3414 ;oled_control_font5x8+217
0x3C1D	0x3422 ;oled_control_font5x8+218
0x3C1E	0x3441 ;oled_control_font5x8+219
0x3C1F	0x347F ;oled_control_font5x8+220
0x3C20	0x3440 ;oled_control_font5x8+221
0x3C21	0x3440 ;oled_control_font5x8+222
0x3C22	0x3440 ;oled_control_font5x8+223
0x3C23	0x3440 ;oled_control_font5x8+224
0x3C24	0x347F ;oled_control_font5x8+225
0x3C25	0x3402 ;oled_control_font5x8+226
0x3C26	0x3404 ;oled_control_font5x8+227
0x3C27	0x3402 ;oled_control_font5x8+228
0x3C28	0x347F ;oled_control_font5x8+229
0x3C29	0x347F ;oled_control_font5x8+230
0x3C2A	0x3404 ;oled_control_font5x8+231
0x3C2B	0x3408 ;oled_control_font5x8+232
0x3C2C	0x3410 ;oled_control_font5x8+233
0x3C2D	0x347F ;oled_control_font5x8+234
0x3C2E	0x343E ;oled_control_font5x8+235
0x3C2F	0x3441 ;oled_control_font5x8+236
0x3C30	0x3441 ;oled_control_font5x8+237
0x3C31	0x3441 ;oled_control_font5x8+238
0x3C32	0x343E ;oled_control_font5x8+239
0x3C33	0x347F ;oled_control_font5x8+240
0x3C34	0x3409 ;oled_control_font5x8+241
0x3C35	0x3409 ;oled_control_font5x8+242
0x3C36	0x3409 ;oled_control_font5x8+243
0x3C37	0x3406 ;oled_control_font5x8+244
0x3C38	0x343E ;oled_control_font5x8+245
0x3C39	0x3441 ;oled_control_font5x8+246
0x3C3A	0x3451 ;oled_control_font5x8+247
0x3C3B	0x3421 ;oled_control_font5x8+248
0x3C3C	0x345E ;oled_control_font5x8+249
0x3C3D	0x347F ;oled_control_font5x8+250
0x3C3E	0x3409 ;oled_control_font5x8+251
0x3C3F	0x3419 ;oled_control_font5x8+252
0x3C40	0x3429 ;oled_control_font5x8+253
0x3C41	0x3446 ;oled_control_font5x8+254
0x3C42	0x3446 ;oled_control_font5x8+255
0x3C43	0x3449 ;oled_control_font5x8+256
0x3C44	0x3449 ;oled_control_font5x8+257
0x3C45	0x3449 ;oled_control_font5x8+258
0x3C46	0x3431 ;oled_control_font5x8+259
0x3C47	0x3401 ;oled_control_font5x8+260
0x3C48	0x3401 ;oled_control_font5x8+261
0x3C49	0x347F ;oled_control_font5x8+262
0x3C4A	0x3401 ;oled_control_font5x8+263
0x3C4B	0x3401 ;oled_control_font5x8+264
0x3C4C	0x343F ;oled_control_font5x8+265
0x3C4D	0x3440 ;oled_control_font5x8+266
0x3C4E	0x3440 ;oled_control_font5x8+267
0x3C4F	0x3440 ;oled_control_font5x8+268
0x3C50	0x343F ;oled_control_font5x8+269
0x3C51	0x341F ;oled_control_font5x8+270
0x3C52	0x3420 ;oled_control_font5x8+271
0x3C53	0x3440 ;oled_control_font5x8+272
0x3C54	0x3420 ;oled_control_font5x8+273
0x3C55	0x341F ;oled_control_font5x8+274
0x3C56	0x347F ;oled_control_font5x8+275
0x3C57	0x3420 ;oled_control_font5x8+276
0x3C58	0x3418 ;oled_control_font5x8+277
0x3C59	0x3420 ;oled_control_font5x8+278
0x3C5A	0x347F ;oled_control_font5x8+279
0x3C5B	0x3463 ;oled_control_font5x8+280
0x3C5C	0x3414 ;oled_control_font5x8+281
0x3C5D	0x3408 ;oled_control_font5x8+282
0x3C5E	0x3414 ;oled_control_font5x8+283
0x3C5F	0x3463 ;oled_control_font5x8+284
0x3C60	0x3403 ;oled_control_font5x8+285
0x3C61	0x3404 ;oled_control_font5x8+286
0x3C62	0x3478 ;oled_control_font5x8+287
0x3C63	0x3404 ;oled_control_font5x8+288
0x3C64	0x3403 ;oled_control_font5x8+289
0x3C65	0x3461 ;oled_control_font5x8+290
0x3C66	0x3451 ;oled_control_font5x8+291
0x3C67	0x3449 ;oled_control_font5x8+292
0x3C68	0x3445 ;oled_control_font5x8+293
0x3C69	0x3443 ;oled_control_font5x8+294
0x3C6A	0x3400 ;oled_control_font5x8+295
0x3C6B	0x3400 ;oled_control_font5x8+296
0x3C6C	0x347F ;oled_control_font5x8+297
0x3C6D	0x3441 ;oled_control_font5x8+298
0x3C6E	0x3441 ;oled_control_font5x8+299
0x3C6F	0x3402 ;oled_control_font5x8+300
0x3C70	0x3404 ;oled_control_font5x8+301
0x3C71	0x3408 ;oled_control_font5x8+302
0x3C72	0x3410 ;oled_control_font5x8+303
0x3C73	0x3420 ;oled_control_font5x8+304
0x3C74	0x3441 ;oled_control_font5x8+305
0x3C75	0x3441 ;oled_control_font5x8+306
0x3C76	0x347F ;oled_control_font5x8+307
0x3C77	0x3400 ;oled_control_font5x8+308
0x3C78	0x3400 ;oled_control_font5x8+309
0x3C79	0x3404 ;oled_control_font5x8+310
0x3C7A	0x3402 ;oled_control_font5x8+311
0x3C7B	0x3401 ;oled_control_font5x8+312
0x3C7C	0x3402 ;oled_control_font5x8+313
0x3C7D	0x3404 ;oled_control_font5x8+314
0x3C7E	0x3440 ;oled_control_font5x8+315
0x3C7F	0x3440 ;oled_control_font5x8+316
0x3C80	0x3440 ;oled_control_font5x8+317
0x3C81	0x3440 ;oled_control_font5x8+318
0x3C82	0x3440 ;oled_control_font5x8+319
0x3C83	0x3400 ;oled_control_font5x8+320
0x3C84	0x3401 ;oled_control_font5x8+321
0x3C85	0x3402 ;oled_control_font5x8+322
0x3C86	0x3404 ;oled_control_font5x8+323
0x3C87	0x3400 ;oled_control_font5x8+324
0x3C88	0x3420 ;oled_control_font5x8+325
0x3C89	0x3454 ;oled_control_font5x8+326
0x3C8A	0x3454 ;oled_control_font5x8+327
0x3C8B	0x3454 ;oled_control_font5x8+328
0x3C8C	0x3478 ;oled_control_font5x8+329
0x3C8D	0x347F ;oled_control_font5x8+330
0x3C8E	0x3448 ;oled_control_font5x8+331
0x3C8F	0x3444 ;oled_control_font5x8+332
0x3C90	0x3444 ;oled_control_font5x8+333
0x3C91	0x3438 ;oled_control_font5x8+334
0x3C92	0x3438 ;oled_control_font5x8+335
0x3C93	0x3444 ;oled_control_font5x8+336
0x3C94	0x3444 ;oled_control_font5x8+337
0x3C95	0x3444 ;oled_control_font5x8+338
0x3C96	0x3420 ;oled_control_font5x8+339
0x3C97	0x3438 ;oled_control_font5x8+340
0x3C98	0x3444 ;oled_control_font5x8+341
0x3C99	0x3444 ;oled_control_font5x8+342
0x3C9A	0x3448 ;oled_control_font5x8+343
0x3C9B	0x347F ;oled_control_font5x8+344
0x3C9C	0x3438 ;oled_control_font5x8+345
0x3C9D	0x3454 ;oled_control_font5x8+346
0x3C9E	0x3454 ;oled_control_font5x8+347
0x3C9F	0x3454 ;oled_control_font5x8+348
0x3CA0	0x3418 ;oled_control_font5x8+349
0x3CA1	0x3408 ;oled_control_font5x8+350
0x3CA2	0x347E ;oled_control_font5x8+351
0x3CA3	0x3409 ;oled_control_font5x8+352
0x3CA4	0x3401 ;oled_control_font5x8+353
0x3CA5	0x3402 ;oled_control_font5x8+354
0x3CA6	0x3408 ;oled_control_font5x8+355
0x3CA7	0x3414 ;oled_control_font5x8+356
0x3CA8	0x3454 ;oled_control_font5x8+357
0x3CA9	0x3454 ;oled_control_font5x8+358
0x3CAA	0x343C ;oled_control_font5x8+359
0x3CAB	0x347F ;oled_control_font5x8+360
0x3CAC	0x3408 ;oled_control_font5x8+361
0x3CAD	0x3404 ;oled_control_font5x8+362
0x3CAE	0x3404 ;oled_control_font5x8+363
0x3CAF	0x3478 ;oled_control_font5x8+364
0x3CB0	0x3400 ;oled_control_font5x8+365
0x3CB1	0x3444 ;oled_control_font5x8+366
0x3CB2	0x347D ;oled_control_font5x8+367
0x3CB3	0x3440 ;oled_control_font5x8+368
0x3CB4	0x3400 ;oled_control_font5x8+369
0x3CB5	0x3420 ;oled_control_font5x8+370
0x3CB6	0x3440 ;oled_control_font5x8+371
0x3CB7	0x3444 ;oled_control_font5x8+372
0x3CB8	0x343D ;oled_control_font5x8+373
0x3CB9	0x3400 ;oled_control_font5x8+374
0x3CBA	0x3400 ;oled_control_font5x8+375
0x3CBB	0x347F ;oled_control_font5x8+376
0x3CBC	0x3410 ;oled_control_font5x8+377
0x3CBD	0x3428 ;oled_control_font5x8+378
0x3CBE	0x3444 ;oled_control_font5x8+379
0x3CBF	0x3400 ;oled_control_font5x8+380
0x3CC0	0x3441 ;oled_control_font5x8+381
0x3CC1	0x347F ;oled_control_font5x8+382
0x3CC2	0x3440 ;oled_control_font5x8+383
0x3CC3	0x3400 ;oled_control_font5x8+384
0x3CC4	0x347C ;oled_control_font5x8+385
0x3CC5	0x3404 ;oled_control_font5x8+386
0x3CC6	0x3418 ;oled_control_font5x8+387
0x3CC7	0x3404 ;oled_control_font5x8+388
0x3CC8	0x3478 ;oled_control_font5x8+389
0x3CC9	0x347C ;oled_control_font5x8+390
0x3CCA	0x3408 ;oled_control_font5x8+391
0x3CCB	0x3404 ;oled_control_font5x8+392
0x3CCC	0x3404 ;oled_control_font5x8+393
0x3CCD	0x3478 ;oled_control_font5x8+394
0x3CCE	0x3438 ;oled_control_font5x8+395
0x3CCF	0x3444 ;oled_control_font5x8+396
0x3CD0	0x3444 ;oled_control_font5x8+397
0x3CD1	0x3444 ;oled_control_font5x8+398
0x3CD2	0x3438 ;oled_control_font5x8+399
0x3CD3	0x347C ;oled_control_font5x8+400
0x3CD4	0x3414 ;oled_control_font5x8+401
0x3CD5	0x3414 ;oled_control_font5x8+402
0x3CD6	0x3414 ;oled_control_font5x8+403
0x3CD7	0x3408 ;oled_control_font5x8+404
0x3CD8	0x3408 ;oled_control_font5x8+405
0x3CD9	0x3414 ;oled_control_font5x8+406
0x3CDA	0x3414 ;oled_control_font5x8+407
0x3CDB	0x3418 ;oled_control_font5x8+408
0x3CDC	0x347C ;oled_control_font5x8+409
0x3CDD	0x347C ;oled_control_font5x8+410
0x3CDE	0x3408 ;oled_control_font5x8+411
0x3CDF	0x3404 ;oled_control_font5x8+412
0x3CE0	0x3404 ;oled_control_font5x8+413
0x3CE1	0x3408 ;oled_control_font5x8+414
0x3CE2	0x3448 ;oled_control_font5x8+415
0x3CE3	0x3454 ;oled_control_font5x8+416
0x3CE4	0x3454 ;oled_control_font5x8+417
0x3CE5	0x3454 ;oled_control_font5x8+418
0x3CE6	0x3420 ;oled_control_font5x8+419
0x3CE7	0x3404 ;oled_control_font5x8+420
0x3CE8	0x343F ;oled_control_font5x8+421
0x3CE9	0x3444 ;oled_control_font5x8+422
0x3CEA	0x3440 ;oled_control_font5x8+423
0x3CEB	0x3420 ;oled_control_font5x8+424
0x3CEC	0x343C ;oled_control_font5x8+425
0x3CED	0x3440 ;oled_control_font5x8+426
0x3CEE	0x3440 ;oled_control_font5x8+427
0x3CEF	0x3420 ;oled_control_font5x8+428
0x3CF0	0x347C ;oled_control_font5x8+429
0x3CF1	0x341C ;oled_control_font5x8+430
0x3CF2	0x3420 ;oled_control_font5x8+431
0x3CF3	0x3440 ;oled_control_font5x8+432
0x3CF4	0x3420 ;oled_control_font5x8+433
0x3CF5	0x341C ;oled_control_font5x8+434
0x3CF6	0x343C ;oled_control_font5x8+435
0x3CF7	0x3440 ;oled_control_font5x8+436
0x3CF8	0x3430 ;oled_control_font5x8+437
0x3CF9	0x3440 ;oled_control_font5x8+438
0x3CFA	0x343C ;oled_control_font5x8+439
0x3CFB	0x3444 ;oled_control_font5x8+440
0x3CFC	0x3428 ;oled_control_font5x8+441
0x3CFD	0x3410 ;oled_control_font5x8+442
0x3CFE	0x3428 ;oled_control_font5x8+443
0x3CFF	0x3444 ;oled_control_font5x8+444
0x3D00	0x340C ;oled_control_font5x8+445
0x3D01	0x3450 ;oled_control_font5x8+446
0x3D02	0x3450 ;oled_control_font5x8+447
0x3D03	0x3450 ;oled_control_font5x8+448
0x3D04	0x343C ;oled_control_font5x8+449
0x3D05	0x3444 ;oled_control_font5x8+450
0x3D06	0x3464 ;oled_control_font5x8+451
0x3D07	0x3454 ;oled_control_font5x8+452
0x3D08	0x344C ;oled_control_font5x8+453
0x3D09	0x3444 ;oled_control_font5x8+454
0x3D0A	0x3400 ;oled_control_font5x8+455
0x3D0B	0x3408 ;oled_control_font5x8+456
0x3D0C	0x3436 ;oled_control_font5x8+457
0x3D0D	0x3441 ;oled_control_font5x8+458
0x3D0E	0x3400 ;oled_control_font5x8+459
0x3D0F	0x3400 ;oled_control_font5x8+460
0x3D10	0x3400 ;oled_control_font5x8+461
0x3D11	0x347F ;oled_control_font5x8+462
0x3D12	0x3400 ;oled_control_font5x8+463
0x3D13	0x3400 ;oled_control_font5x8+464
0x3D14	0x3400 ;oled_control_font5x8+465
0x3D15	0x3441 ;oled_control_font5x8+466
0x3D16	0x3436 ;oled_control_font5x8+467
0x3D17	0x3408 ;oled_control_font5x8+468
0x3D18	0x3400 ;oled_control_font5x8+469
0x3D19	0x3408 ;oled_control_font5x8+470
0x3D1A	0x3408 ;oled_control_font5x8+471
0x3D1B	0x342A ;oled_control_font5x8+472
0x3D1C	0x341C ;oled_control_font5x8+473
0x3D1D	0x3408 ;oled_control_font5x8+474
0x3D1E	0x3408 ;oled_control_font5x8+475
0x3D1F	0x341C ;oled_control_font5x8+476
0x3D20	0x342A ;oled_control_font5x8+477
0x3D21	0x3408 ;oled_control_font5x8+478
0x3D22	0x3408 ;oled_control_font5x8+479
; end of oled_control_font5x8
;main.c,0 :: ?ICS?lstr107_main
0x3D23	0x344C ;?ICS?lstr107_main+0
0x3D24	0x346F ;?ICS?lstr107_main+1
0x3D25	0x3473 ;?ICS?lstr107_main+2
0x3D26	0x3473 ;?ICS?lstr107_main+3
0x3D27	0x3420 ;?ICS?lstr107_main+4
0x3D28	0x3469 ;?ICS?lstr107_main+5
0x3D29	0x346E ;?ICS?lstr107_main+6
0x3D2A	0x3464 ;?ICS?lstr107_main+7
0x3D2B	0x3400 ;?ICS?lstr107_main+8
; end of ?ICS?lstr107_main
;main.c,0 :: ?ICS?lstr109_main
0x3D2C	0x3420 ;?ICS?lstr109_main+0
0x3D2D	0x3420 ;?ICS?lstr109_main+1
0x3D2E	0x3420 ;?ICS?lstr109_main+2
0x3D2F	0x344F ;?ICS?lstr109_main+3
0x3D30	0x3446 ;?ICS?lstr109_main+4
0x3D31	0x3446 ;?ICS?lstr109_main+5
0x3D32	0x3420 ;?ICS?lstr109_main+6
0x3D33	0x3400 ;?ICS?lstr109_main+7
; end of ?ICS?lstr109_main
;main.c,0 :: ?ICS?lstr112_main
0x3D34	0x3420 ;?ICS?lstr112_main+0
0x3D35	0x3420 ;?ICS?lstr112_main+1
0x3D36	0x3420 ;?ICS?lstr112_main+2
0x3D37	0x344F ;?ICS?lstr112_main+3
0x3D38	0x3446 ;?ICS?lstr112_main+4
0x3D39	0x3446 ;?ICS?lstr112_main+5
0x3D3A	0x3420 ;?ICS?lstr112_main+6
0x3D3B	0x3400 ;?ICS?lstr112_main+7
; end of ?ICS?lstr112_main
;main.c,0 :: ?ICS?lstr111_main
0x3D3C	0x3420 ;?ICS?lstr111_main+0
0x3D3D	0x3420 ;?ICS?lstr111_main+1
0x3D3E	0x3420 ;?ICS?lstr111_main+2
0x3D3F	0x344F ;?ICS?lstr111_main+3
0x3D40	0x344E ;?ICS?lstr111_main+4
0x3D41	0x3420 ;?ICS?lstr111_main+5
0x3D42	0x3420 ;?ICS?lstr111_main+6
0x3D43	0x3400 ;?ICS?lstr111_main+7
; end of ?ICS?lstr111_main
;main.c,0 :: ?ICS?lstr110_main
0x3D44	0x344C ;?ICS?lstr110_main+0
0x3D45	0x346F ;?ICS?lstr110_main+1
0x3D46	0x3473 ;?ICS?lstr110_main+2
0x3D47	0x3473 ;?ICS?lstr110_main+3
0x3D48	0x3420 ;?ICS?lstr110_main+4
0x3D49	0x3469 ;?ICS?lstr110_main+5
0x3D4A	0x346E ;?ICS?lstr110_main+6
0x3D4B	0x3464 ;?ICS?lstr110_main+7
0x3D4C	0x3400 ;?ICS?lstr110_main+8
; end of ?ICS?lstr110_main
;main.c,0 :: ?ICS?lstr6_main
0x3D4D	0x3453 ;?ICS?lstr6_main+0
0x3D4E	0x3457 ;?ICS?lstr6_main+1
0x3D4F	0x3452 ;?ICS?lstr6_main+2
0x3D50	0x343D ;?ICS?lstr6_main+3
0x3D51	0x3430 ;?ICS?lstr6_main+4
0x3D52	0x342E ;?ICS?lstr6_main+5
0x3D53	0x3430 ;?ICS?lstr6_main+6
0x3D54	0x3430 ;?ICS?lstr6_main+7
0x3D55	0x3400 ;?ICS?lstr6_main+8
; end of ?ICS?lstr6_main
;main.c,0 :: ?ICS?lstr48_main
0x3D56	0x3462 ;?ICS?lstr48_main+0
0x3D57	0x3479 ;?ICS?lstr48_main+1
0x3D58	0x3420 ;?ICS?lstr48_main+2
0x3D59	0x344E ;?ICS?lstr48_main+3
0x3D5A	0x3437 ;?ICS?lstr48_main+4
0x3D5B	0x3444 ;?ICS?lstr48_main+5
0x3D5C	0x3444 ;?ICS?lstr48_main+6
0x3D5D	0x3443 ;?ICS?lstr48_main+7
0x3D5E	0x3420 ;?ICS?lstr48_main+8
0x3D5F	0x3426 ;?ICS?lstr48_main+9
0x3D60	0x3420 ;?ICS?lstr48_main+10
0x3D61	0x3452 ;?ICS?lstr48_main+11
0x3D62	0x3433 ;?ICS?lstr48_main+12
0x3D63	0x3454 ;?ICS?lstr48_main+13
0x3D64	0x344A ;?ICS?lstr48_main+14
0x3D65	0x344C ;?ICS?lstr48_main+15
0x3D66	0x3400 ;?ICS?lstr48_main+16
; end of ?ICS?lstr48_main
;main.c,0 :: ?ICS?lstr47_main
0x3D67	0x3441 ;?ICS?lstr47_main+0
0x3D68	0x3454 ;?ICS?lstr47_main+1
0x3D69	0x3455 ;?ICS?lstr47_main+2
0x3D6A	0x342D ;?ICS?lstr47_main+3
0x3D6B	0x3431 ;?ICS?lstr47_main+4
0x3D6C	0x3430 ;?ICS?lstr47_main+5
0x3D6D	0x3430 ;?ICS?lstr47_main+6
0x3D6E	0x3420 ;?ICS?lstr47_main+7
0x3D6F	0x3437 ;?ICS?lstr47_main+8
0x3D70	0x3478 ;?ICS?lstr47_main+9
0x3D71	0x3437 ;?ICS?lstr47_main+10
0x3D72	0x3420 ;?ICS?lstr47_main+11
0x3D73	0x3476 ;?ICS?lstr47_main+12
0x3D74	0x3433 ;?ICS?lstr47_main+13
0x3D75	0x342E ;?ICS?lstr47_main+14
0x3D76	0x3434 ;?ICS?lstr47_main+15
0x3D77	0x3400 ;?ICS?lstr47_main+16
; end of ?ICS?lstr47_main
;main.c,0 :: ?ICS?lstr46_main
0x3D78	0x342E ;?ICS?lstr46_main+0
0x3D79	0x3400 ;?ICS?lstr46_main+1
; end of ?ICS?lstr46_main
;main.c,0 :: ?ICS?lstr57_main
0x3D7A	0x3441 ;?ICS?lstr57_main+0
0x3D7B	0x344E ;?ICS?lstr57_main+1
0x3D7C	0x3454 ;?ICS?lstr57_main+2
0x3D7D	0x343D ;?ICS?lstr57_main+3
0x3D7E	0x3430 ;?ICS?lstr57_main+4
0x3D7F	0x342E ;?ICS?lstr57_main+5
0x3D80	0x3430 ;?ICS?lstr57_main+6
0x3D81	0x3457 ;?ICS?lstr57_main+7
0x3D82	0x3400 ;?ICS?lstr57_main+8
; end of ?ICS?lstr57_main
;main.c,0 :: ?ICS?lstr1_main
0x3D83	0x346C ;?ICS?lstr1_main+0
0x3D84	0x3400 ;?ICS?lstr1_main+1
; end of ?ICS?lstr1_main
;main.c,0 :: ?ICS?lstr99_main
0x3D85	0x344D ;?ICS?lstr99_main+0
0x3D86	0x3469 ;?ICS?lstr99_main+1
0x3D87	0x346E ;?ICS?lstr99_main+2
0x3D88	0x3420 ;?ICS?lstr99_main+3
0x3D89	0x3453 ;?ICS?lstr99_main+4
0x3D8A	0x3457 ;?ICS?lstr99_main+5
0x3D8B	0x3452 ;?ICS?lstr99_main+6
0x3D8C	0x3420 ;?ICS?lstr99_main+7
0x3D8D	0x3420 ;?ICS?lstr99_main+8
0x3D8E	0x3400 ;?ICS?lstr99_main+9
; end of ?ICS?lstr99_main
;main.c,0 :: ?ICS?lstr98_main
0x3D8F	0x3420 ;?ICS?lstr98_main+0
0x3D90	0x3420 ;?ICS?lstr98_main+1
0x3D91	0x3420 ;?ICS?lstr98_main+2
0x3D92	0x3420 ;?ICS?lstr98_main+3
0x3D93	0x3420 ;?ICS?lstr98_main+4
0x3D94	0x3420 ;?ICS?lstr98_main+5
0x3D95	0x3420 ;?ICS?lstr98_main+6
0x3D96	0x3420 ;?ICS?lstr98_main+7
0x3D97	0x3420 ;?ICS?lstr98_main+8
0x3D98	0x3420 ;?ICS?lstr98_main+9
0x3D99	0x3420 ;?ICS?lstr98_main+10
0x3D9A	0x3420 ;?ICS?lstr98_main+11
0x3D9B	0x3420 ;?ICS?lstr98_main+12
0x3D9C	0x3420 ;?ICS?lstr98_main+13
0x3D9D	0x3420 ;?ICS?lstr98_main+14
0x3D9E	0x3420 ;?ICS?lstr98_main+15
0x3D9F	0x3420 ;?ICS?lstr98_main+16
0x3DA0	0x3400 ;?ICS?lstr98_main+17
; end of ?ICS?lstr98_main
;main.c,0 :: ?ICS?lstr97_main
0x3DA1	0x3420 ;?ICS?lstr97_main+0
0x3DA2	0x3420 ;?ICS?lstr97_main+1
0x3DA3	0x3420 ;?ICS?lstr97_main+2
0x3DA4	0x3420 ;?ICS?lstr97_main+3
0x3DA5	0x3420 ;?ICS?lstr97_main+4
0x3DA6	0x3420 ;?ICS?lstr97_main+5
0x3DA7	0x3420 ;?ICS?lstr97_main+6
0x3DA8	0x3420 ;?ICS?lstr97_main+7
0x3DA9	0x3420 ;?ICS?lstr97_main+8
0x3DAA	0x3420 ;?ICS?lstr97_main+9
0x3DAB	0x3420 ;?ICS?lstr97_main+10
0x3DAC	0x3420 ;?ICS?lstr97_main+11
0x3DAD	0x3420 ;?ICS?lstr97_main+12
0x3DAE	0x3420 ;?ICS?lstr97_main+13
0x3DAF	0x3420 ;?ICS?lstr97_main+14
0x3DB0	0x3420 ;?ICS?lstr97_main+15
0x3DB1	0x3420 ;?ICS?lstr97_main+16
0x3DB2	0x3400 ;?ICS?lstr97_main+17
; end of ?ICS?lstr97_main
;main.c,0 :: ?ICS?lstr41_main
0x3DB3	0x3462 ;?ICS?lstr41_main+0
0x3DB4	0x3479 ;?ICS?lstr41_main+1
0x3DB5	0x3420 ;?ICS?lstr41_main+2
0x3DB6	0x344E ;?ICS?lstr41_main+3
0x3DB7	0x3437 ;?ICS?lstr41_main+4
0x3DB8	0x3444 ;?ICS?lstr41_main+5
0x3DB9	0x3444 ;?ICS?lstr41_main+6
0x3DBA	0x3443 ;?ICS?lstr41_main+7
0x3DBB	0x3400 ;?ICS?lstr41_main+8
; end of ?ICS?lstr41_main
;main.c,0 :: ?ICS?lstr40_main
0x3DBC	0x3437 ;?ICS?lstr40_main+0
0x3DBD	0x3478 ;?ICS?lstr40_main+1
0x3DBE	0x3437 ;?ICS?lstr40_main+2
0x3DBF	0x3420 ;?ICS?lstr40_main+3
0x3DC0	0x3476 ;?ICS?lstr40_main+4
0x3DC1	0x3433 ;?ICS?lstr40_main+5
0x3DC2	0x342E ;?ICS?lstr40_main+6
0x3DC3	0x3434 ;?ICS?lstr40_main+7
0x3DC4	0x3400 ;?ICS?lstr40_main+8
; end of ?ICS?lstr40_main
;main.c,0 :: ?ICS?lstr39_main
0x3DC5	0x3420 ;?ICS?lstr39_main+0
0x3DC6	0x3441 ;?ICS?lstr39_main+1
0x3DC7	0x3454 ;?ICS?lstr39_main+2
0x3DC8	0x3455 ;?ICS?lstr39_main+3
0x3DC9	0x342D ;?ICS?lstr39_main+4
0x3DCA	0x3431 ;?ICS?lstr39_main+5
0x3DCB	0x3430 ;?ICS?lstr39_main+6
0x3DCC	0x3430 ;?ICS?lstr39_main+7
0x3DCD	0x3420 ;?ICS?lstr39_main+8
0x3DCE	0x3400 ;?ICS?lstr39_main+9
; end of ?ICS?lstr39_main
;main.c,0 :: ?ICS_lcd_prep_short
0x3DCF	0x3400 ;?ICS_lcd_prep_short+0
; end of ?ICS_lcd_prep_short
;main.c,0 :: ?ICS?lstr2_main
0x3DD0	0x346C ;?ICS?lstr2_main+0
0x3DD1	0x3400 ;?ICS?lstr2_main+1
; end of ?ICS?lstr2_main
;main.c,0 :: ?ICS?lstr5_main
0x3DD2	0x3441 ;?ICS?lstr5_main+0
0x3DD3	0x3455 ;?ICS?lstr5_main+1
0x3DD4	0x3454 ;?ICS?lstr5_main+2
0x3DD5	0x344F ;?ICS?lstr5_main+3
0x3DD6	0x3420 ;?ICS?lstr5_main+4
0x3DD7	0x3420 ;?ICS?lstr5_main+5
0x3DD8	0x3420 ;?ICS?lstr5_main+6
0x3DD9	0x3420 ;?ICS?lstr5_main+7
0x3DDA	0x3400 ;?ICS?lstr5_main+8
; end of ?ICS?lstr5_main
;main.c,0 :: ?ICS?lstr4_main
0x3DDB	0x3463 ;?ICS?lstr4_main+0
0x3DDC	0x3400 ;?ICS?lstr4_main+1
; end of ?ICS?lstr4_main
;main.c,0 :: ?ICS?lstr3_main
0x3DDD	0x3463 ;?ICS?lstr3_main+0
0x3DDE	0x3400 ;?ICS?lstr3_main+1
; end of ?ICS?lstr3_main
;main.c,0 :: ?ICS_Power_old
0x3DDF	0x3410 ;?ICS_Power_old+0
0x3DE0	0x3427 ;?ICS_Power_old+1
; end of ?ICS_Power_old
;main.c,0 :: ?ICS?lstr60_main
0x3DE1	0x3441 ;?ICS?lstr60_main+0
0x3DE2	0x344E ;?ICS?lstr60_main+1
0x3DE3	0x3454 ;?ICS?lstr60_main+2
0x3DE4	0x343D ;?ICS?lstr60_main+3
0x3DE5	0x3430 ;?ICS?lstr60_main+4
0x3DE6	0x342E ;?ICS?lstr60_main+5
0x3DE7	0x3430 ;?ICS?lstr60_main+6
0x3DE8	0x3457 ;?ICS?lstr60_main+7
0x3DE9	0x3400 ;?ICS?lstr60_main+8
; end of ?ICS?lstr60_main
;main.c,0 :: ?ICS?lstr29_main
0x3DEA	0x3420 ;?ICS?lstr29_main+0
0x3DEB	0x3400 ;?ICS?lstr29_main+1
; end of ?ICS?lstr29_main
;main.c,0 :: ?ICS?lstr32_main
0x3DEC	0x3420 ;?ICS?lstr32_main+0
0x3DED	0x3400 ;?ICS?lstr32_main+1
; end of ?ICS?lstr32_main
;main.c,0 :: ?ICS?lstr33_main
0x3DEE	0x3452 ;?ICS?lstr33_main+0
0x3DEF	0x3445 ;?ICS?lstr33_main+1
0x3DF0	0x3453 ;?ICS?lstr33_main+2
0x3DF1	0x3445 ;?ICS?lstr33_main+3
0x3DF2	0x3454 ;?ICS?lstr33_main+4
0x3DF3	0x3420 ;?ICS?lstr33_main+5
0x3DF4	0x3420 ;?ICS?lstr33_main+6
0x3DF5	0x3420 ;?ICS?lstr33_main+7
0x3DF6	0x3400 ;?ICS?lstr33_main+8
; end of ?ICS?lstr33_main
;main.c,0 :: ?ICS?lstr38_main
0x3DF7	0x3454 ;?ICS?lstr38_main+0
0x3DF8	0x3455 ;?ICS?lstr38_main+1
0x3DF9	0x344E ;?ICS?lstr38_main+2
0x3DFA	0x3445 ;?ICS?lstr38_main+3
0x3DFB	0x3400 ;?ICS?lstr38_main+4
; end of ?ICS?lstr38_main
;main.c,0 :: ?ICS?lstr65_main
0x3DFC	0x3420 ;?ICS?lstr65_main+0
0x3DFD	0x3420 ;?ICS?lstr65_main+1
0x3DFE	0x3420 ;?ICS?lstr65_main+2
0x3DFF	0x3420 ;?ICS?lstr65_main+3
0x3E00	0x3420 ;?ICS?lstr65_main+4
0x3E01	0x3420 ;?ICS?lstr65_main+5
0x3E02	0x3420 ;?ICS?lstr65_main+6
0x3E03	0x3420 ;?ICS?lstr65_main+7
0x3E04	0x3400 ;?ICS?lstr65_main+8
; end of ?ICS?lstr65_main
;main.c,0 :: ?ICS?lstr106_main
0x3E05	0x344C ;?ICS?lstr106_main+0
0x3E06	0x346F ;?ICS?lstr106_main+1
0x3E07	0x3473 ;?ICS?lstr106_main+2
0x3E08	0x3473 ;?ICS?lstr106_main+3
0x3E09	0x3465 ;?ICS?lstr106_main+4
0x3E0A	0x3473 ;?ICS?lstr106_main+5
0x3E0B	0x3420 ;?ICS?lstr106_main+6
0x3E0C	0x3420 ;?ICS?lstr106_main+7
0x3E0D	0x3400 ;?ICS?lstr106_main+8
; end of ?ICS?lstr106_main
;main.c,0 :: ?ICS?lstr108_main
0x3E0E	0x3420 ;?ICS?lstr108_main+0
0x3E0F	0x3420 ;?ICS?lstr108_main+1
0x3E10	0x3420 ;?ICS?lstr108_main+2
0x3E11	0x344F ;?ICS?lstr108_main+3
0x3E12	0x344E ;?ICS?lstr108_main+4
0x3E13	0x3420 ;?ICS?lstr108_main+5
0x3E14	0x3420 ;?ICS?lstr108_main+6
0x3E15	0x3400 ;?ICS?lstr108_main+7
; end of ?ICS?lstr108_main
;main.c,0 :: ?ICS?lstr31_main
0x3E16	0x345F ;?ICS?lstr31_main+0
0x3E17	0x3400 ;?ICS?lstr31_main+1
; end of ?ICS?lstr31_main
;main.c,0 :: ?ICS?lstr30_main
0x3E18	0x342E ;?ICS?lstr30_main+0
0x3E19	0x3400 ;?ICS?lstr30_main+1
; end of ?ICS?lstr30_main
;main.c,0 :: ?ICS?lstr28_main
0x3E1A	0x345F ;?ICS?lstr28_main+0
0x3E1B	0x3400 ;?ICS?lstr28_main+1
; end of ?ICS?lstr28_main
;main.c,0 :: ?ICS_p_cnt
0x3E1C	0x3400 ;?ICS_p_cnt+0
; end of ?ICS_p_cnt
;main.c,0 :: ?ICS_Soft_tune
0x3E1D	0x3400 ;?ICS_Soft_tune+0
; end of ?ICS_Soft_tune
;main.c,0 :: ?ICSmain_L_mult
0x3E1E	0x3401 ;?ICSmain_L_mult+0
; end of ?ICSmain_L_mult
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003      [31]    _Soft_I2C_Start
0x0022      [59]    _Soft_I2C_Write
0x005D      [24]    _Mul_8x8_U
0x0075      [25]    _Soft_I2C_Stop
0x008E      [64]    _set_addressing
0x00CE      [28]    _Div_16x16_U
0x00EA     [395]    _oled_wr_str
0x0275      [76]    _WordToStr
0x02C1      [84]    _led_send
0x0315      [12]    _SETFOV32
0x0321       [7]    _RES032
0x0328      [12]    _SETFUN32
0x0334       [4]    _FIXSIGN32
0x0338       [5]    _Delay_22us
0x033D      [54]    _Mul_32x32_U
0x0373     [300]    _SDIV3232L
0x049F      [12]    _COMFREM
0x04AB       [9]    _Delay_500us
0x04B4     [121]    _led_wr_str
0x052D      [90]    _NRM4032
0x0587     [115]    _IntToStr
0x05FA       [3]    _SETFDZ32
0x05FD      [24]    _ADC_Get_Sample
0x0615      [13]    _SETIOV3224
0x0622      [47]    _NRM3232
0x0651      [92]    _Double2Int
0x06AD     [159]    _Add_32x32_FP
0x074C      [17]    _send_command
0x075D      [97]    _VDelay_ms
0x07BE      [15]    _Byte2Double
0x07CD      [42]    _Mul_16x16_U
0x07F7       [9]    ___CC2DW
0x0800     [670]    _lcd_ind
0x0A9E      [97]    _get_reverse
0x0AFF     [188]    _Div_32x32_FP
0x0BBB      [79]    _Compare_Double
0x0C0A     [182]    _Div_32x32_S
0x0CC0      [70]    _Button
0x0D06     [111]    _get_forward
0x0D75      [35]    _Longint2Double
0x0D98     [102]    _Mul_32x32_FP
0x0DFE     [227]    _correction
0x0EE1      [31]    _Int2Double
0x0F00     [130]    _set_ind
0x0F82      [31]    _dysp_on
0x0FA1      [68]    _set_cap
0x0FE5      [20]    _set_sw
0x1000     [224]    _lcd_swr
0x10E0      [51]    _button_delay
0x1113    [1322]    _show_pwr
0x163D     [424]    _get_pwr
0x17E5      [16]    _Div_8x8_U
0x17F5      [11]    _EEPROM_Read
0x1800      [30]    _EEPROM_Write
0x181E      [28]    _atu_reset
0x183A     [859]    _lcd_pwr
0x1B95      [44]    _Div_16x16_S_L
0x1BC1     [177]    _show_reset
0x1C72     [205]    _get_swr
0x1D3F     [102]    _Div_16x16_S
0x1DA5     [198]    _coarse_cap
0x1E6B     [216]    _coarse_tune
0x1F43      [40]    _Dec2Bcd
0x1F6B      [19]    _Bcd2Dec
0x1F7E      [15]    _ADC_Init
0x1F8D      [35]    _Soft_I2C_Init
0x1FB0      [30]    _dysp_off
0x1FCE      [44]    _pic_init
0x2000     [238]    _sharp_ind
0x20EE     [238]    _sharp_cap
0x21DC     [379]    _sub_tune
0x2357     [343]    _lcd_prep
0x24AE     [237]    _tune
0x259B     [215]    _btn_push
0x2672     [142]    _led_init
0x2800    [1400]    _user_setup
0x2D78     [519]    _oled_init
0x3000     [926]    _button_proc
0x339E     [693]    _button_proc_test
0x3653     [266]    _main
0x3800     [835]    _cells_init
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000B       [0]    GIE_bit
0x000C       [1]    PORTA
0x000D       [1]    PORTB
0x000E       [1]    PORTC
0x0020       [1]    ___math_tempb
0x0021       [1]    __math_tempbD
0x0022       [9]    ?lstr52_main
0x002B       [9]    ?lstr51_main
0x0034       [9]    ?lstr50_main
0x003D       [2]    ?lstr53_main
0x003F       [9]    ?lstr56_main
0x0048       [1]    _Loss_mode
0x0049       [1]    _Test
0x004A       [2]    ?lstr49_main
0x004C       [9]    ?lstr44_main
0x0055       [9]    ?lstr43_main
0x005E       [8]    ?lstr42_main
0x0066       [9]    ?lstr45_main
0x006F       [1]    _L
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [1]    TRISA
0x008D       [0]    TRISB6_bit
0x008D       [0]    Soft_I2C_Scl_Direction
0x008D       [1]    TRISB
0x008D       [0]    TRISB7_bit
0x008D       [0]    Soft_I2C_Sda_Direction
0x008E       [1]    TRISC
0x0095       [1]    OPTION_REG
0x0097       [1]    WDTCON
0x0099       [1]    OSCCON
0x009B       [1]    ADRESL
0x009C       [1]    ADRESH
0x009D       [1]    ADCON0
0x009D       [0]    ADON_bit
0x009D       [0]    GO_NOT_DONE_bit
0x009E       [1]    ADCON1
0x00A0      [17]    ?lstr48_main
0x00B1      [17]    ?lstr47_main
0x00C2       [2]    ?lstr46_main
0x00C4       [9]    ?lstr57_main
0x00CD       [2]    ?lstr1_main
0x00CF       [2]    ?lstr2_main
0x00D1       [9]    ?lstr5_main
0x00DA       [2]    ?lstr4_main
0x00DC       [2]    ?lstr3_main
0x00DE       [2]    _Power_old
0x00E0       [9]    ?lstr60_main
0x00E9       [1]    main_step_ind
0x00EA       [5]    ?lstr55_main
0x00EF       [1]    main_L_mult
0x010C       [0]    LATA7_bit
0x010C       [0]    LATA5_bit
0x010C       [1]    LATA
0x010C       [0]    LATA4_bit
0x010C       [0]    LATA3_bit
0x010C       [0]    LATA2_bit
0x010C       [0]    Ind_045
0x010C       [0]    Ind_22
0x010C       [0]    Ind_45
0x010C       [0]    Ind_011
0x010C       [0]    LATA6_bit
0x010C       [0]    n_Tx
0x010C       [0]    p_Tx
0x010D       [0]    Soft_I2C_Sda
0x010D       [1]    LATB
0x010D       [0]    Soft_I2C_Scl
0x010D       [0]    Ind_022
0x010D       [0]    Ind_1
0x010D       [0]    Ind_005
0x010D       [0]    LATB5_bit
0x010D       [0]    LATB7_bit
0x010D       [0]    LATB6_bit
0x010D       [0]    LATB4_bit
0x010D       [0]    LATB3_bit
0x010E       [0]    LATC1_bit
0x010E       [0]    LATC2_bit
0x010E       [0]    LATC3_bit
0x010E       [0]    Cap_22
0x010E       [0]    Cap_10
0x010E       [1]    LATC
0x010E       [0]    LATC6_bit
0x010E       [0]    LATC7_bit
0x010E       [0]    LATC5_bit
0x010E       [0]    LATC4_bit
0x010E       [0]    LATC0_bit
0x010E       [0]    Cap_47
0x010E       [0]    Cap_470
0x010E       [0]    Cap_220
0x010E       [0]    Cap_100
0x010E       [0]    Cap_1000
0x010E       [0]    Cap_sw
0x0111       [0]    C1ON_bit
0x0113       [0]    C2ON_bit
0x0117       [1]    FVRCON
0x0120       [9]    ?lstr59_main
0x0129       [9]    ?lstr58_main
0x0132       [9]    ?lstr61_main
0x013B       [8]    ?lstr64_main
0x0143       [8]    ?lstr63_main
0x014B       [8]    ?lstr62_main
0x0153       [8]    ?lstr102_main
0x015B       [8]    ?lstr101_main
0x0163       [8]    ?lstr103_main
0x016B       [5]    ?lstr54_main
0x018C       [0]    ANSA1_bit
0x018C       [1]    ANSELA
0x018C       [0]    ANSA0_bit
0x018D       [1]    ANSELB
0x0191       [2]    EEADR
0x0193       [1]    EEDATL
0x0193       [2]    EEDAT
0x0195       [0]    EEPGD_bit
0x0195       [0]    WR_bit
0x0195       [0]    RD_bit
0x0195       [0]    WREN_bit
0x0195       [0]    CFGS_bit
0x0196       [1]    EECON2
0x01A0       [9]    ?lstr105_main
0x01A9       [8]    ?lstr104_main
0x01B1      [10]    ?lstr100_main
0x01BB      [11]    ?lstr95_main
0x01C6      [11]    ?lstr94_main
0x01D1      [11]    ?lstr93_main
0x01DC      [11]    ?lstr96_main
0x01E7       [9]    ?lstr106_main
0x020D       [1]    WPUB
0x0220      [10]    ?lstr99_main
0x022A      [18]    ?lstr98_main
0x023C      [18]    ?lstr97_main
0x024E       [9]    ?lstr41_main
0x0257       [9]    ?lstr40_main
0x0260      [10]    ?lstr39_main
0x026A       [1]    _lcd_prep_short
0x026B       [1]    main_Loss_ind
0x026C       [2]    ?lstr31_main
0x026E       [2]    ?lstr30_main
0x02A0       [8]    ?lstr108_main
0x02A8       [9]    ?lstr107_main
0x02B1       [8]    ?lstr109_main
0x02B9       [8]    ?lstr112_main
0x02C1       [8]    ?lstr111_main
0x02C9       [9]    ?lstr110_main
0x02D2       [9]    ?lstr6_main
0x02DB       [2]    ?lstr29_main
0x02DD       [2]    ?lstr32_main
0x02DF       [9]    ?lstr33_main
0x02E8       [5]    ?lstr38_main
0x02ED       [2]    ?lstr28_main
0x02EF       [1]    _p_cnt
0x0320       [5]    ?lstr37_main
0x0325       [9]    ?lstr23_main
0x032E       [2]    ?lstr22_main
0x0330       [2]    ?lstr21_main
0x0332       [9]    ?lstr24_main
0x033B       [2]    ?lstr27_main
0x033D       [2]    ?lstr26_main
0x033F       [2]    ?lstr25_main
0x0341       [9]    ?lstr34_main
0x034A       [9]    ?lstr36_main
0x0353       [9]    ?lstr35_main
0x035C       [1]    main_C_q
0x035D       [1]    main_L_q
0x035E       [1]    _rready
0x035F       [1]    _Restart
0x0360       [2]    ?lstr8_main
0x0362       [2]    ?lstr7_main
0x0364       [1]    _bypas
0x0365       [9]    ?lstr9_main
0x036E       [2]    ?lstr12_main
0x03A0       [2]    ?lstr11_main
0x03A2       [9]    ?lstr10_main
0x03AB       [1]    main_L_linear
0x03AC       [2]    ?lstr16_main
0x03AE       [2]    ?lstr15_main
0x03B0       [2]    ?lstr14_main
0x03B2       [2]    ?lstr17_main
0x03B4       [9]    ?lstr20_main
0x03BD       [9]    ?lstr19_main
0x03C6       [2]    ?lstr18_main
0x03C8       [2]    ?lstr13_main
0x03CA       [1]    main_C_linear
0x03CB       [1]    _cap_mem
0x03CC       [1]    _Auto_mem
0x03CD       [1]    _SW_mem
0x03CE       [1]    _ind_mem
0x03CF       [3]    ?lstr87_main
0x03D2       [3]    ?lstr90_main
0x03D5       [3]    ?lstr89_main
0x03D8       [3]    ?lstr88_main
0x03DB       [1]    main_cap
0x03DC       [3]    ?lstr91_main
0x03DF       [2]    _SWR_fixed_old
0x03E1       [1]    _Auto
0x03E2       [4]    _dysp_cnt_mult
0x03E6       [9]    ?lstr66_main
0x03EF       [1]    _Soft_tune
0x0420       [9]    ?lstr65_main
0x0429       [1]    main_Overload
0x042A       [2]    ?lstr92_main
0x042C       [1]    _Dysp_delay
0x042D       [2]    _dysp_cnt
0x042F       [2]    _Power
0x0431       [1]    main_ind
0x0432       [1]    main_P_High
0x0433       [1]    main_K_Mult
0x0434       [1]    main_D_correction
0x0435       [1]    _but
0x0436       [3]    ?lstr83_main
0x0439       [3]    ?lstr82_main
0x043C       [3]    ?lstr81_main
0x043F       [2]    ?lstr86_main
0x0441       [3]    ?lstr85_main
0x0444       [3]    ?lstr84_main
0x0447       [1]    main_SW
0x0448       [1]    main_L_invert
0x0449       [1]    main_C_mult
0x044A       [1]    main_step_cap
0x044B       [9]    ?lstr77_main
0x0454       [9]    ?lstr72_main
0x045D       [9]    ?lstr71_main
0x0466       [9]    ?lstr73_main
0x046F       [1]    _Fid_loss
0x04A0       [9]    ?lstr75_main
0x04A9       [9]    ?lstr74_main
0x04B2       [9]    ?lstr76_main
0x04BB       [9]    ?lstr70_main
0x04C4       [9]    ?lstr67_main
0x04CD       [9]    ?lstr80_main
0x04D6       [2]    _SWR_old
0x04D8       [9]    ?lstr79_main
0x04E1       [9]    ?lstr78_main
0x04EA       [2]    _swr_a
0x04EC       [2]    main_max_for_start
0x04EE       [1]    oled_control_E
0x04EF       [1]    oled_control_RW
0x0520       [9]    ?lstr69_main
0x0529       [9]    ?lstr68_main
0x0532       [1]    oled_control_LED
0x0533       [4]    _ADC_Get_Sample_Ptr
0x0537       [1]    oled_control_shift_line
0x0538       [1]    oled_control_RS
0x0539       [1]    oled_control_oled_shift
0x053A       [1]    oled_control_led_addr
0x053B       [1]    oled_control_led_type
0x053C       [2]    _P_max
0x053E       [2]    main_min_for_start
0x0540       [2]    main_max_swr
0x0542       [2]    _Cap7
0x0544       [2]    _Cap6
0x0546       [2]    _Cap2
0x0548       [2]    _Cap1
0x054A       [2]    _Cap5
0x054C       [2]    _Cap4
0x054E       [2]    _Cap3
0x0550       [2]    _Auto_delta
0x0552       [2]    _Ind1
0x0554       [2]    _work_int
0x0556       [2]    _Ind4
0x0558       [2]    _Ind3
0x055A       [2]    _Ind2
0x055C       [2]    _SWR
0x055E       [2]    _PWR
0x0560       [2]    _Ind5
0x0562       [7]    _work_str
0x0569       [2]    _Ind7
0x056B       [2]    _Ind6
0x056D       [1]    _type
0x056E       [2]    main_Rel_Del
0x05A0       [7]    _work_str_2
0x05A7       [2]    FLOC__cells_init
0x05A9       [1]    FARG_EEPROM_Read_Address
0x05A9       [2]    user_setup_usr_set_L0
0x05A9       [1]    oled_init_i_L0
0x05A9       [1]    FARG_Bcd2Dec_bcdnum
0x05AA       [1]    oled_init_r_L0
0x05AB       [9]    user_setup_SWR_str_L0
0x05B4       [1]    FARG_Dec2Bcd_decnum
0x05B5       [1]    Dec2Bcd_tmp_L0
0x05B6       [2]    sub_tune_swr_mem_L0
0x05B8       [2]    sub_tune_ind_mem_L0
0x05BA       [2]    sub_tune_cap_mem_L0
0x05BC       [1]    coarse_tune_count_L0
0x05BC       [1]    sharp_cap_range_L0
0x05BC       [1]    sharp_ind_range_L0
0x05BD       [1]    sharp_ind_count_L0
0x05BD       [1]    sharp_cap_count_L0
0x05BD       [1]    coarse_tune_mem_cap_L0
0x05BE       [1]    sharp_cap_max_range_L0
0x05BE       [1]    sharp_ind_max_range_L0
0x05BE       [1]    coarse_tune_mem_step_cap_L0
0x05BF       [1]    sharp_cap_min_range_L0
0x05BF       [1]    sharp_ind_min_range_L0
0x05BF       [2]    coarse_tune_min_swr_L0
0x05C0       [2]    sharp_cap_min_swr_L0
0x05C0       [2]    sharp_ind_min_SWR_L0
0x05C1       [1]    coarse_tune_step_L0
0x05C2       [1]    coarse_cap_count_L0
0x05C3       [2]    coarse_cap_min_swr_L0
0x05C5       [1]    coarse_cap_step_L0
0x05C6       [1]    FLOC__get_swr
0x05C7       [1]    lcd_pwr_peak_cnt_L0
0x05C7       [1]    FARG_set_sw_SW
0x05C7       [1]    FARG_EEPROM_Write_Address
0x05C8       [1]    FARG_EEPROM_Write_data_
0x05C8       [2]    lcd_pwr_delta_L0
0x05CA       [1]    lcd_pwr_cnt_L0
0x05CB       [2]    lcd_pwr_p_L0
0x05CD       [2]    lcd_pwr_SWR_fixed_L0
0x05CF       [1]    FARG_set_ind_Ind
0x05CF       [1]    FARG_set_cap_Cap
0x05CF       [2]    FARG_lcd_swr_swr
0x05CF       [4]    get_pwr_Forward_L0
0x05CF       [1]    FLOC__button_delay
0x05CF       [2]    FARG_show_pwr_Power
0x05D1       [2]    FARG_show_pwr_SWR
0x05D3       [2]    show_pwr_p_ant_L0
0x05D3       [4]    get_pwr_Reverse_L0
0x05D5       [2]    show_pwr_eff_L0
0x05D7       [4]    show_pwr_a_L0
0x05D7       [4]    get_pwr_p_L0
0x05DB       [4]    show_pwr_b_L0
0x05DF      [12]    FLOC__show_pwr
0x05EB       [2]    FARG_correction_input
0x05EB       [1]    lcd_ind_column_L0
0x05EB       [2]    FARG_VDelay_ms_Time_ms
0x05EB       [2]    get_forward_Forward_L0
0x05EB       [2]    get_reverse_Reverse_L0
0x05EB       [2]    FARG_Button_port
0x05EB       [1]    FARG_send_command_oled_command
0x05ED       [1]    FARG_Button_pin
0x05EE       [1]    FARG_Button_time_ms
0x05EF       [1]    FARG_Button_active_state
0x0620       [4]    VDelay_ms_NumberOfCyc_L0
0x0620       [1]    Button_pMask_L0
0x0621       [1]    Button_rslt_L0
0x0624       [1]    FARG_ADC_Get_Sample_channel
0x0624       [1]    FARG_led_wr_str_col
0x0624       [2]    FARG_IntToStr_input
0x0625       [1]    FARG_led_wr_str_pos
0x0626       [2]    FARG_IntToStr_output
0x0626       [2]    FARG_led_wr_str_str
0x0628       [1]    FARG_led_wr_str_leng
0x0628       [2]    IntToStr_i_L0
0x0629       [1]    led_wr_str_i_L0
0x062A       [2]    IntToStr_negative_L0
0x062C       [2]    IntToStr_inword_L0
0x062E       [2]    FARG_WordToStr_input
0x062E       [1]    FARG_led_send_nible
0x062E       [1]    FARG_oled_wr_str_col
0x062F       [1]    led_send_sdata_L0
0x062F       [1]    FARG_oled_wr_str_page
0x0630       [2]    FARG_oled_wr_str_str
0x0630       [2]    FARG_WordToStr_output
0x0632       [1]    WordToStr_len_L0
0x0632       [1]    FARG_oled_wr_str_leng
0x0633       [2]    FLOC__WordToStr
0x0633       [1]    oled_wr_str_i_L0
0x0634       [1]    oled_wr_str_h_L0
0x0635       [1]    oled_wr_str_g_L0
0x0636       [1]    oled_wr_str_w1_L0
0x0637       [1]    oled_wr_str_w2_L0
0x0638       [1]    FARG_set_addressing_pagenum
0x0639       [1]    FARG_set_addressing_c_start
0x063A       [1]    set_addressing_a_L0
0x063B       [1]    set_addressing_b_L0
0x063C       [1]    set_addressing_c_L0
0x063D       [1]    FARG_Soft_I2C_Write_d
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0FF9       [1]    ?ICSmain_step_ind
0x0FFA       [5]    ?ICS?lstr55_main
0x0FFF       [1]    ?ICS_L
0x1FFA       [5]    ?ICS?lstr37_main
0x1FFF       [1]    ?ICSmain_Loss_ind
0x2700       [2]    ?ICS?lstr11_main
0x2702       [9]    ?ICS?lstr10_main
0x270B       [1]    ?ICSmain_L_linear
0x270C       [2]    ?ICS?lstr16_main
0x270E       [2]    ?ICS?lstr15_main
0x2710       [2]    ?ICS?lstr14_main
0x2712       [2]    ?ICS?lstr17_main
0x2714       [9]    ?ICS?lstr20_main
0x271D       [9]    ?ICS?lstr19_main
0x2726       [2]    ?ICS?lstr18_main
0x2728       [2]    ?ICS?lstr13_main
0x272A       [1]    ?ICSmain_C_linear
0x272B       [1]    ?ICS_cap_mem
0x272C       [1]    ?ICS_Auto_mem
0x272D       [1]    ?ICS_SW_mem
0x272E       [1]    ?ICS_ind_mem
0x272F       [3]    ?ICS?lstr87_main
0x2732       [3]    ?ICS?lstr90_main
0x2735       [3]    ?ICS?lstr89_main
0x2738       [3]    ?ICS?lstr88_main
0x273B       [1]    ?ICSmain_cap
0x273C       [3]    ?ICS?lstr91_main
0x273F       [2]    ?ICS_SWR_fixed_old
0x2741       [1]    ?ICS_Auto
0x2742       [4]    ?ICS_dysp_cnt_mult
0x2746       [9]    ?ICS?lstr66_main
0x274F       [9]    ?ICS?lstr52_main
0x2758       [9]    ?ICS?lstr51_main
0x2761       [9]    ?ICS?lstr50_main
0x276A       [2]    ?ICS?lstr53_main
0x276C       [9]    ?ICS?lstr56_main
0x2775       [1]    ?ICS_Loss_mode
0x2776       [1]    ?ICS_Test
0x2777       [2]    ?ICS?lstr49_main
0x2779       [9]    ?ICS?lstr44_main
0x2782       [9]    ?ICS?lstr43_main
0x278B       [8]    ?ICS?lstr42_main
0x2793       [9]    ?ICS?lstr45_main
0x279C       [9]    ?ICS?lstr59_main
0x27A5       [9]    ?ICS?lstr58_main
0x27AE       [9]    ?ICS?lstr61_main
0x27B7       [8]    ?ICS?lstr64_main
0x27BF       [8]    ?ICS?lstr63_main
0x27C7       [8]    ?ICS?lstr62_main
0x27CF       [8]    ?ICS?lstr102_main
0x27D7       [8]    ?ICS?lstr101_main
0x27DF       [8]    ?ICS?lstr103_main
0x27E7       [1]    ?ICSmain_C_q
0x27E8       [1]    ?ICSmain_L_q
0x27E9       [1]    ?ICS_rready
0x27EA       [1]    ?ICS_Restart
0x27EB       [2]    ?ICS?lstr8_main
0x27ED       [2]    ?ICS?lstr7_main
0x27EF       [1]    ?ICS_bypas
0x27F0       [9]    ?ICS?lstr9_main
0x27F9       [2]    ?ICS?lstr12_main
0x27FB       [5]    ?ICS?lstr54_main
0x2F7F       [9]    ?ICS?lstr75_main
0x2F88       [9]    ?ICS?lstr74_main
0x2F91       [9]    ?ICS?lstr76_main
0x2F9A       [9]    ?ICS?lstr70_main
0x2FA3       [9]    ?ICS?lstr67_main
0x2FAC       [9]    ?ICS?lstr80_main
0x2FB5       [2]    ?ICS_SWR_old
0x2FB7       [9]    ?ICS?lstr79_main
0x2FC0       [9]    ?ICS?lstr78_main
0x2FC9       [9]    ?ICS?lstr23_main
0x2FD2       [2]    ?ICS?lstr22_main
0x2FD4       [2]    ?ICS?lstr21_main
0x2FD6       [9]    ?ICS?lstr24_main
0x2FDF       [2]    ?ICS?lstr27_main
0x2FE1       [2]    ?ICS?lstr26_main
0x2FE3       [2]    ?ICS?lstr25_main
0x2FE5       [9]    ?ICS?lstr34_main
0x2FEE       [9]    ?ICS?lstr36_main
0x2FF7       [9]    ?ICS?lstr35_main
0x3761       [9]    ?ICS?lstr105_main
0x376A       [8]    ?ICS?lstr104_main
0x3772      [10]    ?ICS?lstr100_main
0x377C      [11]    ?ICS?lstr95_main
0x3787      [11]    ?ICS?lstr94_main
0x3792      [11]    ?ICS?lstr93_main
0x379D      [11]    ?ICS?lstr96_main
0x37A8       [1]    ?ICSmain_Overload
0x37A9       [2]    ?ICS?lstr92_main
0x37AB       [1]    ?ICS_Dysp_delay
0x37AC       [2]    ?ICS_dysp_cnt
0x37AE       [2]    ?ICS_Power
0x37B0       [1]    ?ICSmain_ind
0x37B1       [1]    ?ICSmain_P_High
0x37B2       [1]    ?ICSmain_K_Mult
0x37B3       [1]    ?ICSmain_D_correction
0x37B4       [1]    ?ICS_but
0x37B5       [3]    ?ICS?lstr83_main
0x37B8       [3]    ?ICS?lstr82_main
0x37BB       [3]    ?ICS?lstr81_main
0x37BE       [2]    ?ICS?lstr86_main
0x37C0       [3]    ?ICS?lstr85_main
0x37C3       [3]    ?ICS?lstr84_main
0x37C6       [1]    ?ICSmain_SW
0x37C7       [1]    ?ICSmain_L_invert
0x37C8       [1]    ?ICSmain_C_mult
0x37C9       [1]    ?ICSmain_step_cap
0x37CA       [9]    ?ICS?lstr77_main
0x37D3       [9]    ?ICS?lstr72_main
0x37DC       [9]    ?ICS?lstr71_main
0x37E5       [9]    ?ICS?lstr73_main
0x37EE       [9]    ?ICS?lstr69_main
0x37F7       [9]    ?ICS?lstr68_main
0x3B43     [480]    oled_control_font5x8
0x3D23       [9]    ?ICS?lstr107_main
0x3D2C       [8]    ?ICS?lstr109_main
0x3D34       [8]    ?ICS?lstr112_main
0x3D3C       [8]    ?ICS?lstr111_main
0x3D44       [9]    ?ICS?lstr110_main
0x3D4D       [9]    ?ICS?lstr6_main
0x3D56      [17]    ?ICS?lstr48_main
0x3D67      [17]    ?ICS?lstr47_main
0x3D78       [2]    ?ICS?lstr46_main
0x3D7A       [9]    ?ICS?lstr57_main
0x3D83       [2]    ?ICS?lstr1_main
0x3D85      [10]    ?ICS?lstr99_main
0x3D8F      [18]    ?ICS?lstr98_main
0x3DA1      [18]    ?ICS?lstr97_main
0x3DB3       [9]    ?ICS?lstr41_main
0x3DBC       [9]    ?ICS?lstr40_main
0x3DC5      [10]    ?ICS?lstr39_main
0x3DCF       [1]    ?ICS_lcd_prep_short
0x3DD0       [2]    ?ICS?lstr2_main
0x3DD2       [9]    ?ICS?lstr5_main
0x3DDB       [2]    ?ICS?lstr4_main
0x3DDD       [2]    ?ICS?lstr3_main
0x3DDF       [2]    ?ICS_Power_old
0x3DE1       [9]    ?ICS?lstr60_main
0x3DEA       [2]    ?ICS?lstr29_main
0x3DEC       [2]    ?ICS?lstr32_main
0x3DEE       [9]    ?ICS?lstr33_main
0x3DF7       [5]    ?ICS?lstr38_main
0x3DFC       [9]    ?ICS?lstr65_main
0x3E05       [9]    ?ICS?lstr106_main
0x3E0E       [8]    ?ICS?lstr108_main
0x3E16       [2]    ?ICS?lstr31_main
0x3E18       [2]    ?ICS?lstr30_main
0x3E1A       [2]    ?ICS?lstr28_main
0x3E1C       [1]    ?ICS_p_cnt
0x3E1D       [1]    ?ICS_Soft_tune
0x3E1E       [1]    ?ICSmain_L_mult
